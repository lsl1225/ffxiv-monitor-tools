/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 228:
/***/ ((module) => {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),

/***/ 543:
/***/ (function(module, exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.21';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function',
      INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/;

  /** Used to match a single whitespace character. */
  var reWhitespace = /\s/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */
  var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string;
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex(string) {
    var index = string.length;

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            }
          }
          return iteratee;
        });
      } else {
        iteratees = [identity];
      }

      var index = -1;
      iteratees = arrayMap(iteratees, baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      var low = 0,
          high = array == null ? 0 : array.length;
      if (high === 0) {
        return 0;
      }

      value = iteratee(value);
      var valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
      // and escape the comment, thus injecting code that gets evaled.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/\s/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Throw an error if a forbidden character was found in `variable`, to prevent
      // potential command injection attacks.
      else if (reForbiddenIdentifierChars.test(variable)) {
        throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
      }

      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return baseTrim(string);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.slice(0, trimmedEndIndex(string) + 1);
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));


/***/ }),

/***/ 262:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// For consistency with Responses, Conditions
// are also functions.
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    targetIsYou() {
        return (data, matches) => data.me === matches?.target;
    },
    targetIsNotYou() {
        return (data, matches) => data.me !== matches?.target;
    },
    caresAboutAOE() {
        return (data) => data.role === 'tank' || data.role === 'healer' || data.CanAddle() || data.job === 'BLU';
    },
    caresAboutMagical() {
        return (data) => data.role === 'tank' || data.role === 'healer' || data.CanAddle() || data.job === 'BLU';
    },
    caresAboutPhysical() {
        return (data) => data.role === 'tank' || data.role === 'healer' || data.CanFeint() || data.job === 'BLU';
    },
});
//# sourceMappingURL=conditions.js.map

/***/ }),

/***/ 946:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Auto-generated from gen_zone_id_and_info.ts
// DO NOT EDIT THIS FILE DIRECTLY
const data = {
    'ChaoticAllianceRaid': 37,
    'Companions': 12,
    'CustomDeliveries': 25,
    'DeepDungeons': 21,
    'DisciplesOfTheHand': 17,
    'DisciplesOfTheLand': 16,
    'Dungeons': 2,
    'DutyRoulette': 1,
    'Eureka': 26,
    'Fates': 8,
    'Fishing': 34,
    'Gate': 35,
    'GoldSaucer': 19,
    'GrandCompany': 11,
    'Guildhests': 3,
    'IslandSanctuary': 36,
    'Levequests': 10,
    'OceanFishing': 31,
    'OverallCompletion': 14,
    'PlayerCommendation': 15,
    'Pvp': 6,
    'QuestBattles': 7,
    'Raids': 5,
    'RetainerVentures': 18,
    'SaveTheQueen': 29,
    'TheHunt': 33,
    'TheMaskedCarnivale': 27,
    'TreasureHunt': 9,
    'Trials': 4,
    'TribalQuests': 13,
    'TripleTriad': 32,
    'UltimateRaids': 28,
    'VCDungeonFinder': 30,
    'WondrousTails': 24,
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);
//# sourceMappingURL=content_type.js.map

/***/ }),

/***/ 765:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Hf: () => (/* binding */ isLang),
/* harmony export */   yJ: () => (/* binding */ langToLocale)
/* harmony export */ });
/* unused harmony exports languages, langMap, browserLanguagesToLang */
const languages = ['en', 'de', 'fr', 'ja', 'cn', 'ko'];
const langMap = {
    en: {
        en: 'English',
        de: 'German',
        fr: 'French',
        ja: 'Japanese',
        cn: 'Chinese',
        ko: 'Korean',
    },
    de: {
        en: 'Englisch',
        de: 'Deutsch',
        fr: 'Französisch',
        ja: 'Japanisch',
        cn: 'Chinesisch',
        ko: 'Koreanisch',
    },
    fr: {
        en: 'Anglais',
        de: 'Allemand',
        fr: 'Français',
        ja: 'Japonais',
        cn: 'Chinois',
        ko: 'Coréen',
    },
    ja: {
        en: '英語',
        de: 'ドイツ語',
        fr: 'フランス語',
        ja: '日本語',
        cn: '中国語',
        ko: '韓国語',
    },
    cn: {
        en: '英文',
        de: '德文',
        fr: '法文',
        ja: '日文',
        cn: '中文',
        ko: '韩文',
    },
    ko: {
        en: '영어',
        de: '독일어',
        fr: '프랑스어',
        ja: '일본어',
        cn: '중국어',
        ko: '한국어',
    },
};
const isLang = (lang) => {
    const langStrs = languages;
    if (lang === undefined)
        return false;
    return langStrs.includes(lang);
};
const langToLocale = (lang) => {
    return {
        en: 'en',
        de: 'de',
        fr: 'fr',
        ja: 'ja',
        cn: 'zh-CN',
        ko: 'ko',
    }[lang];
};
const browserLanguagesToLang = (languages) => {
    const lang = [...navigator.languages, 'en']
        .map((l) => l.slice(0, 2))
        // Remap `zh` to `cn` to match cactbot languages
        .map((l) => l === 'zh' ? 'cn' : l)
        .filter((l) => languages.includes(l))[0];
    return isLang(lang) ? lang : 'en';
};
//# sourceMappingURL=languages.js.map

/***/ }),

/***/ 130:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   s: () => (/* binding */ logDefinitionsVersions)
/* harmony export */ });
// TODO: Maybe bring in a helper library that can compile-time extract these keys instead?
const combatantMemoryKeys = [
    'CurrentWorldID',
    'WorldID',
    'WorldName',
    'BNpcID',
    'BNpcNameID',
    'PartyType',
    'ID',
    'OwnerID',
    'WeaponId',
    'Type',
    'Job',
    'Level',
    'Name',
    'CurrentHP',
    'MaxHP',
    'CurrentMP',
    'MaxMP',
    'PosX',
    'PosY',
    'PosZ',
    'Heading',
    'MonsterType',
    'Status',
    'ModelStatus',
    'AggressionStatus',
    'TargetID',
    'IsTargetable',
    'Radius',
    'Distance',
    'EffectiveDistance',
    'NPCTargetID',
    'CurrentGP',
    'MaxGP',
    'CurrentCP',
    'MaxCP',
    'PCTargetID',
    'IsCasting1',
    'IsCasting2',
    'CastBuffID',
    'CastTargetID',
    'CastGroundTargetX',
    'CastGroundTargetY',
    'CastGroundTargetZ',
    'CastDurationCurrent',
    'CastDurationMax',
    'TransformationId',
];
const latestLogDefinitions = {
    GameLog: {
        type: '00',
        name: 'GameLog',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'ChatLog',
        fields: {
            type: 0,
            timestamp: 1,
            code: 2,
            name: 3,
            line: 4,
        },
        subFields: {
            code: {
                '0039': {
                    name: 'message',
                    canAnonymize: true,
                },
                '0038': {
                    name: 'echo',
                    canAnonymize: true,
                },
                '0044': {
                    name: 'dialog',
                    canAnonymize: true,
                },
                '0839': {
                    name: 'message',
                    canAnonymize: true,
                },
            },
        },
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'filter',
            filters: { code: ['0044', '0839'] },
        },
    },
    ChangeZone: {
        type: '01',
        name: 'ChangeZone',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'Territory',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            name: 3,
        },
        lastInclude: true,
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'all',
        },
    },
    ChangedPlayer: {
        type: '02',
        name: 'ChangedPlayer',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'ChangePrimaryPlayer',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            name: 3,
        },
        playerIds: {
            2: 3,
        },
        lastInclude: true,
        canAnonymize: true,
        firstOptionalField: undefined,
    },
    AddedCombatant: {
        type: '03',
        name: 'AddedCombatant',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'AddCombatant',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            name: 3,
            job: 4,
            level: 5,
            ownerId: 6,
            worldId: 7,
            world: 8,
            npcNameId: 9,
            npcBaseId: 10,
            currentHp: 11,
            hp: 12,
            currentMp: 13,
            mp: 14,
            // maxTp: 15,
            // tp: 16,
            x: 17,
            y: 18,
            z: 19,
            heading: 20,
        },
        playerIds: {
            2: 3,
            6: null,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'filter',
            filters: { id: '4.{7}' },
            combatantIdFields: 2,
        },
    },
    RemovedCombatant: {
        type: '04',
        name: 'RemovedCombatant',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'RemoveCombatant',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            name: 3,
            job: 4,
            level: 5,
            owner: 6,
            world: 8,
            npcNameId: 9,
            npcBaseId: 10,
            currentHp: 11,
            hp: 12,
            currentMp: 13,
            mp: 14,
            // currentTp: 15,
            // maxTp: 16,
            x: 17,
            y: 18,
            z: 19,
            heading: 20,
        },
        playerIds: {
            2: 3,
            6: null,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'filter',
            filters: { id: '4.{7}' },
            combatantIdFields: 2,
        },
    },
    PartyList: {
        type: '11',
        name: 'PartyList',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'PartyList',
        fields: {
            type: 0,
            timestamp: 1,
            partyCount: 2,
            id0: 3,
            id1: 4,
            id2: 5,
            id3: 6,
            id4: 7,
            id5: 8,
            id6: 9,
            id7: 10,
            id8: 11,
            id9: 12,
            id10: 13,
            id11: 14,
            id12: 15,
            id13: 16,
            id14: 17,
            id15: 18,
            id16: 19,
            id17: 20,
            id18: 21,
            id19: 22,
            id20: 23,
            id21: 24,
            id22: 25,
            id23: 26,
        },
        playerIds: {
            3: null,
            4: null,
            5: null,
            6: null,
            7: null,
            8: null,
            9: null,
            10: null,
            11: null,
            12: null,
            13: null,
            14: null,
            15: null,
            16: null,
            17: null,
            18: null,
            19: null,
            20: null,
            21: null,
            22: null,
            23: null,
            24: null,
            25: null,
            26: null,
        },
        firstOptionalField: 3,
        canAnonymize: true,
        lastInclude: true,
    },
    PlayerStats: {
        type: '12',
        name: 'PlayerStats',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'PlayerStats',
        fields: {
            type: 0,
            timestamp: 1,
            job: 2,
            strength: 3,
            dexterity: 4,
            vitality: 5,
            intelligence: 6,
            mind: 7,
            piety: 8,
            attackPower: 9,
            directHit: 10,
            criticalHit: 11,
            attackMagicPotency: 12,
            healMagicPotency: 13,
            determination: 14,
            skillSpeed: 15,
            spellSpeed: 16,
            tenacity: 18,
            localContentId: 19,
        },
        canAnonymize: true,
        lastInclude: true,
        firstOptionalField: undefined,
    },
    StartsUsing: {
        type: '20',
        name: 'StartsUsing',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'StartsCasting',
        fields: {
            type: 0,
            timestamp: 1,
            sourceId: 2,
            source: 3,
            id: 4,
            ability: 5,
            targetId: 6,
            target: 7,
            castTime: 8,
            x: 9,
            y: 10,
            z: 11,
            heading: 12,
        },
        possibleRsvFields: 5,
        blankFields: [6],
        playerIds: {
            2: 3,
            6: 7,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'filter',
            filters: { sourceId: '4.{7}' },
            combatantIdFields: [2, 6],
        },
    },
    Ability: {
        type: '21',
        name: 'Ability',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'ActionEffect',
        fields: {
            type: 0,
            timestamp: 1,
            sourceId: 2,
            source: 3,
            id: 4,
            ability: 5,
            targetId: 6,
            target: 7,
            flags: 8,
            damage: 9,
            targetCurrentHp: 24,
            targetMaxHp: 25,
            targetCurrentMp: 26,
            targetMaxMp: 27,
            // targetCurrentTp: 28,
            // targetMaxTp: 29,
            targetX: 30,
            targetY: 31,
            targetZ: 32,
            targetHeading: 33,
            currentHp: 34,
            maxHp: 35,
            currentMp: 36,
            maxMp: 37,
            // currentTp: 38;
            // maxTp: 39;
            x: 40,
            y: 41,
            z: 42,
            heading: 43,
            sequence: 44,
            targetIndex: 45,
            targetCount: 46,
            ownerId: 47,
            ownerName: 48,
            effectDisplayType: 49,
            actionId: 50,
            actionAnimationId: 51,
            animationLockTime: 52,
            rotationHex: 53,
        },
        possibleRsvFields: 5,
        playerIds: {
            2: 3,
            6: 7,
            47: 48,
        },
        blankFields: [6, 47, 48],
        canAnonymize: true,
        // @TODO: Set this back to `undefined` after KR/CN have access to the new fields
        firstOptionalField: 47,
        analysisOptions: {
            include: 'filter',
            filters: { sourceId: '4.{7}' },
            combatantIdFields: [2, 6],
        },
    },
    NetworkAOEAbility: {
        type: '22',
        name: 'NetworkAOEAbility',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'AOEActionEffect',
        fields: {
            type: 0,
            timestamp: 1,
            sourceId: 2,
            source: 3,
            id: 4,
            ability: 5,
            targetId: 6,
            target: 7,
            flags: 8,
            damage: 9,
            targetCurrentHp: 24,
            targetMaxHp: 25,
            targetCurrentMp: 26,
            targetMaxMp: 27,
            // targetCurrentTp: 28,
            // targetMaxTp: 29,
            targetX: 30,
            targetY: 31,
            targetZ: 32,
            targetHeading: 33,
            currentHp: 34,
            maxHp: 35,
            currentMp: 36,
            maxMp: 37,
            // currentTp: 38;
            // maxTp: 39;
            x: 40,
            y: 41,
            z: 42,
            heading: 43,
            sequence: 44,
            targetIndex: 45,
            targetCount: 46,
            ownerId: 47,
            ownerName: 48,
            effectDisplayType: 49,
            actionId: 50,
            actionAnimationId: 51,
            animationLockTime: 52,
            rotationHex: 53,
        },
        possibleRsvFields: 5,
        playerIds: {
            2: 3,
            6: 7,
            47: 48,
        },
        blankFields: [6, 47, 48],
        canAnonymize: true,
        // @TODO: Set this back to `undefined` after KR/CN have access to the new fields
        firstOptionalField: 47,
        analysisOptions: {
            include: 'filter',
            filters: { sourceId: '4.{7}' },
            combatantIdFields: [2, 6],
        },
    },
    NetworkCancelAbility: {
        type: '23',
        name: 'NetworkCancelAbility',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'CancelAction',
        fields: {
            type: 0,
            timestamp: 1,
            sourceId: 2,
            source: 3,
            id: 4,
            name: 5,
            reason: 6,
        },
        possibleRsvFields: 5,
        playerIds: {
            2: 3,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'filter',
            filters: { sourceId: '4.{7}' },
            combatantIdFields: 2,
        },
    },
    NetworkDoT: {
        type: '24',
        name: 'NetworkDoT',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'DoTHoT',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            name: 3,
            which: 4,
            effectId: 5,
            damage: 6,
            currentHp: 7,
            maxHp: 8,
            currentMp: 9,
            maxMp: 10,
            // currentTp: 11,
            // maxTp: 12,
            x: 13,
            y: 14,
            z: 15,
            heading: 16,
            sourceId: 17,
            source: 18,
            // An id number lookup into the AttackType table
            damageType: 19,
            sourceCurrentHp: 20,
            sourceMaxHp: 21,
            sourceCurrentMp: 22,
            sourceMaxMp: 23,
            // sourceCurrentTp: 24,
            // sourceMaxTp: 25,
            sourceX: 26,
            sourceY: 27,
            sourceZ: 28,
            sourceHeading: 29,
        },
        playerIds: {
            2: 3,
            17: 18,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'filter',
            filters: {
                id: '1.{7}',
                which: 'DoT',
                effectId: '0*?[1-9A-F][0-9A-F]*', // non-zero, non-empty, possibly-padded value
            },
            combatantIdFields: [2, 17],
        },
    },
    WasDefeated: {
        type: '25',
        name: 'WasDefeated',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'Death',
        fields: {
            type: 0,
            timestamp: 1,
            targetId: 2,
            target: 3,
            sourceId: 4,
            source: 5,
        },
        playerIds: {
            2: 3,
            4: 5,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'filter',
            filters: { targetId: '4.{7}' },
            combatantIdFields: 2, // don't apply to sourceId; an ignored combatant is a valid source
        },
    },
    GainsEffect: {
        type: '26',
        name: 'GainsEffect',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'StatusAdd',
        fields: {
            type: 0,
            timestamp: 1,
            effectId: 2,
            effect: 3,
            duration: 4,
            sourceId: 5,
            source: 6,
            targetId: 7,
            target: 8,
            count: 9,
            targetMaxHp: 10,
            sourceMaxHp: 11,
        },
        possibleRsvFields: 3,
        playerIds: {
            5: 6,
            7: 8,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'filter',
            filters: [
                {
                    sourceId: '[E4].{7}',
                    targetId: '1.{7}',
                },
                {
                    sourceId: '4.{7}',
                    targetId: '4.{7}',
                },
                {
                    effectId: ['B9A', '808'],
                },
            ],
            combatantIdFields: [5, 7],
        },
    },
    HeadMarker: {
        type: '27',
        name: 'HeadMarker',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'TargetIcon',
        fields: {
            type: 0,
            timestamp: 1,
            targetId: 2,
            target: 3,
            id: 6,
            data0: 7,
        },
        playerIds: {
            2: 3,
        },
        possiblePlayerIds: [7],
        canAnonymize: true,
        firstOptionalField: 7,
        analysisOptions: {
            include: 'all',
            combatantIdFields: 2,
        },
    },
    NetworkRaidMarker: {
        type: '28',
        name: 'NetworkRaidMarker',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'WaymarkMarker',
        fields: {
            type: 0,
            timestamp: 1,
            operation: 2,
            waymark: 3,
            id: 4,
            name: 5,
            x: 6,
            y: 7,
            z: 8,
        },
        playerIds: {
            4: 5,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
    },
    NetworkTargetMarker: {
        type: '29',
        name: 'NetworkTargetMarker',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'SignMarker',
        fields: {
            type: 0,
            timestamp: 1,
            operation: 2,
            waymark: 3,
            id: 4,
            name: 5,
            targetId: 6,
            targetName: 7,
        },
        playerIds: {
            4: 5,
            6: 7,
        },
        firstOptionalField: undefined,
    },
    LosesEffect: {
        type: '30',
        name: 'LosesEffect',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'StatusRemove',
        fields: {
            type: 0,
            timestamp: 1,
            effectId: 2,
            effect: 3,
            sourceId: 5,
            source: 6,
            targetId: 7,
            target: 8,
            count: 9,
        },
        possibleRsvFields: 3,
        playerIds: {
            5: 6,
            7: 8,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'filter',
            filters: [
                {
                    sourceId: '[E4].{7}',
                    targetId: '1.{7}',
                },
                {
                    sourceId: '4.{7}',
                    targetId: '4.{7}',
                },
                {
                    effectId: ['B9A', '808'],
                },
            ],
            combatantIdFields: [5, 7],
        },
    },
    NetworkGauge: {
        type: '31',
        name: 'NetworkGauge',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'Gauge',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            data0: 3,
            data1: 4,
            data2: 5,
            data3: 6,
        },
        playerIds: {
            2: null,
        },
        // Sometimes this last field looks like a player id.
        // For safety, anonymize all of the gauge data.
        firstUnknownField: 3,
        canAnonymize: true,
        firstOptionalField: undefined,
    },
    NetworkWorld: {
        type: '32',
        name: 'NetworkWorld',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'World',
        fields: {
            type: 0,
            timestamp: 1,
        },
        isUnknown: true,
        firstOptionalField: undefined,
    },
    ActorControl: {
        type: '33',
        name: 'ActorControl',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'Director',
        fields: {
            type: 0,
            timestamp: 1,
            instance: 2,
            command: 3,
            data0: 4,
            data1: 5,
            data2: 6,
            data3: 7,
        },
        possiblePlayerIds: [4, 5, 6, 7],
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'never',
        },
    },
    NameToggle: {
        type: '34',
        name: 'NameToggle',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'NameToggle',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            name: 3,
            targetId: 4,
            targetName: 5,
            toggle: 6,
        },
        playerIds: {
            2: 3,
            4: 5,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'never',
        },
    },
    Tether: {
        type: '35',
        name: 'Tether',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'Tether',
        fields: {
            type: 0,
            timestamp: 1,
            sourceId: 2,
            source: 3,
            targetId: 4,
            target: 5,
            id: 8,
        },
        playerIds: {
            2: 3,
            4: 5,
        },
        canAnonymize: true,
        firstUnknownField: 9,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'all',
            combatantIdFields: [2, 4],
        },
    },
    LimitBreak: {
        type: '36',
        name: 'LimitBreak',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'LimitBreak',
        fields: {
            type: 0,
            timestamp: 1,
            valueHex: 2,
            bars: 3,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
    },
    NetworkEffectResult: {
        type: '37',
        name: 'NetworkEffectResult',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'EffectResult',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            name: 3,
            sequenceId: 4,
            currentHp: 5,
            maxHp: 6,
            currentMp: 7,
            maxMp: 8,
            currentShield: 9,
            // Field index 10 is always `0`
            x: 11,
            y: 12,
            z: 13,
            heading: 14,
        },
        playerIds: {
            2: 3,
        },
        firstUnknownField: 22,
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'never',
        },
    },
    StatusEffect: {
        type: '38',
        name: 'StatusEffect',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'StatusList',
        fields: {
            type: 0,
            timestamp: 1,
            targetId: 2,
            target: 3,
            jobLevelData: 4,
            hp: 5,
            maxHp: 6,
            mp: 7,
            maxMp: 8,
            currentShield: 9,
            // Field index 10 is always `0`
            x: 11,
            y: 12,
            z: 13,
            heading: 14,
            data0: 15,
            data1: 16,
            data2: 17,
            data3: 18,
            data4: 19,
            data5: 20,
            // Variable number of triplets here, but at least one.
        },
        playerIds: {
            2: 3,
        },
        firstUnknownField: 18,
        canAnonymize: true,
        firstOptionalField: 18,
    },
    NetworkUpdateHP: {
        type: '39',
        name: 'NetworkUpdateHP',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'UpdateHp',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            name: 3,
            currentHp: 4,
            maxHp: 5,
            currentMp: 6,
            maxMp: 7,
            // currentTp: 8,
            // maxTp: 9,
            x: 10,
            y: 11,
            z: 12,
            heading: 13,
        },
        playerIds: {
            2: 3,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
    },
    Map: {
        type: '40',
        name: 'Map',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'ChangeMap',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            regionName: 3,
            placeName: 4,
            placeNameSub: 5,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        lastInclude: true,
        analysisOptions: {
            include: 'all',
        },
    },
    SystemLogMessage: {
        type: '41',
        name: 'SystemLogMessage',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'SystemLogMessage',
        fields: {
            type: 0,
            timestamp: 1,
            instance: 2,
            id: 3,
            param0: 4,
            param1: 5,
            param2: 6,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'all',
        },
    },
    StatusList3: {
        type: '42',
        name: 'StatusList3',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'StatusList3',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            name: 3,
            // triplets of fields from here (effectId, data, playerId)?
        },
        playerIds: {
            2: 3,
        },
        canAnonymize: true,
        firstOptionalField: 4,
        firstUnknownField: 4,
    },
    ParserInfo: {
        type: '249',
        name: 'ParserInfo',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'Settings',
        fields: {
            type: 0,
            timestamp: 1,
        },
        globalInclude: true,
        canAnonymize: true,
        firstOptionalField: undefined,
    },
    ProcessInfo: {
        type: '250',
        name: 'ProcessInfo',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'Process',
        fields: {
            type: 0,
            timestamp: 1,
        },
        globalInclude: true,
        canAnonymize: true,
        firstOptionalField: undefined,
    },
    Debug: {
        type: '251',
        name: 'Debug',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'Debug',
        fields: {
            type: 0,
            timestamp: 1,
        },
        globalInclude: true,
        canAnonymize: false,
        firstOptionalField: undefined,
    },
    PacketDump: {
        type: '252',
        name: 'PacketDump',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'PacketDump',
        fields: {
            type: 0,
            timestamp: 1,
        },
        canAnonymize: false,
        firstOptionalField: undefined,
    },
    Version: {
        type: '253',
        name: 'Version',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'Version',
        fields: {
            type: 0,
            timestamp: 1,
        },
        globalInclude: true,
        canAnonymize: true,
        firstOptionalField: undefined,
    },
    Error: {
        type: '254',
        name: 'Error',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'Error',
        fields: {
            type: 0,
            timestamp: 1,
        },
        canAnonymize: false,
        firstOptionalField: undefined,
    },
    None: {
        type: '[0-9]+',
        name: 'None',
        source: 'FFXIV_ACT_Plugin',
        messageType: 'None',
        fields: {
            type: 0,
            timestamp: 1,
        },
        isUnknown: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'never',
        },
    },
    // OverlayPlugin log lines
    LineRegistration: {
        type: '256',
        name: 'LineRegistration',
        source: 'OverlayPlugin',
        messageType: '256',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            source: 3,
            name: 4,
            version: 5,
        },
        globalInclude: true,
        canAnonymize: true,
        firstOptionalField: undefined,
    },
    MapEffect: {
        type: '257',
        name: 'MapEffect',
        source: 'OverlayPlugin',
        messageType: '257',
        fields: {
            type: 0,
            timestamp: 1,
            instance: 2,
            flags: 3,
            // values for the location field seem to vary between instances
            // (e.g. a location of '08' in P5S does not appear to be the same location in P5S as in P6S)
            // but this field does appear to consistently contain position info for the effect rendering
            location: 4,
            data0: 5,
            data1: 6,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'all',
        },
    },
    FateDirector: {
        type: '258',
        name: 'FateDirector',
        source: 'OverlayPlugin',
        messageType: '258',
        // fateId and progress are in hex.
        fields: {
            type: 0,
            timestamp: 1,
            category: 2,
            // padding0: 3,
            fateId: 4,
            progress: 5,
            // param3: 6,
            // param4: 7,
            // param5: 8,
            // param6: 9,
            // padding1: 10,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
    },
    CEDirector: {
        type: '259',
        name: 'CEDirector',
        source: 'OverlayPlugin',
        messageType: '259',
        // all fields are in hex
        fields: {
            type: 0,
            timestamp: 1,
            popTime: 2,
            timeRemaining: 3,
            // unknown0: 4,
            ceKey: 5,
            numPlayers: 6,
            status: 7,
            // unknown1: 8,
            progress: 9,
            // unknown2: 10,
            // unknown3: 11,
            // unknown4: 12,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
    },
    InCombat: {
        type: '260',
        name: 'InCombat',
        source: 'OverlayPlugin',
        messageType: '260',
        fields: {
            type: 0,
            timestamp: 1,
            inACTCombat: 2,
            inGameCombat: 3,
            isACTChanged: 4,
            isGameChanged: 5,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'all',
        },
    },
    CombatantMemory: {
        type: '261',
        name: 'CombatantMemory',
        source: 'OverlayPlugin',
        messageType: '261',
        fields: {
            type: 0,
            timestamp: 1,
            change: 2,
            id: 3,
            // from here, pairs of field name/values
        },
        canAnonymize: true,
        firstOptionalField: 5,
        // doesn't use `playerIds`, as the `id` field must be handled with the 'Name' repeating field
        repeatingFields: {
            startingIndex: 4,
            label: 'pair',
            names: ['key', 'value'],
            sortKeys: true,
            primaryKey: 'key',
            possibleKeys: combatantMemoryKeys,
            keysToAnonymize: {
                // eslint-disable-next-line quote-props
                3: 'Name',
                'OwnerID': null,
                'TargetID': null,
                'PCTargetID': null,
                'NPCTargetID': null,
                'CastTargetID': null,
            },
        },
        analysisOptions: {
            include: 'filter',
            // TODO: This is an initial attempt to capture field changes that are relevant to analysis,
            // but this will likely need to be refined over time
            filters: [
                {
                    id: '4.{7}',
                    change: 'Change',
                    pair: [{ key: 'ModelStatus', value: '.*' }],
                },
                {
                    id: '4.{7}',
                    change: 'Change',
                    pair: [{ key: 'WeaponId', value: '.*' }],
                },
                {
                    id: '4.{7}',
                    change: 'Change',
                    pair: [{ key: 'TransformationId', value: '.*' }],
                },
            ],
            combatantIdFields: 3,
        },
    },
    RSVData: {
        type: '262',
        name: 'RSVData',
        source: 'OverlayPlugin',
        messageType: '262',
        fields: {
            type: 0,
            timestamp: 1,
            locale: 2,
            // unknown0: 3,
            key: 4,
            value: 5,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            // RSV substitutions are performed automatically by the filter
            include: 'never',
        },
    },
    StartsUsingExtra: {
        type: '263',
        name: 'StartsUsingExtra',
        source: 'OverlayPlugin',
        messageType: '263',
        fields: {
            type: 0,
            timestamp: 1,
            sourceId: 2,
            id: 3,
            x: 4,
            y: 5,
            z: 6,
            heading: 7,
        },
        playerIds: {
            2: null,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'filter',
            filters: { sourceId: '4.{7}' },
            combatantIdFields: 2,
        },
    },
    AbilityExtra: {
        type: '264',
        name: 'AbilityExtra',
        source: 'OverlayPlugin',
        messageType: '264',
        fields: {
            type: 0,
            timestamp: 1,
            sourceId: 2,
            id: 3,
            globalEffectCounter: 4,
            dataFlag: 5,
            x: 6,
            y: 7,
            z: 8,
            heading: 9,
        },
        blankFields: [6],
        playerIds: {
            2: null,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
    },
    ContentFinderSettings: {
        type: '265',
        name: 'ContentFinderSettings',
        source: 'OverlayPlugin',
        messageType: '265',
        fields: {
            type: 0,
            timestamp: 1,
            zoneId: 2,
            zoneName: 3,
            inContentFinderContent: 4,
            unrestrictedParty: 5,
            minimalItemLevel: 6,
            silenceEcho: 7,
            explorerMode: 8,
            levelSync: 9,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
    },
    NpcYell: {
        type: '266',
        name: 'NpcYell',
        source: 'OverlayPlugin',
        messageType: '266',
        fields: {
            type: 0,
            timestamp: 1,
            npcId: 2,
            npcNameId: 3,
            npcYellId: 4,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'all',
            combatantIdFields: 2,
        },
    },
    BattleTalk2: {
        type: '267',
        name: 'BattleTalk2',
        source: 'OverlayPlugin',
        messageType: '267',
        fields: {
            type: 0,
            timestamp: 1,
            npcId: 2,
            instance: 3,
            npcNameId: 4,
            instanceContentTextId: 5,
            displayMs: 6,
            // unknown1: 7,
            // unknown2: 8,
            // unknown3: 9,
            // unknown4: 10,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'all',
            combatantIdFields: 2,
        },
    },
    Countdown: {
        type: '268',
        name: 'Countdown',
        source: 'OverlayPlugin',
        messageType: '268',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            worldId: 3,
            countdownTime: 4,
            result: 5,
            name: 6,
        },
        playerIds: {
            2: 6,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'never',
        },
    },
    CountdownCancel: {
        type: '269',
        name: 'CountdownCancel',
        source: 'OverlayPlugin',
        messageType: '269',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            worldId: 3,
            name: 4,
        },
        playerIds: {
            2: 4,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'never',
        },
    },
    ActorMove: {
        type: '270',
        name: 'ActorMove',
        source: 'OverlayPlugin',
        messageType: '270',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            heading: 3,
            // unknown1: 4,
            // unknown2: 5,
            x: 6,
            y: 7,
            z: 8,
        },
        playerIds: {
            2: null,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            // no real way to filter noise, even if (infrequently) used for triggers
            include: 'never',
        },
    },
    ActorSetPos: {
        type: '271',
        name: 'ActorSetPos',
        source: 'OverlayPlugin',
        messageType: '271',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            heading: 3,
            // unknown1: 4,
            // unknown2: 5,
            x: 6,
            y: 7,
            z: 8,
        },
        playerIds: {
            2: null,
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'filter',
            filters: { id: '4.{7}' },
            combatantIdFields: 2,
        },
    },
    SpawnNpcExtra: {
        type: '272',
        name: 'SpawnNpcExtra',
        source: 'OverlayPlugin',
        messageType: '272',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            parentId: 3,
            tetherId: 4,
            animationState: 5,
        },
        playerIds: {
            3: null, // `id` is an npc, but parentId could be a tethered player?
        },
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'all',
            combatantIdFields: [2, 3],
        },
    },
    ActorControlExtra: {
        type: '273',
        name: 'ActorControlExtra',
        source: 'OverlayPlugin',
        messageType: '273',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            category: 3,
            param1: 4,
            param2: 5,
            param3: 6,
            param4: 7,
        },
        playerIds: {
            2: null,
        },
        possiblePlayerIds: [4, 5, 6, 7],
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'all',
            combatantIdFields: 2,
        },
    },
    ActorControlSelfExtra: {
        type: '274',
        name: 'ActorControlSelfExtra',
        source: 'OverlayPlugin',
        messageType: '274',
        fields: {
            type: 0,
            timestamp: 1,
            id: 2,
            category: 3,
            param1: 4,
            param2: 5,
            param3: 6,
            param4: 7,
            param5: 8,
            param6: 9,
        },
        playerIds: {
            2: null,
        },
        possiblePlayerIds: [4, 5, 6, 7, 8, 9],
        canAnonymize: true,
        firstOptionalField: undefined,
        analysisOptions: {
            include: 'all',
            combatantIdFields: 2,
        },
    },
};
const logDefinitionsVersions = {
    'latest': latestLogDefinitions,
};
// Verify that this has the right type, but export `as const`.
const assertLogDefinitions = latestLogDefinitions;
console.assert(assertLogDefinitions);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (logDefinitionsVersions['latest']);
//# sourceMappingURL=netlog_defs.js.map

/***/ }),

/***/ 702:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Ay: () => (/* binding */ NetRegexes),
/* harmony export */   RJ: () => (/* binding */ gameLogCodes),
/* harmony export */   bU: () => (/* binding */ actorControlType)
/* harmony export */ });
/* unused harmony exports keysThatRequireTranslation, buildRegex, commonNetRegex, buildNetRegexForTrigger */
/* harmony import */ var _netlog_defs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(130);
/* harmony import */ var _not_reached__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(174);
/* harmony import */ var _regexes__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(605);



const separator = '\\|';
const matchDefault = '[^|]*';
// If NetRegexes.setFlagTranslationsNeeded is set to true, then any
// regex created that requires a translation will begin with this string
// and match the magicStringRegex.  This is maybe a bit goofy, but is
// a pretty straightforward way to mark regexes for translations.
// If issue #1306 is ever resolved, we can remove this.
const magicTranslationString = `^^`;
const magicStringRegex = /^\^\^/;
// can't simply export this, see https://github.com/OverlayPlugin/cactbot/pull/4957#discussion_r1002590589
const keysThatRequireTranslationAsConst = [
    'ability',
    'name',
    'source',
    'target',
    'line',
];
const keysThatRequireTranslation = keysThatRequireTranslationAsConst;
const gameLogCodes = {
    echo: '0038',
    dialog: '0044',
    message: '0839',
};
// See docs/LogGuide.md for more info about these categories
const actorControlType = {
    setAnimState: '003E',
    publicContentText: '0834',
    logMsg: '020F',
    logMsgParams: '0210',
};
const defaultParams = (type, version, include) => {
    const logType = _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .s[version][type];
    if (include === undefined) {
        include = Object.keys(logType.fields);
        if ('repeatingFields' in logType) {
            include.push(logType.repeatingFields.label);
        }
    }
    const params = {};
    const firstOptionalField = logType.firstOptionalField;
    for (const [prop, index] of Object.entries(logType.fields)) {
        if (!include.includes(prop))
            continue;
        const param = {
            field: prop,
            optional: firstOptionalField !== undefined && index >= firstOptionalField,
        };
        if (prop === 'type')
            param.value = logType.type;
        params[index] = param;
    }
    if ('repeatingFields' in logType && include.includes(logType.repeatingFields.label)) {
        params[logType.repeatingFields.startingIndex] = {
            field: logType.repeatingFields.label,
            optional: firstOptionalField !== undefined &&
                logType.repeatingFields.startingIndex >= firstOptionalField,
            repeating: true,
            repeatingKeys: [...logType.repeatingFields.names],
            sortKeys: logType.repeatingFields.sortKeys,
            primaryKey: logType.repeatingFields.primaryKey,
            possibleKeys: [...logType.repeatingFields.possibleKeys],
        };
    }
    return params;
};
const isRepeatingField = (repeating, value) => {
    if (repeating !== true)
        return false;
    // Allow excluding the field to match for extraction
    if (value === undefined)
        return true;
    if (!Array.isArray(value))
        return false;
    for (const e of value) {
        if (typeof e !== 'object')
            return false;
    }
    return true;
};
const parseHelper = (params, funcName, fields) => {
    params = params ?? {};
    const validFields = [];
    for (const index in fields) {
        const field = fields[index];
        if (field)
            validFields.push(field.field);
    }
    _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A.validateParams(params, funcName, ['capture', ...validFields]);
    // Find the last key we care about, so we can shorten the regex if needed.
    const capture = _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A.trueIfUndefined(params.capture);
    const fieldKeys = Object.keys(fields).sort((a, b) => parseInt(a) - parseInt(b));
    let maxKeyStr;
    if (capture) {
        const keys = [];
        for (const key in fields)
            keys.push(key);
        let tmpKey = keys.pop();
        if (tmpKey === undefined) {
            maxKeyStr = fieldKeys[fieldKeys.length - 1] ?? '0';
        }
        else {
            while (fields[tmpKey]?.optional &&
                !((fields[tmpKey]?.field ?? '') in params))
                tmpKey = keys.pop();
            maxKeyStr = tmpKey ?? '0';
        }
    }
    else {
        maxKeyStr = '0';
        for (const key in fields) {
            const value = fields[key] ?? {};
            if (typeof value !== 'object')
                continue;
            const fieldName = fields[key]?.field;
            if (fieldName !== undefined && fieldName in params)
                maxKeyStr = key;
        }
    }
    const maxKey = parseInt(maxKeyStr);
    // For testing, it's useful to know if this is a regex that requires
    // translation.  We test this by seeing if there are any specified
    // fields, and if so, inserting a magic string that we can detect.
    // This lets us differentiate between "regex that should be translated"
    // e.g. a regex with `target` specified, and "regex that shouldn't"
    // e.g. a gains effect with just effectId specified.
    const transParams = Object.keys(params).filter((k) => keysThatRequireTranslation.includes(k));
    const needsTranslations = NetRegexes.flagTranslationsNeeded && transParams.length > 0;
    // Build the regex from the fields.
    let str = needsTranslations ? magicTranslationString : '^';
    let lastKey = -1;
    for (const keyStr in fields) {
        const key = parseInt(keyStr);
        // Fill in blanks.
        const missingFields = key - lastKey - 1;
        if (missingFields === 1)
            str += '\\y{NetField}';
        else if (missingFields > 1)
            str += `\\y{NetField}{${missingFields}}`;
        lastKey = key;
        const value = fields[keyStr];
        if (typeof value !== 'object')
            throw new Error(`${funcName}: invalid value: ${JSON.stringify(value)}`);
        const fieldName = value.field;
        const defaultFieldValue = value.value?.toString() ?? matchDefault;
        const fieldValue = params[fieldName];
        if (isRepeatingField(fields[keyStr]?.repeating, fieldValue)) {
            let repeatingArray = fieldValue;
            const sortKeys = fields[keyStr]?.sortKeys;
            const primaryKey = fields[keyStr]?.primaryKey;
            const possibleKeys = fields[keyStr]?.possibleKeys;
            // primaryKey is required if this is a repeating field per typedef in netlog_defs.ts
            // Same with possibleKeys
            if (primaryKey === undefined || possibleKeys === undefined)
                throw new _not_reached__WEBPACK_IMPORTED_MODULE_1__/* .UnreachableCode */ .O();
            // Allow sorting if needed
            if (sortKeys) {
                // Also sort our valid keys list
                possibleKeys.sort((left, right) => left.toLowerCase().localeCompare(right.toLowerCase()));
                if (repeatingArray !== undefined) {
                    repeatingArray = [...repeatingArray].sort((left, right) => {
                        // We check the validity of left/right because they're user-supplied
                        if (typeof left !== 'object' || left[primaryKey] === undefined) {
                            console.warn('Invalid argument passed to trigger:', left);
                            return 0;
                        }
                        const leftValue = left[primaryKey];
                        if (typeof leftValue !== 'string' || !possibleKeys?.includes(leftValue)) {
                            console.warn('Invalid argument passed to trigger:', left);
                            return 0;
                        }
                        if (typeof right !== 'object' || right[primaryKey] === undefined) {
                            console.warn('Invalid argument passed to trigger:', right);
                            return 0;
                        }
                        const rightValue = right[primaryKey];
                        if (typeof rightValue !== 'string' || !possibleKeys?.includes(rightValue)) {
                            console.warn('Invalid argument passed to trigger:', right);
                            return 0;
                        }
                        return leftValue.toLowerCase().localeCompare(rightValue.toLowerCase());
                    });
                }
            }
            const anonReps = repeatingArray;
            // Loop over our possible keys
            // Build a regex that can match any possible key with required values substituted in
            possibleKeys.forEach((possibleKey) => {
                const rep = anonReps?.find((rep) => primaryKey in rep && rep[primaryKey] === possibleKey);
                let fieldRegex = '';
                // Rather than looping over the keys defined on the object,
                // loop over the base type def's keys. This enforces the correct order.
                fields[keyStr]?.repeatingKeys?.forEach((key) => {
                    let val = rep?.[key];
                    if (rep === undefined || !(key in rep)) {
                        // If we don't have a value for this key
                        // insert a placeholder, unless it's the primary key
                        if (key === primaryKey)
                            val = possibleKey;
                        else
                            val = matchDefault;
                    }
                    if (typeof val !== 'string') {
                        if (!Array.isArray(val))
                            val = matchDefault;
                        else if (val.length < 1)
                            val = matchDefault;
                        else if (val.some((v) => typeof v !== 'string'))
                            val = matchDefault;
                    }
                    fieldRegex += _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A.maybeCapture(key === primaryKey ? false : capture, 
                    // All capturing groups are `fieldName` + `possibleKey`, e.g. `pairIsCasting1`
                    fieldName + possibleKey, val, defaultFieldValue) +
                        separator;
                });
                if (fieldRegex.length > 0) {
                    str += `(?:${fieldRegex})${rep !== undefined ? '' : '?'}`;
                }
            });
        }
        else if (fields[keyStr]?.repeating) {
            // If this is a repeating field but the actual value is empty or otherwise invalid,
            // don't process further. We can't use `continue` in the above block because that
            // would skip the early-out break at the end of the loop.
        }
        else {
            if (fieldName !== undefined) {
                str += _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A.maybeCapture(
                // more accurate type instead of `as` cast
                // maybe this function needs a refactoring
                capture, fieldName, fieldValue, defaultFieldValue) +
                    separator;
            }
            else {
                str += defaultFieldValue + separator;
            }
        }
        // Stop if we're not capturing and don't care about future fields.
        if (key >= maxKey)
            break;
    }
    return _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A.parse(str);
};
const buildRegex = (type, params) => {
    return parseHelper(params, type, defaultParams(type, NetRegexes.logVersion));
};
class NetRegexes {
    static logVersion = 'latest';
    static flagTranslationsNeeded = false;
    static setFlagTranslationsNeeded(value) {
        NetRegexes.flagTranslationsNeeded = value;
    }
    static doesNetRegexNeedTranslation(regex) {
        // Need to `setFlagTranslationsNeeded` before calling this function.
        console.assert(NetRegexes.flagTranslationsNeeded);
        const str = typeof regex === 'string' ? regex : regex.source;
        return !!magicStringRegex.exec(str);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-20-0x14-networkstartscasting
     */
    static startsUsing(params) {
        return buildRegex('StartsUsing', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
     */
    static ability(params) {
        return parseHelper(params, 'Ability', {
            ...defaultParams('Ability', NetRegexes.logVersion),
            // Override type
            0: { field: 'type', value: '2[12]', optional: false },
        });
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
     *
     * @deprecated Use `ability` instead
     */
    static abilityFull(params) {
        return this.ability(params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-27-0x1b-networktargeticon-head-marker
     */
    static headMarker(params) {
        return buildRegex('HeadMarker', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
     */
    static addedCombatant(params) {
        return parseHelper(params, 'AddedCombatant', defaultParams('AddedCombatant', NetRegexes.logVersion));
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
     * @deprecated Use `addedCombatant` instead
     */
    static addedCombatantFull(params) {
        return NetRegexes.addedCombatant(params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-04-0x04-removecombatant
     */
    static removingCombatant(params) {
        return buildRegex('RemovedCombatant', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-26-0x1a-networkbuff
     */
    static gainsEffect(params) {
        return buildRegex('GainsEffect', params);
    }
    /**
     * Prefer gainsEffect over this function unless you really need extra data.
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-38-0x26-networkstatuseffects
     */
    static statusEffectExplicit(params) {
        return buildRegex('StatusEffect', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-30-0x1e-networkbuffremove
     */
    static losesEffect(params) {
        return buildRegex('LosesEffect', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-35-0x23-networktether
     */
    static tether(params) {
        return buildRegex('Tether', params);
    }
    /**
     * 'target' was defeated by 'source'
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-25-0x19-networkdeath
     */
    static wasDefeated(params) {
        return buildRegex('WasDefeated', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-24-0x18-networkdot
     */
    static networkDoT(params) {
        return buildRegex('NetworkDoT', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
     */
    static echo(params) {
        if (typeof params === 'undefined')
            params = {};
        _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A.validateParams(params, 'Echo', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
        return NetRegexes.gameLog({ ...params, code: gameLogCodes.echo });
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
     */
    static dialog(params) {
        if (typeof params === 'undefined')
            params = {};
        _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A.validateParams(params, 'Dialog', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
        return NetRegexes.gameLog({ ...params, code: gameLogCodes.dialog });
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
     */
    static message(params) {
        if (typeof params === 'undefined')
            params = {};
        _regexes__WEBPACK_IMPORTED_MODULE_2__/* ["default"] */ .A.validateParams(params, 'Message', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
        return NetRegexes.gameLog({ ...params, code: gameLogCodes.message });
    }
    /**
     * fields: code, name, line, capture
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
     */
    static gameLog(params) {
        return buildRegex('GameLog', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
     */
    static gameNameLog(params) {
        // Backwards compatability.
        return NetRegexes.gameLog(params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-12-0x0c-playerstats
     */
    static statChange(params) {
        return buildRegex('PlayerStats', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-01-0x01-changezone
     */
    static changeZone(params) {
        return buildRegex('ChangeZone', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-33-0x21-network6d-actor-control
     */
    static network6d(params) {
        return buildRegex('ActorControl', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-34-0x22-networknametoggle
     */
    static nameToggle(params) {
        return buildRegex('NameToggle', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-40-0x28-map
     */
    static map(params) {
        return buildRegex('Map', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-41-0x29-systemlogmessage
     */
    static systemLogMessage(params) {
        return buildRegex('SystemLogMessage', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-257-0x101-mapeffect
     */
    static mapEffect(params) {
        return buildRegex('MapEffect', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-258-0x102-fatedirector
     */
    static fateDirector(params) {
        return buildRegex('FateDirector', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-259-0x103-cedirector
     */
    static ceDirector(params) {
        return buildRegex('CEDirector', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-260-0x104-incombat
     */
    static inCombat(params) {
        return buildRegex('InCombat', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-261-0x105-combatantmemory
     */
    static combatantMemory(params) {
        return buildRegex('CombatantMemory', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-263-0x107-startsusingextra
     */
    static startsUsingExtra(params) {
        return buildRegex('StartsUsingExtra', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-264-0x108-abilityextra
     */
    static abilityExtra(params) {
        return buildRegex('AbilityExtra', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-265-0x109-contentfindersettings
     */
    static contentFinderSettings(params) {
        return buildRegex('ContentFinderSettings', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-266-0x10a-npcyell
     */
    static npcYell(params) {
        return buildRegex('NpcYell', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-267-0x10b-battletalk2
     */
    static battleTalk2(params) {
        return buildRegex('BattleTalk2', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-268-0x10c-countdown
     */
    static countdown(params) {
        return buildRegex('Countdown', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-269-0x10d-countdowncancel
     */
    static countdownCancel(params) {
        return buildRegex('CountdownCancel', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-270-0x10e-actormove
     */
    static actorMove(params) {
        return buildRegex('ActorMove', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-271-0x10f-actorsetpos
     */
    static actorSetPos(params) {
        return buildRegex('ActorSetPos', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-272-0x110-spawnnpcextra
     */
    static spawnNpcExtra(params) {
        return buildRegex('SpawnNpcExtra', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-273-0x111-actorcontrolextra
     */
    static actorControlExtra(params) {
        return buildRegex('ActorControlExtra', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-274-0x112-actorcontrolselfextra
     */
    static actorControlSelfExtra(params) {
        return buildRegex('ActorControlSelfExtra', params);
    }
}
const commonNetRegex = {
    // TODO(6.2): remove 40000010 after everybody is on 6.2.
    // TODO: or maybe keep around for playing old log files??
    wipe: NetRegexes.network6d({ command: ['40000010', '4000000F'] }),
    cactbotWipeEcho: NetRegexes.echo({ line: 'cactbot wipe.*?' }),
    userWipeEcho: NetRegexes.echo({ line: 'end' }),
};
const buildNetRegexForTrigger = (type, params) => {
    if (type === 'Ability')
        // ts can't narrow T to `Ability` here, need casting.
        return NetRegexes.ability(params);
    return buildRegex(type, params);
};
//# sourceMappingURL=netregexes.js.map

/***/ }),

/***/ 174:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   O: () => (/* binding */ UnreachableCode)
/* harmony export */ });
// Helper Error for TypeScript situations where the programmer thinks they
// know better than TypeScript that some situation will never occur.
// The intention here is that the programmer does not expect a particular
// bit of code to happen, and so has not written careful error handling.
// If it does occur, at least there will be an error and we can figure out why.
// This is preferable to casting or disabling TypeScript altogether in order to
// avoid syntax errors.
// One common example is a regex, where if the regex matches then all of the
// (non-optional) regex groups will also be valid, but TypeScript doesn't know.
class UnreachableCode extends Error {
    constructor() {
        super('This code shouldn\'t be reached');
    }
}
//# sourceMappingURL=not_reached.js.map

/***/ }),

/***/ 468:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Output strings for now require a field for every language, so this is a
// helper function to generate one for literal numbers.
const numberToOutputString = function (n) {
    const str = n.toString();
    return {
        en: str,
        de: str,
        fr: str,
        ja: str,
        cn: str,
        ko: str,
    };
};
// General guidelines:
// * property names should closely match English text
// * use OnPlayer suffix for things with `${player}`
// * use OnTarget suffix for things with `${name}`
// * any other parameters (of which there are none, currently) should use consistent suffixes.
// * the value of each property should be a single object with localized keys
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    aoe: {
        en: 'aoe',
        de: 'AoE',
        fr: 'AoE',
        ja: '全体攻撃',
        cn: 'AoE',
        ko: '전체 공격',
    },
    bigAoe: {
        en: 'big aoe!',
        de: 'Große AoE!',
        fr: 'Grosse AoE !',
        ja: '強力な全体攻撃',
        cn: '大AoE伤害！',
        ko: '강한 전체 공격!',
    },
    bleedAoe: {
        en: 'AoE + Bleed',
        de: 'AoE + Blutung',
        fr: 'AoE + Saignement',
        ja: '全体攻撃 + DoT',
        cn: 'AOE + 流血',
        ko: '전체 공격 + 도트',
    },
    tankBuster: {
        en: 'Tank Buster',
        de: 'Tank buster',
        fr: 'Tank buster',
        ja: 'タンク強攻撃',
        cn: '坦克死刑',
        ko: '탱버',
    },
    miniBuster: {
        en: 'Mini Buster',
        de: 'Kleiner Tankbuster',
        fr: 'Mini Buster',
        ja: 'タンク攻撃',
        cn: '小死刑',
        ko: '약한 탱버',
    },
    tankBusterOnPlayer: {
        en: 'Tank Buster on ${player}',
        de: 'Tank buster auf ${player}',
        fr: 'Tank buster sur ${player}',
        ja: '${player}に強攻撃',
        cn: '死刑 点 ${player}',
        ko: '"${player}" 탱버',
    },
    tankBusterOnYou: {
        en: 'Tank Buster on YOU',
        de: 'Tank buster auf DIR',
        fr: 'Tank buster sur VOUS',
        ja: '自分に強攻撃',
        cn: '死刑点名',
        ko: '탱버 대상자',
    },
    // when there are multiple tankbusters going out
    tankBusters: {
        en: 'Tank Busters',
        de: 'Tank busters',
        fr: 'Tank busters',
        ja: 'タンク強攻撃',
        cn: '坦克死刑',
        ko: '탱버',
    },
    tetherBusters: {
        en: 'Tank Tethers',
        de: 'Tank-Verbindungen',
        fr: 'Liens Tank',
        ja: 'タンク線取り',
        cn: '坦克截线',
        ko: '탱커가 선 가로채기',
    },
    avoidTetherBusters: {
        en: 'Avoid Tank Tethers',
        de: 'Vermeide Tank Verbindungen',
        fr: 'Évitez les liens des Tanks',
        ja: 'タンクの線を避けて',
        cn: '远离坦克连线',
        ko: '탱커 선 피하기',
    },
    tankCleave: {
        en: 'Tank cleave',
        de: 'Tank Cleave',
        fr: 'Tank cleave',
        ja: 'タンク範囲攻撃',
        cn: '范围死刑',
        ko: '광역 탱버',
    },
    tankBusterCleaves: {
        en: 'Tank Buster Cleaves',
        de: 'Tankbuster Cleaves',
        fr: 'Tankbuster cleaves',
        ja: 'MT・ST同時範囲攻撃',
        cn: '坦克范围死刑',
        ko: '동시 광역 탱버',
    },
    tankBusterCleavesOnYou: {
        en: 'Tank Cleaves on YOU',
        de: 'Tank Cleaves auf DIR',
        fr: 'Tank cleaves sur VOUS',
        ja: 'MT・ST同時範囲攻撃(自分対象)',
        cn: '坦克范围死刑点名',
        ko: '광역 탱버 대상자',
    },
    avoidTankCleave: {
        en: 'Avoid tank cleave',
        de: 'Tank Cleave ausweichen',
        fr: 'Évitez le tank cleave',
        ja: 'タンク範囲攻撃を避ける',
        cn: '远离范围死刑',
        ko: '광역 탱버 피하기',
    },
    avoidTankCleaves: {
        en: 'Avoid Tank Cleaves',
        de: 'Tankbuster Cleaves ausweichen',
        fr: 'Évitez les cleaves (tankbusters)',
        ja: '範囲攻撃を避けて',
        cn: '远离坦克范围死刑',
        ko: '광역 탱버 피하기',
    },
    tankCleaveOnYou: {
        en: 'Tank cleave on YOU',
        de: 'Tank Cleave aud DIR',
        fr: 'Tank cleave sur VOUS',
        ja: '自分に範囲攻撃',
        cn: '范围死刑点名',
        ko: '나에게 광역 탱버',
    },
    sharedTankbuster: {
        en: 'Shared Tank Buster',
        de: 'Geteilter Tankbuster',
        fr: 'Partagez le Tank buster',
        ja: 'タンク頭割り',
        cn: '分摊死刑',
        ko: '쉐어 탱버',
    },
    sharedTankbusterOnYou: {
        en: 'Shared Tank Buster on YOU',
        de: 'geteilter Tankbuster auf DIR',
        fr: 'Tank buster à partager sur VOUS',
        ja: '自分にタンク頭割り',
        cn: '分摊死刑点名',
        ko: '쉐어 탱버 대상자',
    },
    sharedTankbusterOnPlayer: {
        en: 'Shared Tank Buster on ${player}',
        de: 'geteilter Tankbuster on ${player}',
        fr: 'Tank buster à partager sur ${player}',
        ja: '${player} にタンク頭割り',
        cn: '分摊死刑点 ${player}',
        ko: '"${player}" 쉐어 탱버',
    },
    tankSwap: {
        en: 'Tank Swap!',
        de: 'Tankwechsel!',
        fr: 'Tank swap !',
        ja: 'タンクスイッチ!',
        cn: '换T！',
        ko: '탱 교대',
    },
    spread: {
        en: 'Spread',
        de: 'Verteilen',
        fr: 'Dispersez-vous',
        ja: '散開',
        cn: '分散',
        ko: '산개',
    },
    defamationOnYou: {
        en: 'Defamation on YOU',
        de: 'Ehrenstrafe aud DIR',
        fr: 'Diffamation sur VOUS',
        ja: '自分に巨大な爆発',
        cn: '大圈点名',
        ko: '광역징 대상자',
    },
    protean: {
        en: 'Protean',
        de: 'Himmelsrichtungen',
        fr: 'Positions',
        ja: '基本散会',
        cn: '八方分散',
        ko: '8방향 산개',
    },
    stackMarker: {
        // for stack marker situations
        en: 'Stack',
        de: 'Sammeln',
        fr: 'Packez-vous',
        ja: '頭割り',
        cn: '分摊',
        ko: '쉐어뎀',
    },
    getTogether: {
        // for getting together without stack marker
        en: 'Stack',
        de: 'Sammeln',
        fr: 'Packez-vous',
        ja: '集合',
        cn: '集合',
        ko: '모이기',
    },
    healerGroups: {
        en: 'Healer Groups',
        de: 'Heiler-Gruppen',
        fr: 'Groupes sur les heals',
        ja: 'ヒラに頭割り',
        cn: '双奶分组分摊',
        ko: '힐러 그룹 쉐어',
    },
    stackOnYou: {
        en: 'Stack on YOU',
        de: 'Auf DIR sammeln',
        fr: 'Package sur VOUS',
        ja: '自分に頭割り',
        cn: '分摊点名',
        ko: '쉐어징 대상자',
    },
    stackOnPlayer: {
        en: 'Stack on ${player}',
        de: 'Auf ${player} sammeln',
        fr: 'Packez-vous sur ${player}',
        ja: '${player}に頭割り',
        cn: '靠近 ${player}分摊',
        ko: '"${player}" 쉐어징',
    },
    stackPartner: {
        en: 'Stack With Partner',
        de: 'Mit Partner stacken',
        fr: 'Packez-vous avec votre partenaire',
        ja: 'ペア',
        cn: '与搭档分摊',
        ko: '파트너와 쉐어',
    },
    stackMiddle: {
        en: 'Stack in middle',
        de: 'In der Mitte sammeln',
        fr: 'Packez-vous au milieu',
        ja: '中央で頭割り',
        cn: '中间集合',
        ko: '중앙에서 쉐어',
    },
    baitPuddles: {
        en: 'Bait puddles',
        de: 'Flächen Ködern',
        fr: 'Attirez les flaques',
        ja: 'AOE誘導',
        cn: '诱导放圈',
        ko: '장판 유도',
    },
    // For general more-than-one-stack-at-a-time situations
    stacks: {
        en: 'Stacks',
        de: 'Sammeln',
        fr: 'Package',
        ja: '頭割り',
        cn: '分摊',
        ko: '쉐어',
    },
    doritoStack: {
        en: 'Dorito Stack',
        de: 'Mit Marker sammeln',
        fr: 'Packez les marques',
        ja: 'マーカー同士で頭割り',
        cn: '点名集合',
        ko: '징끼리 모이기',
    },
    spreadThenStack: {
        en: 'Spread => Stack',
        de: 'Verteilen => Sammeln',
        fr: 'Dispersion => Package',
        ja: '散開 => 頭割り',
        cn: '分散 => 集合',
        ko: '산개 => 집합',
    },
    stackThenSpread: {
        en: 'Stack => Spread',
        de: 'Sammeln => Verteilen',
        fr: 'Package => Dispersion',
        ja: '頭割り => 散開',
        cn: '集合 => 分散',
        ko: '집합 => 산개',
    },
    drawIn: {
        // Opposite of a knockback.
        en: 'Draw In',
        de: 'Einzug',
        fr: 'Attraction',
        ja: '吸込み',
        cn: '吸引',
        ko: '끌어당김',
    },
    knockback: {
        en: 'Knockback',
        de: 'Rückstoß',
        fr: 'Poussée',
        ja: 'ノックバック',
        cn: '击退',
        ko: '넉백',
    },
    knockbackOnYou: {
        en: 'Knockback on YOU',
        de: 'Rückstoß auf DIR',
        fr: 'Poussée sur VOUS',
        ja: '自分にノックバック',
        cn: '击退点名',
        ko: '넉백징 대상자',
    },
    knockbackOnPlayer: {
        en: 'Knockback on ${player}',
        de: 'Rückstoß auf ${player}',
        fr: 'Poussée sur ${player}',
        ja: '${player}にノックバック',
        cn: '击退点名${player}',
        ko: '"${player}" 넉백징',
    },
    lookTowardsBoss: {
        en: 'Look Towards Boss',
        de: 'Anschauen Boss',
        fr: 'Regardez le boss',
        ja: 'ボスを見る',
        cn: '面向Boss',
        ko: '쳐다보기',
    },
    lookAway: {
        en: 'Look Away',
        de: 'Wegschauen',
        fr: 'Regardez ailleurs',
        ja: 'ボスを見ない',
        cn: '背对Boss',
        ko: '뒤돌기',
    },
    lookAwayFromPlayer: {
        en: 'Look Away from ${player}',
        de: 'Schau weg von ${player}',
        fr: 'Ne regardez pas ${player}',
        ja: '${player}を見ない',
        cn: '背对${player}',
        ko: '${player}에게서 뒤돌기',
    },
    lookAwayFromTarget: {
        en: 'Look Away from ${name}',
        de: 'Schau weg von ${name}',
        fr: 'Ne regardez pas ${name}',
        ja: '${name}を見ない',
        cn: '背对${name}',
        ko: '${name}에게서 뒤돌기',
    },
    getBehind: {
        en: 'Get Behind',
        de: 'Hinter ihn',
        fr: 'Passez derrière',
        ja: '背面へ',
        cn: '去背后',
        ko: '보스 뒤로',
    },
    goFrontOrSides: {
        en: 'Go Front / Sides',
        de: 'Gehe nach Vorne/ zu den Seiten',
        fr: 'Allez Devant / Côtés',
        ja: '前／横へ',
        cn: '去前侧方',
        ko: '보스 후방 피하기',
    },
    goFront: {
        en: 'Go Front',
        de: 'Geh nach vorn',
        fr: 'Allez Devant',
        ja: '前へ',
        cn: '去前面',
        ko: '앞으로',
    },
    // getUnder is used when you have to get into the bosses hitbox
    getUnder: {
        en: 'Get Under',
        de: 'Unter ihn',
        fr: 'En dessous',
        ja: 'ボスに貼り付く',
        cn: '去脚下',
        ko: '보스 아래로',
    },
    // in is more like "get close but maybe even melee range is fine"
    in: {
        en: 'In',
        de: 'Rein',
        fr: 'Intérieur',
        ja: '中へ',
        cn: '靠近',
        ko: '안으로',
    },
    // out means get far away
    out: {
        en: 'Out',
        de: 'Raus',
        fr: 'Extérieur',
        ja: '外へ',
        cn: '远离',
        ko: '밖으로',
    },
    outOfMelee: {
        en: 'Out of melee',
        de: 'Raus aus Nahkampf',
        fr: 'Sortez de la mêlée',
        ja: '近接の範囲から離れる',
        cn: '离开近战距离',
        ko: '근접범위 밖으로',
    },
    // be just outside the boss's target circle
    outOfHitbox: {
        en: 'Out of hitbox',
        de: 'Raus aus der Hitbox',
        fr: 'Extérieur de la hitbox',
        cn: '离开目标圈',
        ko: '히트박스 밖으로',
    },
    inThenOut: {
        en: 'In => out',
        de: 'Rein, dann raus',
        fr: 'Intérieur, puis extérieur',
        ja: '中 => 外',
        cn: '先靠近，再远离',
        ko: '안으로 => 밖으로',
    },
    outThenIn: {
        en: 'Out => in',
        de: 'Raus, dann rein',
        fr: 'Extérieur, puis intérieur',
        ja: '外 => 中',
        cn: '先远离，再靠近',
        ko: '밖으로 => 안으로',
    },
    backThenFront: {
        en: 'Back => Front',
        de: 'Nach Hinten, danach nach Vorne',
        fr: 'Derrière puis devant',
        ja: '後ろ => 前',
        cn: '后 => 前',
        ko: '뒤로 => 앞으로',
    },
    frontThenBack: {
        en: 'Front => Back',
        de: 'Nach Vorne, danach nach Hinten',
        fr: 'Devant puis derrière',
        ja: '前 => 後ろ',
        cn: '前 => 后',
        ko: '앞으로 => 뒤로',
    },
    goIntoMiddle: {
        en: 'Get Middle',
        de: 'in die Mitte gehen',
        fr: 'Allez au milieu',
        ja: '中へ',
        cn: '去中间',
        ko: '중앙으로',
    },
    front: {
        en: 'Front',
        de: 'Vorne',
        fr: 'Devant',
        ja: '前',
        cn: '前',
        ko: '앞',
    },
    back: {
        en: 'Back',
        de: 'Hinten',
        fr: 'Derrière',
        ja: '後ろ',
        cn: '后',
        ko: '뒤',
    },
    right: {
        en: 'Right',
        de: 'Rechts',
        fr: 'À droite',
        ja: '右へ',
        cn: '右',
        ko: '오른쪽',
    },
    left: {
        en: 'Left',
        de: 'Links',
        fr: 'À gauche',
        ja: '左へ',
        cn: '左',
        ko: '왼쪽',
    },
    getLeftAndWest: {
        en: '<= Get Left/West',
        de: '<= Nach Links/Westen',
        fr: '<= Allez à Gauche/Ouest',
        ja: '<= 左/西へ',
        cn: '<= 去左半场',
        ko: '<= 왼쪽/서쪽',
    },
    getRightAndEast: {
        en: 'Get Right/East =>',
        de: 'Nach Rechts/Osten =>',
        fr: 'Allez à Droite/Est =>',
        ja: '右/東へ =>',
        cn: '去右半场 =>',
        ko: '오른쪽/동쪽 =>',
    },
    leftThenRight: {
        en: 'Left => Right',
        de: 'Links => Rechts',
        fr: 'À gauche => À droite',
        ja: '左 => 右',
        cn: '左 => 右',
        ko: '왼쪽 => 오른쪽',
    },
    rightThenLeft: {
        en: 'Right => Left',
        de: 'Rechts => Links',
        fr: 'À droite => À gauche',
        ja: '右 => 左',
        cn: '右 => 左',
        ko: '오른쪽 => 왼쪽',
    },
    goFrontBack: {
        en: 'Go Front/Back',
        de: 'Geh nach Vorne/Hinten',
        fr: 'Allez Devant/Derrière',
        ja: '縦へ',
        cn: '去前后',
        ko: '앞/뒤로',
    },
    sides: {
        en: 'Sides',
        de: 'Seiten',
        fr: 'Côtés',
        ja: '横へ',
        cn: '去两侧',
        ko: '양옆으로',
    },
    middle: {
        en: 'Middle',
        de: 'Mitte',
        fr: 'Milieu',
        ja: '中へ',
        cn: '中间',
        ko: '중앙',
    },
    clockwise: {
        en: 'Clockwise',
        de: 'Im Uhrzeigersinn',
        fr: 'Sens horaire',
        ja: '時針回り',
        cn: '顺时针',
        ko: '시계방향',
    },
    counterclockwise: {
        en: 'Counter-clock',
        de: 'Gegen den Uhrzeigersinn',
        fr: 'Anti-horaire',
        ja: '反時針回り',
        cn: '逆时针',
        ko: '반시계방향',
    },
    // killAdds is used for adds that will always be available
    killAdds: {
        en: 'Kill adds',
        de: 'Adds besiegen',
        fr: 'Tuez les adds',
        ja: '雑魚から倒して',
        cn: '击杀小怪',
        ko: '쫄 잡기',
    },
    // killExtraAdd is used for adds that appear if a mechanic was not played correctly
    killExtraAdd: {
        en: 'Kill Extra Add',
        de: 'Add besiegen',
        fr: 'Tuez l\'add',
        ja: '雑魚から倒して',
        cn: '击杀小怪',
        ko: '쫄 잡기',
    },
    awayFromFront: {
        en: 'Away From Front',
        de: 'Weg von Vorne',
        fr: 'Éloignez-vous du devant',
        ja: '前方から離れる',
        cn: '远离正面',
        ko: '보스 전방 피하기',
    },
    sleepTarget: {
        en: 'Sleep ${name}',
        de: 'Schlaf auf ${name}',
        fr: 'Sommeil sur ${name}',
        ja: '${name} にスリプル',
        cn: '催眠 ${name}',
        ko: '${name} 슬리플',
    },
    stunTarget: {
        en: 'Stun ${name}',
        de: 'Betäubung auf ${name}',
        fr: 'Étourdissez ${name}',
        ja: '${name} にスタン',
        cn: '眩晕 ${name}',
        ko: '${name}기절',
    },
    interruptTarget: {
        en: 'interrupt ${name}',
        de: 'unterbreche ${name}',
        fr: 'Interrompez ${name}',
        ja: '${name} に沈黙',
        cn: '打断${name}',
        ko: '${name}기술 시전 끊기',
    },
    preyOnYou: {
        en: 'Prey on YOU',
        de: 'Marker auf DIR',
        fr: 'Marquage sur VOUS',
        ja: '自分にマーキング',
        cn: '猎物点名',
        ko: '홍옥징 대상자',
    },
    preyOnPlayer: {
        en: 'Prey on ${player}',
        de: 'Marker auf ${player}',
        fr: 'Marquage sur ${player}',
        ja: '${player}にマーキング',
        cn: '${player} 的猎物点名',
        ko: '"${player}" 홍옥징',
    },
    awayFromGroup: {
        en: 'Away from Group',
        de: 'Weg von der Gruppe',
        fr: 'Éloignez-vous du groupe',
        ja: '外へ',
        cn: '远离人群',
        ko: '다른 사람들과 떨어지기',
    },
    awayFromPlayer: {
        en: 'Away from ${player}',
        de: 'Weg von ${player}',
        fr: 'Éloignez-vous de ${player}',
        ja: '${player}から離れる',
        cn: '远离${player}',
        ko: '"${player}"에게서 멀어지기',
    },
    meteorOnYou: {
        en: 'Meteor on YOU',
        de: 'Meteor auf DIR',
        fr: 'Météore sur VOUS',
        ja: '自分にメテオ',
        cn: '陨石点名',
        ko: '나에게 메테오징',
    },
    stopMoving: {
        en: 'Stop Moving!',
        de: 'Bewegung stoppen!',
        fr: 'Ne bougez pas !',
        ja: '移動禁止！',
        cn: '停止移动！',
        ko: '이동 멈추기!',
    },
    stopEverything: {
        en: 'Stop Everything!',
        de: 'Stoppe Alles!',
        fr: 'Arrêtez tout !',
        ja: '行動禁止！',
        cn: '停止行动！',
        ko: '행동 멈추기!',
    },
    moveAway: {
        // move away to dodge aoes
        en: 'Move!',
        de: 'Bewegen!',
        fr: 'Bougez !',
        ja: '避けて！',
        cn: '离开原地！',
        ko: '이동하기!',
    },
    moveAround: {
        // move around (e.g. jumping) to avoid being frozen
        en: 'Move!',
        de: 'Bewegen!',
        fr: 'Bougez !',
        ja: '動く！',
        cn: '保持运动！',
        ko: '움직이기!',
    },
    breakChains: {
        en: 'Break chains',
        de: 'Kette zerbrechen',
        fr: 'Brisez les chaines',
        ja: '線を切る',
        cn: '拉断连线',
        ko: '선 끊기',
    },
    moveChainsTogether: {
        en: 'Move chains together',
        de: 'Ketten zusammen bewegen',
        fr: 'Bougez les chaines ensemble',
        ja: '線同士で一緒に移動',
        cn: '连线一起移动',
        ko: '선 붙어서 같이 움직이기',
    },
    earthshakerOnYou: {
        en: 'Earth Shaker on YOU',
        de: 'Erdstoß auf DIR',
        fr: 'Marque de terre sur VOUS',
        ja: '自分にアースシェイカー',
        cn: '大地摇动点名',
        ko: '어스징 대상자',
    },
    wakeUp: {
        en: 'WAKE UP',
        de: 'AUFWACHEN',
        fr: 'RÉVEILLE-TOI',
        ja: '目を覚まして！',
        cn: '醒醒！动一动！！',
        ko: '일어나세요!',
    },
    closeTethersWithPlayer: {
        en: 'Close Tethers (${player})',
        de: 'Nahe Verbindungen (${player})',
        fr: 'Liens proches avec (${player})',
        ja: '${player}に近づく',
        cn: '近线 (${player})',
        ko: '상대와 가까이 붙기 (${player})',
    },
    farTethersWithPlayer: {
        en: 'Far Tethers (${player})',
        de: 'Entfernte Verbindungen (${player})',
        fr: 'Liens éloignés avec (${player})',
        ja: ' (${player})から離れる',
        cn: '远线 (${player})',
        ko: '상대와 떨어지기 (${player})',
    },
    getTowers: {
        en: 'Get Towers',
        de: 'Türme nehmen',
        fr: 'Allez dans les tours',
        ja: '塔を踏む',
        cn: '踩塔',
        ko: '기둥 들어가기',
    },
    unknown: {
        en: '???',
        de: '???',
        fr: '???',
        ja: '???',
        cn: '???',
        ko: '???',
    },
    cardinals: {
        en: 'Cardinals',
        de: 'Kardinal',
        fr: 'Cardinaux',
        ja: '十字回避',
        cn: '去正点',
        ko: '십자방향으로',
    },
    intercards: {
        en: 'Intercards',
        de: 'Interkardinal',
        fr: 'Intercardinal',
        ja: '斜めへ',
        cn: '去斜角',
        ko: '대각선 쪽으로',
    },
    north: {
        en: 'North',
        de: 'Norden',
        fr: 'Nord',
        ja: '北',
        cn: '上',
        ko: '북쪽',
    },
    south: {
        en: 'South',
        de: 'Süden',
        fr: 'Sud',
        ja: '南',
        cn: '下',
        ko: '남쪽',
    },
    east: {
        en: 'East',
        de: 'Osten',
        fr: 'Est',
        ja: '東',
        cn: '右',
        ko: '동쪽',
    },
    west: {
        en: 'West',
        de: 'Westen',
        fr: 'Ouest',
        ja: '西',
        cn: '左',
        ko: '서쪽',
    },
    northwest: {
        en: 'Northwest',
        de: 'Nordwesten',
        fr: 'Nord-Ouest',
        ja: '北西',
        cn: '左上',
        ko: '북서쪽',
    },
    northeast: {
        en: 'Northeast',
        de: 'Nordosten',
        fr: 'Nord-Est',
        ja: '北東',
        cn: '右上',
        ko: '북동쪽',
    },
    southwest: {
        en: 'Southwest',
        de: 'Südwesten',
        fr: 'Sud-Ouest',
        ja: '南西',
        cn: '左下',
        ko: '남서쪽',
    },
    southeast: {
        en: 'Southeast',
        de: 'Südosten',
        fr: 'Sud-Est',
        ja: '南東',
        cn: '右下',
        ko: '남동쪽',
    },
    dirN: {
        en: 'N',
        de: 'N',
        fr: 'N',
        ja: '北',
        cn: '上',
        ko: '북',
    },
    dirS: {
        en: 'S',
        de: 'S',
        fr: 'S',
        ja: '南',
        cn: '下',
        ko: '남',
    },
    dirE: {
        en: 'E',
        de: 'O',
        fr: 'E',
        ja: '東',
        cn: '右',
        ko: '동',
    },
    dirW: {
        en: 'W',
        de: 'W',
        fr: 'O',
        ja: '西',
        cn: '左',
        ko: '서',
    },
    dirNW: {
        en: 'NW',
        de: 'NW',
        fr: 'NO',
        ja: '北西',
        cn: '左上',
        ko: '북서',
    },
    dirNE: {
        en: 'NE',
        de: 'NO',
        fr: 'NE',
        ja: '北東',
        cn: '右上',
        ko: '북동',
    },
    dirSW: {
        en: 'SW',
        de: 'SW',
        fr: 'SO',
        ja: '南西',
        cn: '左下',
        ko: '남서',
    },
    dirSE: {
        en: 'SE',
        de: 'SO',
        fr: 'SE',
        ja: '南東',
        cn: '右下',
        ko: '남동',
    },
    dirNNE: {
        en: 'NNE',
        de: 'NNO',
        fr: 'NNE',
        ja: '北北東(1時)',
        cn: '上偏右',
        ko: '1시',
    },
    dirENE: {
        en: 'ENE',
        de: 'ONO',
        fr: 'ENE',
        ja: '東北東(2時)',
        cn: '右偏上',
        ko: '2시',
    },
    dirESE: {
        en: 'ESE',
        de: 'OSO',
        fr: 'ESE',
        ja: '東南東(4時)',
        cn: '右偏下',
        ko: '4시',
    },
    dirSSE: {
        en: 'SSE',
        de: 'SSO',
        fr: 'SSE',
        ja: '南南東(5時)',
        cn: '下偏右',
        ko: '5시',
    },
    dirSSW: {
        en: 'SSW',
        de: 'SSW',
        fr: 'SSO',
        ja: '南南西(7時)',
        cn: '下偏左',
        ko: '7시',
    },
    dirWSW: {
        en: 'WSW',
        de: 'WSW',
        fr: 'OSO',
        ja: '西南西(8時)',
        cn: '左偏下',
        ko: '8시',
    },
    dirWNW: {
        en: 'WNW',
        de: 'WNW',
        fr: 'ONO',
        ja: '西北西(10時)',
        cn: '左偏上',
        ko: '10시',
    },
    dirNNW: {
        en: 'NNW',
        de: 'NNW',
        fr: 'NNO',
        ja: '北北西(11時)',
        cn: '上偏左',
        ko: '11시',
    },
    tank: {
        en: 'Tank',
        de: 'Tank',
        fr: 'Tank',
        ja: 'タンク',
        cn: '坦克',
        ko: '탱',
    },
    healer: {
        en: 'Healer',
        de: 'Heiler',
        fr: 'Healer',
        ja: 'ヒーラー',
        cn: '治疗',
        ko: '힐',
    },
    dps: {
        en: 'DPS',
        de: 'DPS',
        fr: 'DPS',
        ja: 'DPS',
        cn: 'DPS',
        ko: '딜러',
    },
    // for sequenced mechanics
    next: {
        en: ' => ',
        de: ' => ',
        fr: ' => ',
        ja: ' => ',
        cn: ' => ',
        ko: ' => ',
    },
    // for combo mechanics/names
    and: {
        en: ' + ',
        de: ' + ',
        fr: ' + ',
        cn: ' + ',
        ko: ' + ',
    },
    // for either/or directions or mechanics
    or: {
        en: ' / ',
        de: ' / ',
        fr: ' / ',
        cn: ' / ',
        ko: ' / ',
    },
    // Literal numbers.
    num0: numberToOutputString(0),
    num1: numberToOutputString(1),
    num2: numberToOutputString(2),
    num3: numberToOutputString(3),
    num4: numberToOutputString(4),
    num5: numberToOutputString(5),
    num6: numberToOutputString(6),
    num7: numberToOutputString(7),
    num8: numberToOutputString(8),
    num9: numberToOutputString(9),
});
//# sourceMappingURL=outputs.js.map

/***/ }),

/***/ 181:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   M9: () => (/* binding */ addOverlayListener),
/* harmony export */   tK: () => (/* binding */ callOverlayHandler)
/* harmony export */ });
/* unused harmony exports dispatchOverlayEvent, removeOverlayListener, setOverlayHandlerOverride, init */
// OverlayPlugin API setup
let inited = false;
let wsUrl = null;
let ws = null;
let queue = [];
let rseqCounter = 0;
const responsePromises = {};
const subscribers = {};
const sendMessage = (msg, cb) => {
    if (ws) {
        if (queue)
            queue.push(msg);
        else
            ws.send(JSON.stringify(msg));
    }
    else {
        if (queue)
            queue.push([msg, cb]);
        else
            window.OverlayPluginApi.callHandler(JSON.stringify(msg), cb);
    }
};
const processEvent = (msg) => {
    init();
    const subs = subscribers[msg.type];
    subs?.forEach((sub) => {
        try {
            sub(msg);
        }
        catch (e) {
            console.error(e);
        }
    });
};
const dispatchOverlayEvent = processEvent;
const addOverlayListener = (event, cb) => {
    init();
    if (!subscribers[event]) {
        subscribers[event] = [];
        if (!queue) {
            sendMessage({
                call: 'subscribe',
                events: [event],
            });
        }
    }
    subscribers[event]?.push(cb);
};
const removeOverlayListener = (event, cb) => {
    init();
    if (subscribers[event]) {
        const list = subscribers[event];
        const pos = list?.indexOf(cb);
        if (pos !== undefined && pos > -1)
            list?.splice(pos, 1);
    }
};
const callOverlayHandlerInternal = (_msg) => {
    init();
    const msg = {
        ..._msg,
        rseq: 0,
    };
    let p;
    if (ws) {
        msg.rseq = rseqCounter++;
        p = new Promise((resolve, reject) => {
            responsePromises[msg.rseq] = { resolve: resolve, reject: reject };
        });
        sendMessage(msg);
    }
    else {
        p = new Promise((resolve, reject) => {
            sendMessage(msg, (data) => {
                if (data === null) {
                    resolve(data);
                    return;
                }
                const parsed = JSON.parse(data);
                if (parsed['$error'])
                    reject(parsed);
                else
                    resolve(parsed);
            });
        });
    }
    return p;
};
const callOverlayHandlerOverrideMap = {};
const callOverlayHandler = (_msg) => {
    init();
    // If this `as` is incorrect, then it will not find an override.
    // TODO: we could also replace this with a type guard.
    const type = _msg.call;
    const callFunc = callOverlayHandlerOverrideMap[type] ?? callOverlayHandlerInternal;
    // The `IOverlayHandler` type guarantees that parameters/return type match
    // one of the overlay handlers.  The OverrideMap also only stores functions
    // that match by the discriminating `call` field, and so any overrides
    // should be correct here.
    // eslint-disable-next-line max-len
    // eslint-disable-next-line @typescript-eslint/no-explicit-any,@typescript-eslint/no-unsafe-argument
    return callFunc(_msg);
};
const setOverlayHandlerOverride = (type, override) => {
    if (!override) {
        delete callOverlayHandlerOverrideMap[type];
        return;
    }
    callOverlayHandlerOverrideMap[type] = override;
};
const init = () => {
    if (inited)
        return;
    if (typeof window !== 'undefined') {
        wsUrl = new URLSearchParams(window.location.search).get('OVERLAY_WS');
        if (wsUrl !== null) {
            const connectWs = function (wsUrl) {
                ws = new WebSocket(wsUrl);
                ws.addEventListener('error', (e) => {
                    console.error(e);
                });
                ws.addEventListener('open', () => {
                    console.log('Connected!');
                    const q = queue ?? [];
                    queue = null;
                    sendMessage({
                        call: 'subscribe',
                        events: Object.keys(subscribers),
                    });
                    for (const msg of q) {
                        if (!Array.isArray(msg))
                            sendMessage(msg);
                    }
                });
                ws.addEventListener('message', (_msg) => {
                    try {
                        if (typeof _msg.data !== 'string') {
                            console.error('Invalid message data received: ', _msg);
                            return;
                        }
                        const msg = JSON.parse(_msg.data);
                        const promiseFuncs = msg?.rseq !== undefined ? responsePromises[msg.rseq] : undefined;
                        if (msg.rseq !== undefined && promiseFuncs) {
                            if (msg['$error'])
                                promiseFuncs.reject(msg);
                            else
                                promiseFuncs.resolve(msg);
                            delete responsePromises[msg.rseq];
                        }
                        else {
                            processEvent(msg);
                        }
                    }
                    catch (e) {
                        console.error('Invalid message received: ', _msg);
                        return;
                    }
                });
                ws.addEventListener('close', () => {
                    queue = null;
                    console.log('Trying to reconnect...');
                    // Don't spam the server with retries.
                    window.setTimeout(() => {
                        connectWs(wsUrl);
                    }, 300);
                });
            };
            connectWs(wsUrl);
        }
        else {
            const waitForApi = function () {
                if (!window.OverlayPluginApi?.ready) {
                    window.setTimeout(waitForApi, 300);
                    return;
                }
                const q = queue ?? [];
                queue = null;
                window.__OverlayCallback = processEvent;
                sendMessage({
                    call: 'subscribe',
                    events: Object.keys(subscribers),
                });
                for (const item of q) {
                    if (Array.isArray(item))
                        sendMessage(item[0], item[1]);
                }
            };
            waitForApi();
        }
        // Here the OverlayPlugin API is registered to the window object,
        // but this is mainly for backwards compatibility. For cactbot's built-in files,
        // it is recommended to use the various functions exported in resources/overlay_plugin_api.ts.
        /* eslint-disable deprecation/deprecation */
        window.addOverlayListener = addOverlayListener;
        window.removeOverlayListener = removeOverlayListener;
        window.callOverlayHandler = callOverlayHandler;
        window.dispatchOverlayEvent = dispatchOverlayEvent;
        /* eslint-enable deprecation/deprecation */
    }
    inited = true;
};
//# sourceMappingURL=overlay_plugin_api.js.map

/***/ }),

/***/ 605:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (/* binding */ Regexes)
/* harmony export */ });
/* unused harmony export buildRegex */
/* harmony import */ var _netlog_defs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(130);
/* harmony import */ var _not_reached__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(174);


const separator = ':';
const matchDefault = '[^:]*';
const matchWithColonsDefault = '(?:[^:]|: )*?';
const fieldsWithPotentialColons = ['effect', 'ability'];
const defaultParams = (type, version, include) => {
    const logType = _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* .logDefinitionsVersions */ .s[version][type];
    if (include === undefined) {
        include = Object.keys(logType.fields);
        if ('repeatingFields' in logType) {
            include.push(logType.repeatingFields.label);
        }
    }
    const params = {};
    const firstOptionalField = logType.firstOptionalField;
    for (const [prop, index] of Object.entries(logType.fields)) {
        if (!include.includes(prop))
            continue;
        const param = {
            field: prop,
            optional: firstOptionalField !== undefined && index >= firstOptionalField,
        };
        if (prop === 'type')
            param.value = logType.type;
        params[index] = param;
    }
    if ('repeatingFields' in logType && include.includes(logType.repeatingFields.label)) {
        params[logType.repeatingFields.startingIndex] = {
            field: logType.repeatingFields.label,
            optional: firstOptionalField !== undefined &&
                logType.repeatingFields.startingIndex >= firstOptionalField,
            repeating: true,
            repeatingKeys: [...logType.repeatingFields.names],
            sortKeys: logType.repeatingFields.sortKeys,
            primaryKey: logType.repeatingFields.primaryKey,
            possibleKeys: [...logType.repeatingFields.possibleKeys],
        };
    }
    return params;
};
const isRepeatingField = (repeating, value) => {
    if (repeating !== true)
        return false;
    // Allow excluding the field to match for extraction
    if (value === undefined)
        return true;
    if (!Array.isArray(value))
        return false;
    for (const e of value) {
        if (typeof e !== 'object')
            return false;
    }
    return true;
};
const parseHelper = (params, defKey, fields) => {
    params = params ?? {};
    const validFields = [];
    for (const index in fields) {
        const field = fields[index];
        if (field)
            validFields.push(field.field);
    }
    Regexes.validateParams(params, defKey, ['capture', ...validFields]);
    // Find the last key we care about, so we can shorten the regex if needed.
    const capture = Regexes.trueIfUndefined(params.capture);
    const fieldKeys = Object.keys(fields).sort((a, b) => parseInt(a) - parseInt(b));
    let maxKeyStr;
    if (capture) {
        const keys = [];
        for (const key in fields)
            keys.push(key);
        let tmpKey = keys.pop();
        if (tmpKey === undefined) {
            maxKeyStr = fieldKeys[fieldKeys.length - 1] ?? '0';
        }
        else {
            while (fields[tmpKey]?.optional &&
                !((fields[tmpKey]?.field ?? '') in params))
                tmpKey = keys.pop();
            maxKeyStr = tmpKey ?? '0';
        }
    }
    else {
        maxKeyStr = '0';
        for (const key in fields) {
            const value = fields[key] ?? {};
            if (typeof value !== 'object')
                continue;
            const fieldName = fields[key]?.field;
            if (fieldName !== undefined && fieldName in params)
                maxKeyStr = key;
        }
    }
    const maxKey = parseInt(maxKeyStr);
    // Special case for Ability to handle aoe and non-aoe.
    const abilityMessageType = `(?:${_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.Ability.messageType}|${_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.NetworkAOEAbility.messageType})`;
    const abilityHexCode = '(?:15|16)';
    // Build the regex from the fields.
    const prefix = defKey !== 'Ability' ? _netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A[defKey].messageType : abilityMessageType;
    // Hex codes are a minimum of two characters.  Abilities are special because
    // they need to support both 0x15 and 0x16.
    const typeAsHex = parseInt(_netlog_defs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A[defKey].type).toString(16).toUpperCase();
    const defaultHexCode = typeAsHex.length < 2 ? `00${typeAsHex}`.slice(-2) : typeAsHex;
    const hexCode = defKey !== 'Ability' ? defaultHexCode : abilityHexCode;
    let str = '';
    if (capture)
        str += `(?<timestamp>\\y{Timestamp}) ${prefix} (?<type>${hexCode})`;
    else
        str += `\\y{Timestamp} ${prefix} ${hexCode}`;
    let lastKey = 1;
    for (const keyStr in fields) {
        const parseField = fields[keyStr];
        if (parseField === undefined)
            continue;
        const fieldName = parseField.field;
        // Regex handles these manually above in the `str` initialization.
        if (fieldName === 'timestamp' || fieldName === 'type')
            continue;
        const key = parseInt(keyStr);
        // Fill in blanks.
        const missingFields = key - lastKey - 1;
        if (missingFields === 1)
            str += `${separator}${matchDefault}`;
        else if (missingFields > 1)
            str += `(?:${separator}${matchDefault}){${missingFields}}`;
        lastKey = key;
        str += separator;
        if (typeof parseField !== 'object')
            throw new Error(`${defKey}: invalid value: ${JSON.stringify(parseField)}`);
        const fieldDefault = fieldName !== undefined && fieldsWithPotentialColons.includes(fieldName)
            ? matchWithColonsDefault
            : matchDefault;
        const defaultFieldValue = parseField.value?.toString() ?? fieldDefault;
        const fieldValue = params[fieldName];
        if (isRepeatingField(fields[keyStr]?.repeating, fieldValue)) {
            const repeatingFieldsSeparator = '(?:$|:)';
            let repeatingArray = fieldValue;
            const sortKeys = fields[keyStr]?.sortKeys;
            const primaryKey = fields[keyStr]?.primaryKey;
            const possibleKeys = fields[keyStr]?.possibleKeys;
            // primaryKey is required if this is a repeating field per typedef in netlog_defs.ts
            // Same with possibleKeys
            if (primaryKey === undefined || possibleKeys === undefined)
                throw new _not_reached__WEBPACK_IMPORTED_MODULE_1__/* .UnreachableCode */ .O();
            // Allow sorting if needed
            if (sortKeys) {
                // Also sort our valid keys list
                possibleKeys.sort((left, right) => left.toLowerCase().localeCompare(right.toLowerCase()));
                if (repeatingArray !== undefined) {
                    repeatingArray = [...repeatingArray].sort((left, right) => {
                        // We check the validity of left/right because they're user-supplied
                        if (typeof left !== 'object' || left[primaryKey] === undefined) {
                            console.warn('Invalid argument passed to trigger:', left);
                            return 0;
                        }
                        const leftValue = left[primaryKey];
                        if (typeof leftValue !== 'string' || !possibleKeys?.includes(leftValue)) {
                            console.warn('Invalid argument passed to trigger:', left);
                            return 0;
                        }
                        if (typeof right !== 'object' || right[primaryKey] === undefined) {
                            console.warn('Invalid argument passed to trigger:', right);
                            return 0;
                        }
                        const rightValue = right[primaryKey];
                        if (typeof rightValue !== 'string' || !possibleKeys?.includes(rightValue)) {
                            console.warn('Invalid argument passed to trigger:', right);
                            return 0;
                        }
                        return leftValue.toLowerCase().localeCompare(rightValue.toLowerCase());
                    });
                }
            }
            const anonReps = repeatingArray;
            // Loop over our possible keys
            // Build a regex that can match any possible key with required values substituted in
            possibleKeys.forEach((possibleKey) => {
                const rep = anonReps?.find((rep) => primaryKey in rep && rep[primaryKey] === possibleKey);
                let fieldRegex = '';
                // Rather than looping over the keys defined on the object,
                // loop over the base type def's keys. This enforces the correct order.
                fields[keyStr]?.repeatingKeys?.forEach((key) => {
                    let val = rep?.[key];
                    if (rep === undefined || !(key in rep)) {
                        // If we don't have a value for this key
                        // insert a placeholder, unless it's the primary key
                        if (key === primaryKey)
                            val = possibleKey;
                        else
                            val = matchDefault;
                    }
                    if (typeof val !== 'string') {
                        if (!Array.isArray(val))
                            val = matchDefault;
                        else if (val.length < 1)
                            val = matchDefault;
                        else if (val.some((v) => typeof v !== 'string'))
                            val = matchDefault;
                    }
                    fieldRegex += Regexes.maybeCapture(key === primaryKey ? false : capture, 
                    // All capturing groups are `fieldName` + `possibleKey`, e.g. `pairIsCasting1`
                    fieldName + possibleKey, val, defaultFieldValue) +
                        repeatingFieldsSeparator;
                });
                if (fieldRegex.length > 0) {
                    str += `(?:${fieldRegex})${rep !== undefined ? '' : '?'}`;
                }
            });
        }
        else if (fields[keyStr]?.repeating) {
            // If this is a repeating field but the actual value is empty or otherwise invalid,
            // don't process further. We can't use `continue` in the above block because that
            // would skip the early-out break at the end of the loop.
        }
        else {
            if (fieldName !== undefined) {
                str += Regexes.maybeCapture(
                // more accurate type instead of `as` cast
                // maybe this function needs a refactoring
                capture, fieldName, fieldValue, defaultFieldValue);
            }
            else {
                // FIXME: handle lint error here
                // ref: https://github.com/OverlayPlugin/cactbot/pull/274#discussion_r1692439720
                // eslint-disable-next-line @typescript-eslint/restrict-plus-operands
                str += fieldValue;
            }
        }
        // Stop if we're not capturing and don't care about future fields.
        if (key >= maxKey)
            break;
    }
    str += '(?:$|:)';
    return Regexes.parse(str);
};
const buildRegex = (type, params) => {
    return parseHelper(params, type, defaultParams(type, Regexes.logVersion));
};
class Regexes {
    static logVersion = 'latest';
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-20-0x14-networkstartscasting
     */
    static startsUsing(params) {
        return buildRegex('StartsUsing', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
     */
    static ability(params) {
        return buildRegex('Ability', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-21-0x15-networkability
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-22-0x16-networkaoeability
     *
     * @deprecated Use `ability` instead
     */
    static abilityFull(params) {
        return this.ability(params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-27-0x1b-networktargeticon-head-marker
     */
    static headMarker(params) {
        return buildRegex('HeadMarker', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
     */
    static addedCombatant(params) {
        return buildRegex('AddedCombatant', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-03-0x03-addcombatant
     */
    static addedCombatantFull(params) {
        return this.addedCombatant(params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-04-0x04-removecombatant
     */
    static removingCombatant(params) {
        return buildRegex('RemovedCombatant', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-26-0x1a-networkbuff
     */
    static gainsEffect(params) {
        return buildRegex('GainsEffect', params);
    }
    /**
     * Prefer gainsEffect over this function unless you really need extra data.
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-38-0x26-networkstatuseffects
     */
    static statusEffectExplicit(params) {
        return buildRegex('StatusEffect', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-30-0x1e-networkbuffremove
     */
    static losesEffect(params) {
        return buildRegex('LosesEffect', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-35-0x23-networktether
     */
    static tether(params) {
        return buildRegex('Tether', params);
    }
    /**
     * 'target' was defeated by 'source'
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-25-0x19-networkdeath
     */
    static wasDefeated(params) {
        return buildRegex('WasDefeated', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-24-0x18-networkdot
     */
    static networkDoT(params) {
        return buildRegex('NetworkDoT', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
     */
    static echo(params) {
        if (typeof params === 'undefined')
            params = {};
        Regexes.validateParams(params, 'echo', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
        params.code = '0038';
        return Regexes.gameLog(params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
     */
    static dialog(params) {
        if (typeof params === 'undefined')
            params = {};
        Regexes.validateParams(params, 'dialog', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
        params.code = '0044';
        return Regexes.gameLog(params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
     */
    static message(params) {
        if (typeof params === 'undefined')
            params = {};
        Regexes.validateParams(params, 'message', ['type', 'timestamp', 'code', 'name', 'line', 'capture']);
        params.code = '0839';
        return Regexes.gameLog(params);
    }
    /**
     * fields: code, name, line, capture
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
     */
    static gameLog(params) {
        return buildRegex('GameLog', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-00-0x00-logline
     */
    static gameNameLog(params) {
        // Backwards compatability.
        return Regexes.gameLog(params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-12-0x0c-playerstats
     */
    static statChange(params) {
        return buildRegex('PlayerStats', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-01-0x01-changezone
     */
    static changeZone(params) {
        return buildRegex('ChangeZone', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-33-0x21-network6d-actor-control
     */
    static network6d(params) {
        return buildRegex('ActorControl', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-34-0x22-networknametoggle
     */
    static nameToggle(params) {
        return buildRegex('NameToggle', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-40-0x28-map
     */
    static map(params) {
        return buildRegex('Map', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-41-0x29-systemlogmessage
     */
    static systemLogMessage(params) {
        return buildRegex('SystemLogMessage', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-257-0x101-mapeffect
     */
    static mapEffect(params) {
        return buildRegex('MapEffect', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-258-0x102-fatedirector
     */
    static fateDirector(params) {
        return buildRegex('FateDirector', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-259-0x103-cedirector
     */
    static ceDirector(params) {
        return buildRegex('CEDirector', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-260-0x104-incombat
     */
    static inCombat(params) {
        return buildRegex('InCombat', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-261-0x105-combatantmemory
     */
    static combatantMemory(params) {
        return buildRegex('CombatantMemory', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-263-0x107-startsusingextra
     */
    static startsUsingExtra(params) {
        return buildRegex('StartsUsingExtra', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-264-0x108-abilityextra
     */
    static abilityExtra(params) {
        return buildRegex('AbilityExtra', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-265-0x109-contentfindersettings
     */
    static contentFinderSettings(params) {
        return buildRegex('ContentFinderSettings', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-266-0x10a-npcyell
     */
    static npcYell(params) {
        return buildRegex('NpcYell', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-267-0x10b-battletalk2
     */
    static battleTalk2(params) {
        return buildRegex('BattleTalk2', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-268-0x10c-countdown
     */
    static countdown(params) {
        return buildRegex('Countdown', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-269-0x10d-countdowncancel
     */
    static countdownCancel(params) {
        return buildRegex('CountdownCancel', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-270-0x10e-actormove
     */
    static actorMove(params) {
        return buildRegex('ActorMove', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-271-0x10f-actorsetpos
     */
    static actorSetPos(params) {
        return buildRegex('ActorSetPos', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-272-0x110-spawnnpcextra
     */
    static spawnNpcExtra(params) {
        return buildRegex('SpawnNpcExtra', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-273-0x111-actorcontrolextra
     */
    static actorControlExtra(params) {
        return buildRegex('ActorControlExtra', params);
    }
    /**
     * matches: https://github.com/OverlayPlugin/cactbot/blob/main/docs/LogGuide.md#line-274-0x112-actorcontrolselfextra
     */
    static actorControlSelfExtra(params) {
        return buildRegex('ActorControlSelfExtra', params);
    }
    /**
     * Helper function for building named capture group
     */
    static maybeCapture(capture, name, value, defaultValue) {
        if (value === undefined)
            value = defaultValue ?? matchDefault;
        value = Regexes.anyOf(value);
        return capture ? Regexes.namedCapture(name, value) : value;
    }
    static optional(str) {
        return `(?:${str})?`;
    }
    // Creates a named regex capture group named |name| for the match |value|.
    static namedCapture(name, value) {
        if (name.includes('>'))
            console.error(`"${name}" contains ">".`);
        if (name.includes('<'))
            console.error(`"${name}" contains ">".`);
        return `(?<${name}>${value})`;
    }
    /**
     * Convenience for turning multiple args into a unioned regular expression.
     * anyOf(x, y, z) or anyOf([x, y, z]) do the same thing, and return (?:x|y|z).
     * anyOf(x) or anyOf(x) on its own simplifies to just x.
     * args may be strings or RegExp, although any additional markers to RegExp
     * like /insensitive/i are dropped.
     */
    static anyOf(...args) {
        const anyOfArray = (array) => {
            const [elem] = array;
            if (elem !== undefined && array.length === 1)
                return `${elem instanceof RegExp ? elem.source : elem}`;
            return `(?:${array.map((elem) => elem instanceof RegExp ? elem.source : elem).join('|')})`;
        };
        let array = [];
        const [firstArg] = args;
        if (args.length === 1) {
            if (typeof firstArg === 'string' || firstArg instanceof RegExp)
                array = [firstArg];
            else if (Array.isArray(firstArg))
                array = firstArg;
            else
                array = [];
        }
        else {
            // TODO: more accurate type instead of `as` cast
            array = args;
        }
        return anyOfArray(array);
    }
    static parse(regexpString) {
        const kCactbotCategories = {
            Timestamp: '^.{14}',
            NetTimestamp: '.{33}',
            NetField: '(?:[^|]*\\|)',
            LogType: '[0-9A-Fa-f]{2}',
            AbilityCode: '[0-9A-Fa-f]{1,8}',
            ObjectId: '[0-9A-F]{8}',
            // Matches any character name (including empty strings which the FFXIV
            // ACT plugin can generate when unknown).
            Name: '(?:[^\\s:|]+(?: [^\\s:|]+)?|)',
            // Floats can have comma as separator in FFXIV plugin output: https://github.com/ravahn/FFXIV_ACT_Plugin/issues/137
            Float: '-?[0-9]+(?:[.,][0-9]+)?(?:E-?[0-9]+)?',
        };
        // All regexes in cactbot are case insensitive.
        // This avoids headaches as things like `Vice and Vanity` turns into
        // `Vice And Vanity`, especially for French and German.  It appears to
        // have a ~20% regex parsing overhead, but at least they work.
        let modifiers = 'i';
        if (regexpString instanceof RegExp) {
            modifiers += (regexpString.global ? 'g' : '') +
                (regexpString.multiline ? 'm' : '');
            regexpString = regexpString.source;
        }
        regexpString = regexpString.replace(/\\y\{(.*?)\}/g, (match, group) => {
            return kCactbotCategories[group] || match;
        });
        return new RegExp(regexpString, modifiers);
    }
    // Like Regex.Regexes.parse, but force global flag.
    static parseGlobal(regexpString) {
        const regex = Regexes.parse(regexpString);
        let modifiers = 'gi';
        if (regexpString instanceof RegExp)
            modifiers += regexpString.multiline ? 'm' : '';
        return new RegExp(regex.source, modifiers);
    }
    static trueIfUndefined(value) {
        if (typeof value === 'undefined')
            return true;
        return !!value;
    }
    static validateParams(f, funcName, params) {
        if (f === null)
            return;
        if (typeof f !== 'object')
            return;
        const keys = Object.keys(f);
        for (const key of keys) {
            if (!params.includes(key)) {
                throw new Error(`${funcName}: invalid parameter '${key}'.  ` +
                    `Valid params: ${JSON.stringify(params)}`);
            }
        }
    }
}
//# sourceMappingURL=regexes.js.map

/***/ }),

/***/ 546:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   x1: () => (/* binding */ Responses)
/* harmony export */ });
/* unused harmony exports severityList, builtInResponseStr, triggerFunctions, triggerTextOutputFunctions, triggerOutputFunctions, severityMap */
/* harmony import */ var _outputs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(468);
// This is meant to be used in a trigger as such:
// {
//   id: 'Some tankbuster',
//   regex: Regexes.startsUsing({source: 'Ye Olde Bosse', id: '666'}),
//   condition: Conditions.caresAboutMagical(data),
//   response: Responses.tankbuster(),
// },
//
// Note: Breaking out the condition like this lets people override it if they
// always (or never) want to know about it, rather than hiding the logic inside
// the tankbuster callback with a "is healer" check.
//
// If data.role is used, it should be only to differentiate between alert levels,
// and not whether a message is sent at all.
//
// Although this is not true of `response: ` fields on triggers in general,
// all responses in this file should either return an object or a single
// function that sets outputStrings and returns an object without doing
// anything with data or matches.  See `responses_test.js`.

const severityList = (/* unused pure expression or super */ null && (['info', 'alert', 'alarm']));
const builtInResponseStr = 'cactbot-builtin-response';
// All valid trigger fields.
const triggerFunctions = (/* unused pure expression or super */ null && ([
    'alarmText',
    'alertText',
    'condition',
    'delaySeconds',
    'disabled',
    'durationSeconds',
    'id',
    'type',
    'infoText',
    'preRun',
    'promise',
    'response',
    'run',
    'sound',
    'soundVolume',
    'suppressSeconds',
    'tts',
    'outputStrings',
]));
// Trigger fields that can produce text output.
const triggerTextOutputFunctions = [
    'alarmText',
    'alertText',
    'infoText',
    'response',
    'tts',
];
// If a trigger has any of these, then it has a visible/audio effect.
const triggerOutputFunctions = [
    ...triggerTextOutputFunctions,
    'sound',
];
const severityMap = {
    'info': 'infoText',
    'alert': 'alertText',
    'alarm': 'alarmText',
};
const getText = (sev) => {
    if (!(sev in severityMap))
        throw new Error(`Invalid severity: ${sev}.`);
    return severityMap[sev];
};
const defaultInfoText = (sev) => {
    if (!sev)
        return 'infoText';
    return getText(sev);
};
const defaultAlertText = (sev) => {
    if (!sev)
        return 'alertText';
    return getText(sev);
};
const defaultAlarmText = (sev) => {
    if (!sev)
        return 'alarmText';
    return getText(sev);
};
const getTarget = (matches) => {
    // Often tankbusters can be casted by the boss on the boss.
    // Consider this as "not having a target".
    if (matches.target === matches.source)
        return;
    // In hunts, sometimes there are too many people for the target
    // to have a name.  Treat this as "no target".
    if (matches.target === '')
        return;
    return matches.target;
};
const getSource = (matches) => {
    return matches?.source;
};
// FIXME: make this work for any number of pairs of params
const combineFuncs = function (text1, func1, text2, func2) {
    const obj = {};
    if (text1 !== text2) {
        obj[text1] = func1;
        obj[text2] = func2;
    }
    else {
        obj[text1] = (data, matches, output) => {
            return func1(data, matches, output) ?? func2(data, matches, output);
        };
    }
    return obj;
};
const isPlayerId = (id) => {
    return id !== undefined && !id.startsWith('4');
};
// For responses that unconditionally return static text.
const staticResponse = (field, text) => {
    return (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            text: text,
        };
        return {
            [field]: (_data, _matches, output) => output.text?.(),
        };
    };
};
const Responses = {
    tankBuster: (targetSev, otherSev) => {
        const outputStrings = {
            noTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.tankBuster,
            busterOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.tankBusterOnYou,
            busterOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.tankBusterOnPlayer,
        };
        const targetFunc = (data, matches, output) => {
            const target = getTarget(matches);
            if (target === undefined) {
                if (data.role !== 'tank' && data.role !== 'healer')
                    return;
                return output.noTarget?.();
            }
            if (target === data.me)
                return output.busterOnYou?.();
        };
        const otherFunc = (data, matches, output) => {
            const target = getTarget(matches);
            if (target === undefined) {
                if (data.role === 'tank' || data.role === 'healer')
                    return;
                return output.noTarget?.();
            }
            if (target === data.me)
                return;
            return output.busterOnTarget?.({ player: data.party.member(target) });
        };
        const combined = combineFuncs(defaultAlertText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
        return (_data, _matches, output) => {
            // cactbot-builtin-response
            output.responseOutputStrings = outputStrings;
            return combined;
        };
    },
    tankBusterSwap: (busterSev, swapSev) => {
        const outputStrings = {
            noTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.tankBuster,
            tankSwap: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.tankSwap,
            busterOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.tankBusterOnYou,
            busterOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.tankBusterOnPlayer,
        };
        // Note: busterSev and swapSev can be the same priority.
        const tankSwapFunc = (data, matches, output) => {
            const target = getTarget(matches);
            if (data.role === 'tank' && target !== data.me)
                return output.tankSwap?.();
        };
        const busterFunc = (data, matches, output) => {
            const target = getTarget(matches);
            if (data.role === 'tank' && target !== data.me)
                return;
            if (target === data.me)
                return output.busterOnYou?.();
            if (target === undefined)
                return output.noTarget?.();
            return output.busterOnTarget?.({ player: data.party.member(target) });
        };
        const combined = combineFuncs(defaultAlarmText(swapSev), tankSwapFunc, defaultAlertText(busterSev), busterFunc);
        return (_data, _matches, output) => {
            // cactbot-builtin-response
            output.responseOutputStrings = outputStrings;
            return combined;
        };
    },
    tankCleave: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            cleaveOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.tankCleaveOnYou,
            cleaveNoTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.tankCleave,
            avoidCleave: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.avoidTankCleave,
        };
        return {
            [defaultInfoText(sev)]: (data, matches, output) => {
                const target = getTarget(matches);
                if (target === data.me)
                    return output.cleaveOnYou?.();
                if (data.role === 'tank' || data.job === 'BLU') {
                    // targetless tank cleave
                    // BLU players should always get this generic cleave message.
                    // We have no robust way to determine whether they have tank Mimicry on,
                    // and it's really annoying for a BLU tank to be told to avoid cleaves when they can't.
                    return output.cleaveNoTarget?.();
                }
                return output.avoidCleave?.();
            },
        };
    },
    sharedTankBuster: (targetSev, otherSev) => {
        const outputStrings = {
            sharedTankbusterOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.sharedTankbusterOnYou,
            sharedTankbusterOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.sharedTankbusterOnPlayer,
            sharedTankbuster: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.sharedTankbuster,
            avoidCleave: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.avoidTankCleave,
        };
        const targetFunc = (data, matches, output) => {
            const target = getTarget(matches);
            if (target === undefined) {
                if (data.role !== 'tank' && data.role !== 'healer')
                    return;
                return output.sharedTankbuster?.();
            }
            if (target === data.me)
                return output.sharedTankbusterOnYou?.();
            if (data.role === 'tank' || data.role === 'healer')
                return output.sharedTankbusterOnTarget?.({ player: data.party.member(target) });
        };
        const otherFunc = (data, matches, output) => {
            const target = getTarget(matches);
            if (target === undefined) {
                if (data.role === 'tank' || data.role === 'healer')
                    return;
                return output.avoidCleave?.();
            }
            if (target === data.me || data.role === 'tank' || data.role === 'healer')
                return;
            return output.avoidCleave?.();
        };
        const combined = combineFuncs(defaultAlertText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
        return (_data, _matches, output) => {
            // cactbot-builtin-response
            output.responseOutputStrings = outputStrings;
            return combined;
        };
    },
    miniBuster: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.miniBuster),
    aoe: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.aoe),
    bigAoe: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.bigAoe),
    bleedAoe: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.bleedAoe),
    spread: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.spread),
    // for stack marker situations.
    stackMarker: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.stackMarker),
    // for getting together without stack marker
    getTogether: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.getTogether),
    stackMarkerOn: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            stackOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.stackOnYou,
            stackOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.stackOnPlayer,
            stackMarker: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.stackMarker,
        };
        return {
            [defaultAlertText(sev)]: (data, matches, output) => {
                const target = getTarget(matches);
                if (target === data.me)
                    return output.stackOnYou?.();
                if (target === undefined)
                    return output.stackMarker?.();
                return output.stackOnTarget?.({ player: data.party.member(target) });
            },
        };
    },
    stackMiddle: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.stackMiddle),
    doritoStack: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.doritoStack),
    spreadThenStack: (sev) => {
        return staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.spreadThenStack);
    },
    stackThenSpread: (sev) => {
        return staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.stackThenSpread);
    },
    knockback: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.knockback),
    knockbackOn: (targetSev, otherSev) => {
        const outputStrings = {
            knockback: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.knockback,
            knockbackOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.knockbackOnYou,
            knockbackOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.knockbackOnPlayer,
        };
        const targetFunc = (data, matches, output) => {
            const target = getTarget(matches);
            if (target === data.me)
                return output.knockbackOnYou?.();
        };
        const otherFunc = (data, matches, output) => {
            const target = getTarget(matches);
            if (target === undefined)
                return output.knockback?.();
            if (target !== data.me)
                return output.knockbackOnTarget?.({ player: data.party.member(target) });
        };
        const combined = combineFuncs(defaultInfoText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
        return (_data, _matches, output) => {
            // cactbot-builtin-response
            output.responseOutputStrings = outputStrings;
            return combined;
        };
    },
    drawIn: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.drawIn),
    lookTowards: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.lookTowardsBoss),
    lookAway: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.lookAway),
    lookAwayFromTarget: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            lookAway: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.lookAway,
            lookAwayFrom: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.lookAwayFromTarget,
        };
        return {
            [defaultAlertText(sev)]: (data, matches, output) => {
                const target = getTarget(matches);
                if (target === data.me)
                    return;
                if (target === undefined)
                    return output.lookAway?.();
                const name = isPlayerId(matches?.targetId) ? data.party.member(target) : target;
                return output.lookAwayFrom?.({ name: name });
            },
        };
    },
    lookAwayFromSource: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            lookAwayFrom: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.lookAwayFromTarget,
        };
        return {
            [defaultAlertText(sev)]: (data, matches, output) => {
                const source = getSource(matches);
                if (source === data.me)
                    return;
                const name = isPlayerId(matches?.sourceId) ? data.party.member(source) : source;
                return output.lookAwayFrom?.({ name: name });
            },
        };
    },
    getBehind: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.getBehind),
    goFrontOrSides: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.goFrontOrSides),
    // .getUnder() is used when you have to get into the bosses hitbox
    getUnder: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.getUnder),
    // .getIn() is more like "get close but maybe even melee range is fine"
    getIn: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.in),
    // .getOut() means get far away
    getOut: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.out),
    outOfMelee: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.outOfMelee),
    getInThenOut: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.inThenOut),
    getOutThenIn: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.outThenIn),
    getBackThenFront: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.backThenFront),
    getFrontThenBack: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.frontThenBack),
    goFront: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.goFront),
    goMiddle: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.goIntoMiddle),
    goRight: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.right),
    goLeft: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.left),
    goWest: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.getLeftAndWest),
    goEast: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.getRightAndEast),
    goLeftThenRight: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.leftThenRight),
    goRightThenLeft: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.rightThenLeft),
    goFrontBack: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.goFrontBack),
    goSides: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.sides),
    // .killAdds() is used for adds that will always be available
    killAdds: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.killAdds),
    // .killExtraAdd() is used for adds that appear if a mechanic was not played correctly
    killExtraAdd: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.killExtraAdd),
    awayFromFront: (sev) => staticResponse(defaultAlertText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.awayFromFront),
    sleep: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            sleep: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.sleepTarget,
        };
        return {
            [defaultAlertText(sev)]: (_data, matches, output) => {
                const source = getSource(matches);
                return output.sleep?.({ name: source });
            },
        };
    },
    stunOrInterruptIfPossible: (sev) => {
        return (_data, _matches, output) => {
            // cactbot-builtin-response
            output.responseOutputStrings = {
                stun: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.stunTarget,
                interrupt: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.interruptTarget,
            };
            return {
                [defaultAlertText(sev)]: (data, matches, output) => {
                    const source = getSource(matches);
                    if (data.CanSilence())
                        return output.interrupt?.({ name: source });
                    else if (data.CanStun())
                        return output.stun?.({ name: source });
                },
            };
        };
    },
    stun: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            stun: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.stunTarget,
        };
        return {
            [defaultAlertText(sev)]: (_data, matches, output) => {
                const source = getSource(matches);
                return output.stun?.({ name: source });
            },
        };
    },
    stunIfPossible: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            stun: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.stunTarget,
        };
        return {
            [defaultAlertText(sev)]: (data, matches, output) => {
                const source = getSource(matches);
                if (data.CanStun())
                    return output.stun?.({ name: source });
            },
        };
    },
    interrupt: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            interrupt: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.interruptTarget,
        };
        return {
            [defaultAlertText(sev)]: (_data, matches, output) => {
                const source = getSource(matches);
                return output.interrupt?.({ name: source });
            },
        };
    },
    interruptIfPossible: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            interrupt: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.interruptTarget,
        };
        return {
            [defaultAlertText(sev)]: (data, matches, output) => {
                const source = getSource(matches);
                if (data.CanSilence())
                    return output.interrupt?.({ name: source });
            },
        };
    },
    preyOn: (targetSev, otherSev) => {
        const outputStrings = {
            preyOnYou: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.preyOnYou,
            preyOnTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.preyOnPlayer,
        };
        const targetFunc = (data, matches, output) => {
            const target = getTarget(matches);
            if (data.me === target)
                return output.preyOnYou?.();
        };
        const otherFunc = (data, matches, output) => {
            const target = getTarget(matches);
            const player = target === undefined ? output.unknown?.() : data.party.member(target);
            if (target !== data.me)
                return output.preyOnTarget?.({ player: player });
        };
        const combined = combineFuncs(defaultAlertText(targetSev), targetFunc, defaultInfoText(otherSev), otherFunc);
        return (_data, _matches, output) => {
            // cactbot-builtin-response
            output.responseOutputStrings = outputStrings;
            return combined;
        };
    },
    awayFrom: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            awayFromGroup: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.awayFromGroup,
            awayFromTarget: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.awayFromPlayer,
            unknown: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.unknown,
        };
        return {
            [defaultAlertText(sev)]: (data, matches, output) => {
                const target = getTarget(matches);
                if (data.me === target)
                    return output.awayFromGroup?.();
                const player = target === undefined ? output.unknown?.() : data.party.member(target);
                return output.awayFromTarget?.({ player: player });
            },
        };
    },
    meteorOnYou: (sev) => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.meteorOnYou),
    stopMoving: (sev) => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.stopMoving),
    stopEverything: (sev) => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.stopEverything),
    // move away to dodge aoes
    moveAway: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.moveAway),
    // move around (e.g. jumping) to avoid being frozen
    moveAround: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.moveAround),
    breakChains: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.breakChains),
    moveChainsTogether: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.moveChainsTogether),
    earthshaker: (sev) => (_data, _matches, output) => {
        // cactbot-builtin-response
        output.responseOutputStrings = {
            earthshaker: _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.earthshakerOnYou,
        };
        return {
            [defaultAlertText(sev)]: (data, matches, output) => {
                const target = getTarget(matches);
                if (target !== data.me)
                    return;
                return output.earthshaker?.();
            },
        };
    },
    wakeUp: (sev) => staticResponse(defaultAlarmText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.wakeUp),
    getTowers: (sev) => staticResponse(defaultInfoText(sev), _outputs__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .A.getTowers),
};
// Don't give `Responses` a type in its declaration so that it can be treated as more strict
// than `ResponsesMap`, but do assert that its type is correct.  This allows callers to know
// which properties are defined in Responses without having to conditionally check for undefined.
const responseMapTypeAssertion = Responses;
// Suppress unused variable warning.
console.assert(responseMapTypeAssertion);
//# sourceMappingURL=responses.js.map

/***/ }),

/***/ 380:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _languages__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(765);
/* harmony import */ var _not_reached__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(174);
/* harmony import */ var _overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(181);
/* harmony import */ var _conditions__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(262);
/* harmony import */ var _content_type__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(946);
/* harmony import */ var _netregexes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(702);
/* harmony import */ var _regexes__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(605);
/* harmony import */ var _responses__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(546);
/* harmony import */ var _outputs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(468);
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(268);
/* harmony import */ var _zone_id__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(660);
/* harmony import */ var _zone_info__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(53);



// TODO:
// The convention of "import X as _X; const X = _X;" is currently
// being used as a method to workaround for downstream code
// that is running via eval(). Because importing statements do not
// create a variable of the same name, the eval()'d code does not know
// about the import, and thus throws ReferenceErrors.
// Used by downstream eval

const Conditions = _conditions__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .A;

const ContentType = _content_type__WEBPACK_IMPORTED_MODULE_4__/* ["default"] */ .A;

const NetRegexes = _netregexes__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .Ay;

const Regexes = _regexes__WEBPACK_IMPORTED_MODULE_6__/* ["default"] */ .A;

const Responses = _responses__WEBPACK_IMPORTED_MODULE_7__/* .Responses */ .x1;

const Outputs = _outputs__WEBPACK_IMPORTED_MODULE_8__/* ["default"] */ .A;

const Util = _util__WEBPACK_IMPORTED_MODULE_9__/* ["default"] */ .A;
const Directions = _util__WEBPACK_IMPORTED_MODULE_9__/* .Directions */ .H;

const ZoneId = _zone_id__WEBPACK_IMPORTED_MODULE_10__/* ["default"] */ .A;

const ZoneInfo = _zone_info__WEBPACK_IMPORTED_MODULE_11__/* ["default"] */ .A;
// Convince TypeScript and eslint that these are used.  TypeScript doesn't have a great way
// to disable individual rules, so this is safer than disabling all rules.
console.assert(Conditions);
console.assert(ContentType);
console.assert(NetRegexes);
console.assert(Regexes);
console.assert(Responses);
console.assert(Outputs);
console.assert(Util);
console.assert(Directions);
console.assert(ZoneId);
console.assert(ZoneInfo);
class UserConfig {
    optionTemplates = {};
    userFileCallbacks = {};
    savedConfig = {};
    getDefaultBaseOptions() {
        return {
            ParserLanguage: 'en',
            ShortLocale: 'en',
            DisplayLanguage: 'en',
            TextAlertsEnabled: true,
            SoundAlertsEnabled: true,
            SpokenAlertsEnabled: false,
            GroupSpokenAlertsEnabled: false,
            SystemInfo: {
                cactbotVersion: '0.0.0.0',
                overlayPluginVersion: '0.0.0.0',
                ffxivPluginVersion: '0.0.0.0',
                actVersion: '0.0.0.0',
                gameRegion: 'International',
            },
            Debug: false,
        };
    }
    evalUserFile(content, options) {
        const Options = options;
        console.assert(Options); // Used by eval.
        // This is the one eval cactbot should ever need, which is for handling user files.
        // Because user files can be located anywhere on disk and there's backwards compat
        // issues, it's unlikely that these will be able to be anything but eval forever.
        //
        /* eslint-disable no-eval */
        eval(content);
        /* eslint-enable no-eval */
    }
    registerOptions(overlayName, optionTemplate, userFileCallback) {
        this.optionTemplates[overlayName] = optionTemplate;
        if (userFileCallback)
            this.userFileCallbacks[overlayName] = userFileCallback;
    }
    sortUserFiles(keys) {
        // Helper data structure for subdirectories.
        const splitKeyMap = {};
        for (const key of keys)
            splitKeyMap[key] = key.toUpperCase().split(/[/\\]/);
        // Sort paths as a depth-first case-insensitive alphabetical subdirectory walk, followed by
        // all files sorted case-insensitive alphabetically once a subdir has been processed, e.g.
        //  * a/some.js
        //  * b/subdir1/z/z/z/nested_file.js
        //  * b/subdir1/file.js
        //  * b/subdir2/first.js
        //  * b/subdir2/second.js
        //  * b/some_file.js
        //  * root_file1.js
        //  * root_file2.js
        return keys.sort((keyA, keyB) => {
            const listA = splitKeyMap[keyA];
            const listB = splitKeyMap[keyB];
            if (listA === undefined || listB === undefined)
                throw new _not_reached__WEBPACK_IMPORTED_MODULE_1__/* .UnreachableCode */ .O();
            const maxLen = Math.max(listA.length, listB.length);
            for (let idx = 0; idx < maxLen; ++idx) {
                const entryA = listA[idx];
                const entryB = listB[idx];
                // In practice, there's always at least one entry.
                if (entryA === undefined || entryB === undefined)
                    throw new _not_reached__WEBPACK_IMPORTED_MODULE_1__/* .UnreachableCode */ .O();
                // If both subdirectories or both files, then compare names.
                const isLastA = listA.length - 1 === idx;
                const isLastB = listB.length - 1 === idx;
                if (isLastA && isLastB) {
                    // If both last, then this is a filename comparison.
                    // First, compare filename without extension.
                    const fileA = entryA.replace(/\.[^\.]*$/, '');
                    const fileB = entryB.replace(/\.[^\.]*$/, '');
                    const filenameOnlyDiff = fileA.localeCompare(fileB);
                    if (filenameOnlyDiff)
                        return filenameOnlyDiff;
                    // Second, compare including the extension.
                    // Always return something here, see note below.
                    return entryA.localeCompare(entryB);
                }
                else if (!isLastA && !isLastB) {
                    // If both not last, this is a subdirectory comparison.
                    const diff = entryA.localeCompare(entryB);
                    if (diff)
                        return diff;
                }
                // At this point, if idx is the final for each, we would have returned above.
                // So, check if either a or b is at the final entry in splitKeyMap.
                // If so, then there's a mismatch in number of directories, and we know one
                // the one with a filename should be sorted last.
                if (listA.length - 1 <= idx) {
                    // a has fewer subdirectories, so should be sorted last.
                    return 1;
                }
                if (listB.length - 1 <= idx) {
                    // a has more subdirectories, so should be sorted first.
                    return -1;
                }
            }
            return 0;
        });
    }
    // Given a set of paths, an overlayName, and an extension, return all paths with
    // that extension that have `overlayName` either as their entire filename (no subdir)
    // or are inside a root-level subdirectory named `overlayName`/  The extension should
    // include the period separator, e.g. ".js".  All comparisons are case insensitive.
    filterUserFiles(paths, origOverlayName, origExtension) {
        const extension = origExtension.toLowerCase();
        const overlayName = origOverlayName.toLowerCase();
        return paths.filter((origPath) => {
            const path = origPath.toLowerCase();
            if (!path.endsWith(extension))
                return false;
            if (path === `${overlayName}${extension}`)
                return true;
            if (path.startsWith(`${overlayName}/`) || path.startsWith(`${overlayName}\\`))
                return true;
            return false;
        });
    }
    getUserConfigLocation(overlayName, options, callback) {
        let currentlyReloading = false;
        const reloadOnce = () => {
            if (currentlyReloading)
                return;
            currentlyReloading = true;
            window.location.reload();
        };
        (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__/* .addOverlayListener */ .M9)('onUserFileChanged', () => {
            reloadOnce();
        });
        (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__/* .addOverlayListener */ .M9)('onForceReload', () => {
            reloadOnce();
        });
        this.loadUserFiles(overlayName, options, callback);
    }
    loadUserFiles(overlayName, options, callback, loadCss = true) {
        const readOptions = (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__/* .callOverlayHandler */ .tK)({
            call: 'cactbotLoadData',
            overlay: 'options',
        });
        const loadUser = async (e) => {
            // The basePath isn't using for anything other than cosmetic printing of full paths,
            // so replace any slashes here for uniformity.  In case anybody is using cactbot on
            // Linux (?!?), support any style of slashes elsewhere.
            const basePath = `${e.detail.userLocation.replace(/[/\\]*$/, '')}\\`;
            const localFiles = e.detail.localUserFiles;
            options.SystemInfo = {
                cactbotVersion: e.detail.cactbotVersion,
                overlayPluginVersion: e.detail.overlayPluginVersion,
                ffxivPluginVersion: e.detail.ffxivPluginVersion,
                actVersion: e.detail.actVersion,
                gameRegion: e.detail.gameRegion,
            };
            // The plugin auto-detects the language, so set this first.
            // If options files want to override it, they can for testing.
            // Backward compatibility (language is now separated to three types.)
            /* eslint-disable deprecation/deprecation */
            if (e.detail.language) {
                options.ParserLanguage = e.detail.language;
                options.ShortLocale = e.detail.language;
                options.DisplayLanguage = e.detail.language;
            }
            /* eslint-enable deprecation/deprecation */
            // Parser Language
            if (e.detail.parserLanguage) {
                options.ParserLanguage = e.detail.parserLanguage;
                // Backward compatibility, everything "Language" should be changed to "ParserLanguage"
                options.Language = e.detail.parserLanguage;
            }
            // System Language
            if (e.detail.systemLocale) {
                options.SystemLocale = e.detail.systemLocale;
                let shortLocale = e.detail.systemLocale.slice(0, 2);
                if (shortLocale === 'zh')
                    shortLocale = 'cn';
                if ((0,_languages__WEBPACK_IMPORTED_MODULE_0__/* .isLang */ .Hf)(shortLocale))
                    options.ShortLocale = shortLocale;
                else
                    options.ShortLocale = options.ParserLanguage;
            }
            // User's setting Language
            const displayLang = e.detail.displayLanguage;
            if ((0,_languages__WEBPACK_IMPORTED_MODULE_0__/* .isLang */ .Hf)(displayLang))
                options.DisplayLanguage = displayLang;
            else
                options.DisplayLanguage = options.ParserLanguage || 'en';
            // TODO: left for now as backwards compatibility with user css.  Remove this later??
            document.documentElement.classList.add(`lang-${options.DisplayLanguage}`);
            document.documentElement.lang = (0,_languages__WEBPACK_IMPORTED_MODULE_0__/* .langToLocale */ .yJ)(options.DisplayLanguage);
            this.addUnlockText(options.DisplayLanguage);
            // Handle processOptions after default language selection above,
            // but before css below which may load skin files.
            // processOptions needs to be called whether or not there are
            // any userOptions saved, as it sets up the defaults.
            this.savedConfig = (await readOptions)?.data ?? {};
            const template = this.optionTemplates[overlayName];
            if (template !== undefined) {
                const savedConfig = this.savedConfig[overlayName] ?? {};
                this.processOptions(options, options, savedConfig, template.options);
                // For things like raidboss that build extra UI, also give them a chance
                // to handle anything that has been set on that UI.
                if (template.processExtraOptions)
                    template.processExtraOptions(options, savedConfig);
            }
            // If the overlay has a "Debug" setting, set to true via the config tool,
            // then also print out user files that have been loaded.
            const debug = options.Debug !== undefined && options.Debug !== false;
            const printUserFile = debug ? (x) => console.log(x) : () => { };
            // With user files being arbitrary javascript, and having multiple files
            // in user folders, it's possible for later files to accidentally remove
            // things that previous files have added.  Warn about this, since most
            // users are not programmers.
            const warnOnVariableResetMap = {
                raidboss: [
                    'Triggers',
                ],
            };
            warnOnVariableResetMap[overlayName] = warnOnVariableResetMap[overlayName] || [];
            // The values of each `warnOnVariableResetMap` field are initially set
            // after the first file, so that if there is only one file, there are
            // not any warnings.
            // The fields that a user file sets in Options can be anything (pun not intended)
            // and so we use `any` here.  The only operation done on this field is a !==
            // for change detection to see if the the user file has modified it.
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            const variableTracker = {};
            if (localFiles) {
                // localFiles may be null if there is no valid user directory.
                const sortedFiles = this.sortUserFiles(Object.keys(localFiles));
                const jsFiles = this.filterUserFiles(sortedFiles, overlayName, '.js');
                const cssFiles = loadCss ? this.filterUserFiles(sortedFiles, overlayName, '.css') : [];
                for (const jsFile of jsFiles) {
                    try {
                        printUserFile(`local user file: ${basePath}${jsFile}`);
                        this.evalUserFile(localFiles[jsFile] ?? '', options);
                        for (const field of warnOnVariableResetMap[overlayName] ?? []) {
                            const value = variableTracker[field];
                            if (value !== null && value !== undefined && value !== options[field]) {
                                // Ideally users should do something like `Options.Triggers.push([etc]);`
                                // instead of `Options.Triggers = [etc];`
                                console.log(`*** WARNING: ${basePath}${jsFile} overwrites Options.${field} from previous files.`);
                            }
                            variableTracker[field] = options[field];
                        }
                        this.userFileCallbacks[overlayName]?.(jsFile, localFiles, options, basePath);
                    }
                    catch (e) {
                        // Be very visible for users.
                        console.log('*** ERROR IN USER FILE ***');
                        console.log(e);
                    }
                }
                // This is a bit awkward to handle skin settings here, but
                // doing it after user config files and before user css files
                // allows user css to override skin-specific css as well.
                if (options.Skin !== undefined)
                    this.handleSkin(options.Skin);
                for (const cssFile of cssFiles) {
                    printUserFile(`local user file: ${basePath}${cssFile}`);
                    const userCssText = document.createElement('style');
                    const contents = localFiles[cssFile];
                    if (contents !== undefined)
                        userCssText.innerText = contents;
                    const head = document.getElementsByTagName('head')[0];
                    if (head)
                        head.appendChild(userCssText);
                }
            }
            // Post this callback so that the js and css can be executed first.
            callback();
            void (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__/* .callOverlayHandler */ .tK)({ call: 'cactbotRequestState' });
        };
        void (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__/* .callOverlayHandler */ .tK)({
            call: 'cactbotLoadUser',
            source: location.href,
            overlayName: overlayName,
        }).then((e) => {
            // Wait for DOMContentLoaded if needed.
            if (document.readyState !== 'loading') {
                void loadUser(e);
                return;
            }
            document.addEventListener('DOMContentLoaded', () => {
                void loadUser(e);
            });
        });
    }
    handleSkin(skinName) {
        if (!skinName || skinName === 'default')
            return;
        const skinCSSRelativeHref = `skins/${skinName}/${skinName}.css`;
        this.appendCSSLink(skinCSSRelativeHref);
    }
    appendJSLink(src) {
        const userJS = document.createElement('script');
        userJS.setAttribute('type', 'text/javascript');
        userJS.setAttribute('src', src);
        userJS.setAttribute('async', 'false');
        const head = document.getElementsByTagName('head')[0];
        if (head)
            head.appendChild(userJS);
    }
    appendCSSLink(href) {
        const userCSS = document.createElement('link');
        userCSS.setAttribute('rel', 'stylesheet');
        userCSS.setAttribute('type', 'text/css');
        userCSS.setAttribute('href', href);
        const head = document.getElementsByTagName('head')[0];
        if (head)
            head.appendChild(userCSS);
    }
    processOptions(options, output, savedConfig, templateOptions) {
        // Take options from the template, find them in savedConfig,
        // and apply them to options. This also handles setting
        // defaults for anything in the template, even if it does not
        // exist in savedConfig.
        // Not all overlays have option templates.
        if (templateOptions === undefined)
            return;
        for (const opt of templateOptions) {
            // Grab the saved value or the default to set in options.
            let value;
            if (typeof opt.default === 'function')
                value = opt.default(options);
            else
                value = opt.default;
            let isDefault = true;
            if (typeof savedConfig === 'object' && !Array.isArray(savedConfig)) {
                if (opt.id in savedConfig) {
                    const newValue = savedConfig[opt.id];
                    // Empty strings are always treated as default values.
                    // This means that the user has entered something and then cleared it.
                    if (newValue !== undefined && newValue !== '') {
                        value = newValue;
                        isDefault = false;
                    }
                }
            }
            // Options can provide custom logic to turn a value into options settings.
            // If this doesn't exist, just set the value directly.
            // Option template ids are identical to field names on Options.
            if (opt.setterFunc) {
                const setValue = opt.setterFunc(value, options, isDefault);
                if (setValue !== undefined)
                    output[opt.id] = setValue;
            }
            else if (opt.type === 'integer') {
                if (typeof value === 'number')
                    output[opt.id] = Math.floor(value);
                else if (typeof value === 'string')
                    output[opt.id] = parseInt(value);
            }
            else if (opt.type === 'float') {
                if (typeof value === 'number')
                    output[opt.id] = value;
                else if (typeof value === 'string')
                    output[opt.id] = parseFloat(value);
            }
            else {
                output[opt.id] = value;
            }
        }
    }
    addUnlockText(lang) {
        const unlockText = {
            en: '🔓 Unlocked (lock overlay before using)',
            de: '🔓 Entsperrt (Sperre das Overlay vor der Nutzung)',
            fr: '🔓 Débloqué (Bloquez l\'overlay avant utilisation)',
            ja: '🔓 ロック解除 (オーバーレイを使用する前にロックしてください)',
            cn: '🔓 已解除锁定 (你需要将此悬浮窗锁定后方可使用)',
            ko: '🔓 위치 잠금 해제됨 (사용하기 전에 위치 잠금을 설정하세요)',
        };
        const id = 'cactbot-unlocked-text';
        let textElem = document.getElementById(id);
        if (!textElem) {
            textElem = document.createElement('div');
            textElem.id = id;
            textElem.classList.add('text');
            // Set element display to none in case the page has not included defaults.css.
            textElem.style.display = 'none';
            document.body.append(textElem);
        }
        textElem.innerHTML = unlockText[lang] || unlockText['en'];
    }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new UserConfig());
if (typeof document !== 'undefined') {
    // This event comes early and is not cached, so set up event listener immediately.
    document.addEventListener('onOverlayStateUpdate', (e) => {
        const docClassList = document.documentElement.classList;
        if (e.detail.isLocked)
            docClassList.remove('resize-handle', 'unlocked');
        else
            docClassList.add('resize-handle', 'unlocked');
    });
}
//# sourceMappingURL=user_config.js.map

/***/ }),

/***/ 268:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   H: () => (/* binding */ Directions)
/* harmony export */ });
/* harmony import */ var _netregexes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(702);
/* harmony import */ var _outputs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(468);
/* harmony import */ var _overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(181);



// TODO: it'd be nice to not repeat job names, but at least Record enforces that all are set.
const nameToJobEnum = {
    NONE: 0,
    GLA: 1,
    PGL: 2,
    MRD: 3,
    LNC: 4,
    ARC: 5,
    CNJ: 6,
    THM: 7,
    CRP: 8,
    BSM: 9,
    ARM: 10,
    GSM: 11,
    LTW: 12,
    WVR: 13,
    ALC: 14,
    CUL: 15,
    MIN: 16,
    BTN: 17,
    FSH: 18,
    PLD: 19,
    MNK: 20,
    WAR: 21,
    DRG: 22,
    BRD: 23,
    WHM: 24,
    BLM: 25,
    ACN: 26,
    SMN: 27,
    SCH: 28,
    ROG: 29,
    NIN: 30,
    MCH: 31,
    DRK: 32,
    AST: 33,
    SAM: 34,
    RDM: 35,
    BLU: 36,
    GNB: 37,
    DNC: 38,
    RPR: 39,
    SGE: 40,
    VPR: 41,
    PCT: 42,
};
const allJobs = Object.keys(nameToJobEnum);
const allRoles = ['tank', 'healer', 'dps', 'crafter', 'gatherer', 'none'];
const tankJobs = ['GLA', 'PLD', 'MRD', 'WAR', 'DRK', 'GNB'];
const healerJobs = ['CNJ', 'WHM', 'SCH', 'AST', 'SGE'];
const meleeDpsJobs = ['PGL', 'MNK', 'LNC', 'DRG', 'ROG', 'NIN', 'SAM', 'RPR', 'VPR'];
const rangedDpsJobs = ['ARC', 'BRD', 'DNC', 'MCH'];
const casterDpsJobs = ['BLU', 'RDM', 'BLM', 'SMN', 'ACN', 'THM', 'PCT'];
const dpsJobs = [...meleeDpsJobs, ...rangedDpsJobs, ...casterDpsJobs];
const craftingJobs = ['CRP', 'BSM', 'ARM', 'GSM', 'LTW', 'WVR', 'ALC', 'CUL'];
const gatheringJobs = ['MIN', 'BTN', 'FSH'];
const stunJobs = ['BLU', ...tankJobs, ...meleeDpsJobs];
const silenceJobs = ['BLU', ...tankJobs, ...rangedDpsJobs];
const sleepJobs = [...casterDpsJobs, ...healerJobs];
const feintJobs = [...meleeDpsJobs];
const addleJobs = [...casterDpsJobs];
const cleanseJobs = ['BLU', 'BRD', ...healerJobs];
const jobToRoleMap = (() => {
    const addToMap = (map, jobs, role) => {
        jobs.forEach((job) => map.set(job, role));
    };
    const map = new Map([['NONE', 'none']]);
    addToMap(map, tankJobs, 'tank');
    addToMap(map, healerJobs, 'healer');
    addToMap(map, dpsJobs, 'dps');
    addToMap(map, craftingJobs, 'crafter');
    addToMap(map, gatheringJobs, 'gatherer');
    return map;
})();
const watchCombatantMap = [];
const shouldCancelWatch = (params, entry) => {
    if (entry.cancel)
        return true;
    if (params.maxDuration !== undefined && Date.now() - entry.start > params.maxDuration)
        return true;
    return false;
};
const defaultWatchCombatant = (params, func) => {
    return new Promise((res, rej) => {
        const delay = params.delay ?? 1000;
        const call = {
            call: 'getCombatants',
        };
        if (params.ids)
            call.ids = params.ids;
        if (params.names)
            call.names = params.names;
        if (params.props)
            call.props = params.props;
        const entry = {
            cancel: false,
            start: Date.now(),
        };
        watchCombatantMap.push(entry);
        const checkFunc = () => {
            if (shouldCancelWatch(params, entry)) {
                rej(new Error('cancelled'));
                return;
            }
            void (0,_overlay_plugin_api__WEBPACK_IMPORTED_MODULE_2__/* .callOverlayHandler */ .tK)(call).then((response) => {
                if (entry.cancel) {
                    rej(new Error('was cancelled'));
                    return;
                }
                if (func(response))
                    res();
                else
                    window.setTimeout(checkFunc, delay);
            });
        };
        window.setTimeout(checkFunc, delay);
    });
};
let watchCombatantOverride;
let clearCombatantsOverride;
const defaultClearCombatants = () => {
    while (watchCombatantMap.length > 0) {
        const watch = watchCombatantMap.pop();
        if (watch)
            watch.cancel = true;
    }
};
const watchCombatant = (params, func) => {
    if (watchCombatantOverride)
        return watchCombatantOverride(params, func);
    return defaultWatchCombatant(params, func);
};
const output8Dir = [
    'dirN',
    'dirNE',
    'dirE',
    'dirSE',
    'dirS',
    'dirSW',
    'dirW',
    'dirNW',
];
const output16Dir = [
    'dirN',
    'dirNNE',
    'dirNE',
    'dirENE',
    'dirE',
    'dirESE',
    'dirSE',
    'dirSSE',
    'dirS',
    'dirSSW',
    'dirSW',
    'dirWSW',
    'dirW',
    'dirWNW',
    'dirNW',
    'dirNNW',
];
const outputCardinalDir = ['dirN', 'dirE', 'dirS', 'dirW'];
const outputIntercardDir = ['dirNE', 'dirSE', 'dirSW', 'dirNW'];
const outputStrings16Dir = {
    dirN: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirN,
    dirNNE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirNNE,
    dirNE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirNE,
    dirENE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirENE,
    dirE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirE,
    dirESE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirESE,
    dirSE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirSE,
    dirSSE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirSSE,
    dirS: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirS,
    dirSSW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirSSW,
    dirSW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirSW,
    dirWSW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirWSW,
    dirW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirW,
    dirWNW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirWNW,
    dirNW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirNW,
    dirNNW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirNNW,
    unknown: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.unknown,
};
const outputStrings8Dir = {
    dirN: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirN,
    dirNE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirNE,
    dirE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirE,
    dirSE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirSE,
    dirS: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirS,
    dirSW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirSW,
    dirW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirW,
    dirNW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirNW,
    unknown: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.unknown,
};
const outputStringsCardinalDir = {
    dirN: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirN,
    dirE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirE,
    dirS: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirS,
    dirW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirW,
    unknown: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.unknown,
};
const outputStringsIntercardDir = {
    dirNE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirNE,
    dirSE: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirSE,
    dirSW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirSW,
    dirNW: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.dirNW,
    unknown: _outputs__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .A.unknown,
};
// TODO: Accept 'north' as a function input and adjust output accordingly.
// E.g. Math.round((north + 4) - 4 * Math.atan2(x, y) / Math.PI) % 8;
// Will need to adjust the output arrays as well though.
const xyTo16DirNum = (x, y, centerX, centerY) => {
    // N = 0, NNE = 1, ..., NNW = 15
    x = x - centerX;
    y = y - centerY;
    return Math.round(8 - 8 * Math.atan2(x, y) / Math.PI) % 16;
};
const xyTo8DirNum = (x, y, centerX, centerY) => {
    // N = 0, NE = 1, ..., NW = 7
    x = x - centerX;
    y = y - centerY;
    return Math.round(4 - 4 * Math.atan2(x, y) / Math.PI) % 8;
};
const xyTo4DirNum = (x, y, centerX, centerY) => {
    // N = 0, E = 1, S = 2, W = 3
    x = x - centerX;
    y = y - centerY;
    return Math.round(2 - 2 * Math.atan2(x, y) / Math.PI) % 4;
};
const xyTo4DirIntercardNum = (x, y, centerX, centerY) => {
    // NE = 0, SE = 1, SW = 2, NW = 3
    x = x - centerX;
    y = y - centerY;
    return Math.round(2 - 2 * ((Math.PI / 4) + Math.atan2(x, y)) / Math.PI) % 4;
};
const hdgTo8DirNum = (heading) => {
    // N = 0, NE = 1, ..., NW = 7
    return (Math.round(4 - 4 * heading / Math.PI) % 8 + 8) % 8;
};
const hdgTo4DirNum = (heading) => {
    // N = 0, E = 1, S = 2, W = 3
    return (Math.round(2 - heading * 2 / Math.PI) % 4 + 4) % 4;
};
const outputFrom8DirNum = (dirNum) => {
    return output8Dir[dirNum] ?? 'unknown';
};
const outputFromCardinalNum = (dirNum) => {
    return outputCardinalDir[dirNum] ?? 'unknown';
};
const outputFromIntercardNum = (dirNum) => {
    return outputIntercardDir[dirNum] ?? 'unknown';
};
const Directions = {
    output8Dir: output8Dir,
    output16Dir: output16Dir,
    outputCardinalDir: outputCardinalDir,
    outputIntercardDir: outputIntercardDir,
    outputStrings16Dir: outputStrings16Dir,
    outputStrings8Dir: outputStrings8Dir,
    outputStringsCardinalDir: outputStringsCardinalDir,
    outputStringsIntercardDir: outputStringsIntercardDir,
    xyTo16DirNum: xyTo16DirNum,
    xyTo8DirNum: xyTo8DirNum,
    xyTo4DirNum: xyTo4DirNum,
    hdgTo8DirNum: hdgTo8DirNum,
    hdgTo4DirNum: hdgTo4DirNum,
    outputFrom8DirNum: outputFrom8DirNum,
    outputFromCardinalNum: outputFromCardinalNum,
    combatantStatePosTo8Dir: (combatant, centerX, centerY) => {
        return xyTo8DirNum(combatant.PosX, combatant.PosY, centerX, centerY);
    },
    combatantStatePosTo8DirOutput: (combatant, centerX, centerY) => {
        const dirNum = xyTo8DirNum(combatant.PosX, combatant.PosY, centerX, centerY);
        return outputFrom8DirNum(dirNum);
    },
    combatantStateHdgTo8Dir: (combatant) => {
        return hdgTo8DirNum(combatant.Heading);
    },
    combatantStateHdgTo8DirOutput: (combatant) => {
        const dirNum = hdgTo8DirNum(combatant.Heading);
        return outputFrom8DirNum(dirNum);
    },
    addedCombatantPosTo8Dir: (combatant, centerX, centerY) => {
        const x = parseFloat(combatant.x);
        const y = parseFloat(combatant.y);
        return xyTo8DirNum(x, y, centerX, centerY);
    },
    addedCombatantPosTo8DirOutput: (combatant, centerX, centerY) => {
        const x = parseFloat(combatant.x);
        const y = parseFloat(combatant.y);
        const dirNum = xyTo8DirNum(x, y, centerX, centerY);
        return outputFrom8DirNum(dirNum);
    },
    addedCombatantHdgTo8Dir: (combatant) => {
        const heading = parseFloat(combatant.heading);
        return hdgTo8DirNum(heading);
    },
    addedCombatantHdgTo8DirOutput: (combatant) => {
        const heading = parseFloat(combatant.heading);
        const dirNum = hdgTo8DirNum(heading);
        return outputFrom8DirNum(dirNum);
    },
    xyTo8DirOutput: (x, y, centerX, centerY) => {
        const dirNum = xyTo8DirNum(x, y, centerX, centerY);
        return outputFrom8DirNum(dirNum);
    },
    xyToCardinalDirOutput: (x, y, centerX, centerY) => {
        const dirNum = xyTo4DirNum(x, y, centerX, centerY);
        return outputFromCardinalNum(dirNum);
    },
    xyToIntercardDirOutput: (x, y, centerX, centerY) => {
        const dirNum = xyTo4DirIntercardNum(x, y, centerX, centerY);
        return outputFromIntercardNum(dirNum);
    },
};
const Util = {
    jobEnumToJob: (id) => {
        const job = allJobs.find((job) => nameToJobEnum[job] === id);
        return job ?? 'NONE';
    },
    jobToJobEnum: (job) => nameToJobEnum[job],
    jobToRole: (job) => {
        const role = jobToRoleMap.get(job);
        return role ?? 'none';
    },
    getAllRoles: () => allRoles,
    isTankJob: (job) => tankJobs.includes(job),
    isHealerJob: (job) => healerJobs.includes(job),
    isMeleeDpsJob: (job) => meleeDpsJobs.includes(job),
    isRangedDpsJob: (job) => rangedDpsJobs.includes(job),
    isCasterDpsJob: (job) => casterDpsJobs.includes(job),
    isDpsJob: (job) => dpsJobs.includes(job),
    isCraftingJob: (job) => craftingJobs.includes(job),
    isGatheringJob: (job) => gatheringJobs.includes(job),
    isCombatJob: (job) => {
        return !craftingJobs.includes(job) && !gatheringJobs.includes(job);
    },
    canStun: (job) => stunJobs.includes(job),
    canSilence: (job) => silenceJobs.includes(job),
    canSleep: (job) => sleepJobs.includes(job),
    canCleanse: (job) => cleanseJobs.includes(job),
    canFeint: (job) => feintJobs.includes(job),
    canAddle: (job) => addleJobs.includes(job),
    watchCombatant: watchCombatant,
    clearWatchCombatants: () => {
        if (clearCombatantsOverride !== undefined)
            clearCombatantsOverride();
        else
            defaultClearCombatants();
    },
    setWatchCombatantOverride: (watchFunc, clearFunc) => {
        watchCombatantOverride = watchFunc;
        clearCombatantsOverride = clearFunc;
    },
    gameLogCodes: _netregexes__WEBPACK_IMPORTED_MODULE_0__/* .gameLogCodes */ .RJ,
    actorControlType: _netregexes__WEBPACK_IMPORTED_MODULE_0__/* .actorControlType */ .bU,
    shortName: (name, playerNicks) => {
        // TODO: make this unique among the party in case of first name collisions.
        if (typeof name !== 'string') {
            if (typeof name !== 'undefined')
                console.error('called ShortNamify with non-string');
            return '???';
        }
        const nick = playerNicks[name];
        if (nick !== undefined)
            return nick;
        const idx = name.indexOf(' ');
        return idx < 0 ? name : name.slice(0, idx);
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Util);
//# sourceMappingURL=util.js.map

/***/ }),

/***/ 660:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Auto-generated from gen_zone_id_and_info.ts
// DO NOT EDIT THIS FILE DIRECTLY
const data = {
    'ABloodyReunion': 560,
    'AFatherFirst': 1210,
    'AFrostyReception': 1010,
    'AHunterTrue': 1216,
    'APathUnveiled': 1015,
    'ARelicRebornTheChimera': 368,
    'ARelicRebornTheHydra': 369,
    'ARequiemForHeroes': 830,
    'ASleepDisturbed': 914,
    'ASpectacleForTheAges': 533,
    'AacLightHeavyweightM1': 1225,
    'AacLightHeavyweightM1Savage': 1226,
    'AacLightHeavyweightM2': 1227,
    'AacLightHeavyweightM2Savage': 1228,
    'AacLightHeavyweightM3': 1229,
    'AacLightHeavyweightM3Savage': 1230,
    'AacLightHeavyweightM4': 1231,
    'AacLightHeavyweightM4Savage': 1232,
    'AbyssosTheEighthCircle': 1087,
    'AbyssosTheEighthCircleSavage': 1088,
    'AbyssosTheFifthCircle': 1081,
    'AbyssosTheFifthCircleSavage': 1082,
    'AbyssosTheSeventhCircle': 1085,
    'AbyssosTheSeventhCircleSavage': 1086,
    'AbyssosTheSixthCircle': 1083,
    'AbyssosTheSixthCircleSavage': 1084,
    'AccrueEnmityFromMultipleTargets': 540,
    'Aglaia': 1054,
    'AirForceOne': 832,
    'AkadaemiaAnyder': 841,
    'AlaMhigo': 1146,
    'AlaMhigo63': 689,
    'AlexanderTheArmOfTheFather': 444,
    'AlexanderTheArmOfTheFatherSavage': 451,
    'AlexanderTheArmOfTheSon': 522,
    'AlexanderTheArmOfTheSonSavage': 531,
    'AlexanderTheBreathOfTheCreator': 581,
    'AlexanderTheBreathOfTheCreatorSavage': 585,
    'AlexanderTheBurdenOfTheFather': 445,
    'AlexanderTheBurdenOfTheFatherSavage': 452,
    'AlexanderTheBurdenOfTheSon': 523,
    'AlexanderTheBurdenOfTheSonSavage': 532,
    'AlexanderTheCuffOfTheFather': 443,
    'AlexanderTheCuffOfTheFatherSavage': 450,
    'AlexanderTheCuffOfTheSon': 521,
    'AlexanderTheCuffOfTheSonSavage': 530,
    'AlexanderTheEyesOfTheCreator': 580,
    'AlexanderTheEyesOfTheCreatorSavage': 584,
    'AlexanderTheFistOfTheFather': 442,
    'AlexanderTheFistOfTheFatherSavage': 449,
    'AlexanderTheFistOfTheSon': 520,
    'AlexanderTheFistOfTheSonSavage': 529,
    'AlexanderTheHeartOfTheCreator': 582,
    'AlexanderTheHeartOfTheCreatorSavage': 586,
    'AlexanderTheSoulOfTheCreator': 583,
    'AlexanderTheSoulOfTheCreatorSavage': 587,
    'Alexandria': 1199,
    'AllsWellThatEndsInTheWell': 220,
    'AloaloIsland': 1176,
    'AlphascapeV10': 798,
    'AlphascapeV10Savage': 802,
    'AlphascapeV20': 799,
    'AlphascapeV20Savage': 803,
    'AlphascapeV30': 800,
    'AlphascapeV30Savage': 804,
    'AlphascapeV40': 801,
    'AlphascapeV40Savage': 805,
    'AlzadaalsLegacy': 1050,
    'Amaurot': 838,
    'AmdaporKeep': 167,
    'AmdaporKeepHard': 189,
    'AmhAraeng': 815,
    'AnAntidoteForAnarchy': 1215,
    'AnUnforeseenBargain': 1120,
    'AnabaseiosTheEleventhCircle': 1151,
    'AnabaseiosTheEleventhCircleSavage': 1152,
    'AnabaseiosTheNinthCircle': 1147,
    'AnabaseiosTheNinthCircleSavage': 1148,
    'AnabaseiosTheTenthCircle': 1149,
    'AnabaseiosTheTenthCircleSavage': 1150,
    'AnabaseiosTheTwelfthCircle': 1153,
    'AnabaseiosTheTwelfthCircleSavage': 1154,
    'AnamnesisAnyder': 898,
    'AnnoyTheVoid': 222,
    'AnotherAloaloIsland': 1179,
    'AnotherAloaloIslandSavage': 1180,
    'AnotherMountRokkon': 1155,
    'AnotherMountRokkonSavage': 1156,
    'AnotherSildihnSubterrane': 1075,
    'AnotherSildihnSubterraneSavage': 1076,
    'AsTheHeartBids': 894,
    'AsTheHeavensBurn': 1012,
    'AsphodelosTheFirstCircle': 1002,
    'AsphodelosTheFirstCircleSavage': 1003,
    'AsphodelosTheFourthCircle': 1008,
    'AsphodelosTheFourthCircleSavage': 1009,
    'AsphodelosTheSecondCircle': 1004,
    'AsphodelosTheSecondCircleSavage': 1005,
    'AsphodelosTheThirdCircle': 1006,
    'AsphodelosTheThirdCircleSavage': 1007,
    'AssistAlliesInDefeatingATarget': 544,
    'Astragalos': 729,
    'AvoidAreaOfEffectAttacks': 537,
    'AzysLla': 402,
    'BaelsarsWall': 1114,
    'BaelsarsWall62': 615,
    'BardamsMettle': 1143,
    'BardamsMettle63': 623,
    'BasicTrainingEnemyParties': 214,
    'BasicTrainingEnemyStrongholds': 215,
    'BattleInTheBigKeep': 396,
    'BattleOnTheBigBridge': 366,
    'BloodOnTheDeck': 708,
    'Blunderville': 1165,
    'BrayfloxsLongstop': 1041,
    'BrayfloxsLongstopHard': 362,
    'CapeWestwind': 1049,
    'CastrumAbania': 1145,
    'CastrumAbania63': 661,
    'CastrumFluminis': 778,
    'CastrumMarinum': 934,
    'CastrumMarinumExtreme': 935,
    'CastrumMeridianum': 1043,
    'CenoteJaJaGural': 1209,
    'CentralShroud': 148,
    'CentralThanalan': 141,
    'ChocoboRaceCostaDelSol': 389,
    'ChocoboRaceSagoliiRoad': 390,
    'ChocoboRaceTranquilPaths': 391,
    'ChocoboRaceTutorial': 417,
    'CinderDrift': 897,
    'CinderDriftExtreme': 912,
    'CoerthasCentralHighlands': 155,
    'CoerthasWesternHighlands': 397,
    'ComingClean': 860,
    'ContainmentBayP1T6': 576,
    'ContainmentBayP1T6Extreme': 577,
    'ContainmentBayP1T6Unreal': 1121,
    'ContainmentBayS1T7': 517,
    'ContainmentBayS1T7Extreme': 524,
    'ContainmentBayS1T7Unreal': 1090,
    'ContainmentBayZ1T9': 637,
    'ContainmentBayZ1T9Extreme': 638,
    'ContainmentBayZ1T9Unreal': 1157,
    'CopperbellMines': 1038,
    'CopperbellMinesHard': 349,
    'CrystallineConflictCustomMatchCloudNine': 1060,
    'CrystallineConflictCustomMatchTheClockworkCastletown': 1117,
    'CrystallineConflictCustomMatchThePalaistra': 1058,
    'CrystallineConflictCustomMatchTheRedSands': 1139,
    'CrystallineConflictCustomMatchTheVolcanicHeart': 1059,
    'CuriousGorgeMeetsHisMatch': 717,
    'CuttersCry': 170,
    'DarkAsTheNightSky': 713,
    'DeathUntoDawn': 977,
    'DefeatAnOccupiedTarget': 545,
    'DeltascapeV10': 691,
    'DeltascapeV10Savage': 695,
    'DeltascapeV20': 692,
    'DeltascapeV20Savage': 696,
    'DeltascapeV30': 693,
    'DeltascapeV30Savage': 697,
    'DeltascapeV40': 694,
    'DeltascapeV40Savage': 698,
    'DelubrumReginae': 936,
    'DelubrumReginaeSavage': 937,
    'Devastation': 1052,
    'DohnMheg': 821,
    'DomaCastle': 1144,
    'DomaCastle63': 660,
    'DragonSound': 714,
    'DragonsongsRepriseUltimate': 968,
    'DreamsOfANewDay': 1214,
    'DunScaith': 627,
    'DzemaelDarkhold': 171,
    'EastShroud': 152,
    'EasternLaNoscea': 137,
    'EasternThanalan': 145,
    'EdensGateDescent': 850,
    'EdensGateDescentSavage': 854,
    'EdensGateInundation': 851,
    'EdensGateInundationSavage': 855,
    'EdensGateResurrection': 849,
    'EdensGateResurrectionSavage': 853,
    'EdensGateSepulture': 852,
    'EdensGateSepultureSavage': 856,
    'EdensPromiseAnamorphosis': 944,
    'EdensPromiseAnamorphosisSavage': 948,
    'EdensPromiseEternity': 945,
    'EdensPromiseEternitySavage': 949,
    'EdensPromiseLitany': 943,
    'EdensPromiseLitanySavage': 947,
    'EdensPromiseUmbra': 942,
    'EdensPromiseUmbraSavage': 946,
    'EdensVerseFulmination': 902,
    'EdensVerseFulminationSavage': 906,
    'EdensVerseFuror': 903,
    'EdensVerseFurorSavage': 907,
    'EdensVerseIconoclasm': 904,
    'EdensVerseIconoclasmSavage': 908,
    'EdensVerseRefulgence': 905,
    'EdensVerseRefulgenceSavage': 909,
    'Elpis': 961,
    'Emanation': 719,
    'EmanationExtreme': 720,
    'EmissaryOfTheDawn': 769,
    'Endwalker': 1013,
    'EngageMultipleTargets': 541,
    'Eulmore': 820,
    'Euphrosyne': 1118,
    'EurekaOrthosFloors11_20': 1100,
    'EurekaOrthosFloors1_10': 1099,
    'EurekaOrthosFloors21_30': 1101,
    'EurekaOrthosFloors31_40': 1102,
    'EurekaOrthosFloors41_50': 1103,
    'EurekaOrthosFloors51_60': 1104,
    'EurekaOrthosFloors61_70': 1105,
    'EurekaOrthosFloors71_80': 1106,
    'EurekaOrthosFloors81_90': 1107,
    'EurekaOrthosFloors91_100': 1108,
    'EverMarchHeavensward': 1018,
    'Everkeep': 1200,
    'EverkeepExtreme': 1201,
    'ExecuteAComboInBattle': 539,
    'ExecuteAComboToIncreaseEnmity': 538,
    'ExecuteARangedAttackToIncreaseEnmity': 542,
    'FadedMemories': 932,
    'FangsOfTheViper': 1235,
    'FinalExercise': 552,
    'FitForAQueen': 955,
    'FlickingSticksAndTakingNames': 219,
    'ForlornGlory': 1051,
    'Foundation': 418,
    'FourPlayerMahjongQuickMatchKuitanDisabled': 831,
    'FuturesRewrittenUltimate': 1238,
    'Garlemald': 958,
    'GenerationalBonding': 1115,
    'Halatali': 1245,
    'Halatali70': 162,
    'HalataliHard': 360,
    'HaukkeManor': 1040,
    'HaukkeManorHard': 350,
    'HealAnAlly': 549,
    'HealMultipleAllies': 550,
    'HeavenOnHighFloors11_20': 771,
    'HeavenOnHighFloors1_10': 770,
    'HeavenOnHighFloors21_30': 772,
    'HeavenOnHighFloors31_40': 782,
    'HeavenOnHighFloors41_50': 773,
    'HeavenOnHighFloors51_60': 783,
    'HeavenOnHighFloors61_70': 774,
    'HeavenOnHighFloors71_80': 784,
    'HeavenOnHighFloors81_90': 775,
    'HeavenOnHighFloors91_100': 785,
    'HellsKier': 810,
    'HellsKierExtreme': 811,
    'HellsLid': 742,
    'HeritageFound': 1191,
    'HeroOnTheHalfShell': 216,
    'HeroesAndPretenders': 1218,
    'HiddenGorge': 791,
    'HolminsterSwitch': 837,
    'HullbreakerIsle': 361,
    'HullbreakerIsleHard': 557,
    'Idyllshire': 478,
    'Ihuykatumu': 1167,
    'IlMheg': 816,
    'InFromTheCold': 1011,
    'InThalsName': 705,
    'InteractWithTheBattlefield': 548,
    'InterdimensionalRift': 690,
    'ItsProbablyATrap': 665,
    'JeunoTheFirstWalk': 1248,
    'Kholusia': 814,
    'Kozamauka': 1188,
    'KtisisHyperboreia': 974,
    'Kugane': 628,
    'KuganeCastle': 662,
    'KuganeOhashi': 806,
    'Labyrinthos': 956,
    'LaidToRest': 1017,
    'Lakeland': 813,
    'LapisManalis': 1097,
    'LegendOfTheNotSoHiddenTemple': 859,
    'LifeEphemeralPathEternal': 1023,
    'LimsaLominsaLowerDecks': 129,
    'LimsaLominsaUpperDecks': 128,
    'LivingMemory': 1192,
    'LongLiveTheQueen': 298,
    'LovmMasterTournament': 506,
    'LovmPlayerBattleNonRp': 591,
    'LovmPlayerBattleRp': 589,
    'LovmTournament': 590,
    'LowerLaNoscea': 135,
    'MalikahsWell': 836,
    'MareLamentorum': 959,
    'MatchAll': null,
    'MatoyasRelict': 933,
    'MatsubaMayhem': 710,
    'MemoriaMiseraExtreme': 913,
    'MemoryOfEmbers': 1166,
    'MessengerOfTheWinds': 834,
    'MiddleLaNoscea': 134,
    'MindOverManor': 1233,
    'Mist': 136,
    'MorDhona': 156,
    'MoreThanAFeeler': 221,
    'MountOrdeals': 1095,
    'MountOrdealsExtreme': 1096,
    'MountRokkon': 1137,
    'MtGulg': 822,
    'Naadam': 688,
    'Neverreap': 420,
    'NewGridania': 132,
    'NorthShroud': 154,
    'NorthernThanalan': 147,
    'NyelbertsLament': 876,
    'OldGridania': 133,
    'OldSharlayan': 962,
    'OneLifeForOneWorld': 592,
    'OnsalHakairDanshigNaadam': 888,
    'Origenics': 1208,
    'OurCompromise': 716,
    'OurUnsungHeroes': 722,
    'OuterLaNoscea': 180,
    'Paglthan': 938,
    'PharosSirius': 160,
    'PharosSiriusHard': 510,
    'PullingPoisonPosies': 191,
    'RadzAtHan': 963,
    'RaisingTheSword': 706,
    'ReactToAdvancedVisualIndicators': 1129,
    'ReactToAttackMarkers': 1127,
    'ReactToFloorMarkers': 1128,
    'ReturnOfTheBull': 403,
    'RhalgrsReach': 635,
    'SagesFocus': 1022,
    'SaintMociannesArboretum': 511,
    'SaintMociannesArboretumHard': 788,
    'Sastasha': 1036,
    'SastashaHard': 387,
    'SealRockSeize': 431,
    'Shaaloani': 1190,
    'ShadowAndClaw': 223,
    'ShisuiOfTheVioletTides': 616,
    'SigmascapeV10': 748,
    'SigmascapeV10Savage': 752,
    'SigmascapeV20': 749,
    'SigmascapeV20Savage': 753,
    'SigmascapeV30': 750,
    'SigmascapeV30Savage': 754,
    'SigmascapeV40': 751,
    'SigmascapeV40Savage': 755,
    'Smileton': 976,
    'Snowcloak': 1062,
    'Snowcloak61': 371,
    'SohmAl': 1064,
    'SohmAl61': 441,
    'SohmAlHard': 617,
    'SohrKhai': 1112,
    'SohrKhai62': 555,
    'SolemnTrinity': 300,
    'SolutionNine': 1186,
    'SomewhereOnlySheKnows': 1234,
    'SouthShroud': 153,
    'SouthernThanalan': 146,
    'SpecialEventI': 353,
    'SpecialEventIi': 354,
    'StingingBack': 192,
    'StormsCrown': 1071,
    'StormsCrownExtreme': 1072,
    'SyrcusTower': 372,
    'TakingAStand': 1211,
    'TenderValley': 1203,
    'Thaleia': 1178,
    'Thavnair': 957,
    'TheAbyssalFracture': 1168,
    'TheAbyssalFractureExtreme': 1169,
    'TheAery': 1065,
    'TheAery61': 435,
    'TheAetherfont': 1126,
    'TheAetherochemicalResearchFacility': 1110,
    'TheAetherochemicalResearchFacility62': 438,
    'TheAitiascope': 978,
    'TheAkhAfahAmphitheatreExtreme': 378,
    'TheAkhAfahAmphitheatreHard': 377,
    'TheAkhAfahAmphitheatreUnreal': 930,
    'TheAntitower': 1111,
    'TheAntitower62': 516,
    'TheAquapolis': 558,
    'TheAurumVale': 172,
    'TheAzimSteppe': 622,
    'TheBattleOnBekko': 711,
    'TheBindingCoilOfBahamutTurn1': 241,
    'TheBindingCoilOfBahamutTurn2': 242,
    'TheBindingCoilOfBahamutTurn3': 243,
    'TheBindingCoilOfBahamutTurn4': 244,
    'TheBindingCoilOfBahamutTurn5': 245,
    'TheBorderlandRuinsSecure': 376,
    'TheBowlOfEmbers': 1045,
    'TheBowlOfEmbersExtreme': 295,
    'TheBowlOfEmbersHard': 292,
    'TheBozjaIncident': 911,
    'TheBozjanSouthernFront': 920,
    'TheBurn': 1173,
    'TheBurn64': 789,
    'TheCalamityRetold': 790,
    'TheCarteneauFlatsHeliodrome': 633,
    'TheChrysalis': 426,
    'TheChurningMists': 400,
    'TheClockworkCastletown': 1116,
    'TheCloudDeck': 950,
    'TheCloudDeckExtreme': 951,
    'TheCopiedFactory': 882,
    'TheCrownOfTheImmaculate': 846,
    'TheCrownOfTheImmaculateExtreme': 848,
    'TheCrystarium': 819,
    'TheDancingPlague': 845,
    'TheDancingPlagueExtreme': 858,
    'TheDarkInside': 992,
    'TheDeadEnds': 973,
    'TheDiadem': 929,
    'TheDiademEasy': 512,
    'TheDiademHard': 515,
    'TheDiademHuntingGrounds': 625,
    'TheDiademHuntingGroundsEasy': 624,
    'TheDiademTrialsOfTheFury': 630,
    'TheDiademTrialsOfTheMatron': 656,
    'TheDomanEnclave': 759,
    'TheDragonsNeck': 142,
    'TheDravanianForelands': 398,
    'TheDravanianHinterlands': 399,
    'TheDrownedCityOfSkalla': 1172,
    'TheDrownedCityOfSkalla64': 731,
    'TheDungeonsOfLyheGhiah': 879,
    'TheDuskVigil': 434,
    'TheDyingGasp': 847,
    'TheEpicOfAlexanderUltimate': 887,
    'TheExcitatron6000': 1000,
    'TheFaceOfTrueEvil': 709,
    'TheFeatOfTheBrotherhood': 1212,
    'TheFellCourtOfTroia': 1070,
    'TheFieldsOfGloryShatter': 554,
    'TheFinalCoilOfBahamutTurn1': 193,
    'TheFinalCoilOfBahamutTurn2': 194,
    'TheFinalCoilOfBahamutTurn3': 195,
    'TheFinalCoilOfBahamutTurn4': 196,
    'TheFinalDay': 997,
    'TheFinalStepsOfFaith': 559,
    'TheForbiddenLandEurekaAnemos': 732,
    'TheForbiddenLandEurekaHydatos': 827,
    'TheForbiddenLandEurekaPagos': 763,
    'TheForbiddenLandEurekaPyros': 795,
    'TheFractalContinuum': 430,
    'TheFractalContinuumHard': 743,
    'TheFringes': 612,
    'TheGameIsAfoot': 1177,
    'TheGhimlytDark': 1174,
    'TheGhimlytDark64': 793,
    'TheGiftOfMercy': 1019,
    'TheGildedAraya': 1136,
    'TheGrandCosmos': 884,
    'TheGreatGubalLibrary': 1109,
    'TheGreatGubalLibrary62': 416,
    'TheGreatGubalLibraryHard': 578,
    'TheGreatHunt': 761,
    'TheGreatHuntExtreme': 762,
    'TheGreatShipVylbrand': 954,
    'TheHardenedHeart': 873,
    'TheHarvestBegins': 1020,
    'TheHauntedManor': 571,
    'TheHeartOfTheProblem': 718,
    'TheHeroesGauntlet': 916,
    'TheHiddenCanalsOfUznair': 725,
    'TheHowlingEye': 1047,
    'TheHowlingEyeExtreme': 297,
    'TheHowlingEyeHard': 294,
    'TheHuntersLegacy': 875,
    'TheInterphos': 1202,
    'TheJadeStoa': 746,
    'TheJadeStoaExtreme': 758,
    'TheJadeStoaUnreal': 1239,
    'TheKeeperOfTheLake': 1063,
    'TheKeeperOfTheLake61': 150,
    'TheKillingArt': 1021,
    'TheLabyrinthOfTheAncients': 174,
    'TheLimitlessBlueExtreme': 447,
    'TheLimitlessBlueHard': 436,
    'TheLochs': 621,
    'TheLostAndTheFound': 874,
    'TheLostCanalsOfUznair': 712,
    'TheLostCityOfAmdapor': 363,
    'TheLostCityOfAmdaporHard': 519,
    'TheLunarSubterrane': 1164,
    'TheMaskedCarnivale': 796,
    'TheMightiestShield': 1217,
    'TheMinstrelsBalladEndsingersAria': 998,
    'TheMinstrelsBalladHadessElegy': 885,
    'TheMinstrelsBalladHydaelynsCall': 996,
    'TheMinstrelsBalladNidhoggsRage': 566,
    'TheMinstrelsBalladShinryusDomain': 730,
    'TheMinstrelsBalladSphenesBurden': 1243,
    'TheMinstrelsBalladThordansReign': 448,
    'TheMinstrelsBalladTsukuyomisPain': 779,
    'TheMinstrelsBalladUltimasBane': 348,
    'TheMinstrelsBalladZodiarksFall': 993,
    'TheMothercrystal': 995,
    'TheNavel': 1046,
    'TheNavelExtreme': 296,
    'TheNavelHard': 293,
    'TheNavelUnreal': 953,
    'TheOmegaProtocolUltimate': 1122,
    'TheOrbonneMonastery': 826,
    'TheOrphansAndTheBrokenBlade': 715,
    'ThePalaceOfTheDeadFloors101_110': 598,
    'ThePalaceOfTheDeadFloors111_120': 599,
    'ThePalaceOfTheDeadFloors11_20': 562,
    'ThePalaceOfTheDeadFloors121_130': 600,
    'ThePalaceOfTheDeadFloors131_140': 601,
    'ThePalaceOfTheDeadFloors141_150': 602,
    'ThePalaceOfTheDeadFloors151_160': 603,
    'ThePalaceOfTheDeadFloors161_170': 604,
    'ThePalaceOfTheDeadFloors171_180': 605,
    'ThePalaceOfTheDeadFloors181_190': 606,
    'ThePalaceOfTheDeadFloors191_200': 607,
    'ThePalaceOfTheDeadFloors1_10': 561,
    'ThePalaceOfTheDeadFloors21_30': 563,
    'ThePalaceOfTheDeadFloors31_40': 564,
    'ThePalaceOfTheDeadFloors41_50': 565,
    'ThePalaceOfTheDeadFloors51_60': 593,
    'ThePalaceOfTheDeadFloors61_70': 594,
    'ThePalaceOfTheDeadFloors71_80': 595,
    'ThePalaceOfTheDeadFloors81_90': 596,
    'ThePalaceOfTheDeadFloors91_100': 597,
    'ThePeaks': 620,
    'ThePhantomsFeast': 994,
    'ThePillars': 419,
    'ThePoolOfTribute': 674,
    'ThePoolOfTributeExtreme': 677,
    'ThePortaDecumana': 1048,
    'ThePraetorium': 1044,
    'TheProtectorAndTheDestroyer': 1213,
    'ThePuppetsBunker': 917,
    'TheQitanaRavel': 823,
    'TheRaktikaGreatwood': 817,
    'TheRedSands': 1138,
    'TheResonant': 684,
    'TheRidoranaLighthouse': 776,
    'TheRoyalCityOfRabanastre': 734,
    'TheRoyalMenagerie': 679,
    'TheRubySea': 613,
    'TheSeaOfClouds': 401,
    'TheSeatOfSacrifice': 922,
    'TheSeatOfSacrificeExtreme': 923,
    'TheSecondCoilOfBahamutSavageTurn1': 380,
    'TheSecondCoilOfBahamutSavageTurn2': 381,
    'TheSecondCoilOfBahamutSavageTurn3': 382,
    'TheSecondCoilOfBahamutSavageTurn4': 383,
    'TheSecondCoilOfBahamutTurn1': 355,
    'TheSecondCoilOfBahamutTurn2': 356,
    'TheSecondCoilOfBahamutTurn3': 357,
    'TheSecondCoilOfBahamutTurn4': 358,
    'TheShiftingAltarsOfUznair': 794,
    'TheShiftingGymnasionAgonon': 1123,
    'TheShiftingOubliettesOfLyheGhiah': 924,
    'TheSildihnSubterrane': 1069,
    'TheSingularityReactor': 437,
    'TheSingularityReactorUnreal': 1175,
    'TheSirensongSea': 1142,
    'TheSirensongSea63': 626,
    'TheSkydeepCenote': 1194,
    'TheStepsOfFaith': 1068,
    'TheStepsOfFaith61': 143,
    'TheStigmaDreamscape': 986,
    'TheStoneVigil': 1042,
    'TheStoneVigilHard': 365,
    'TheStrayboroughDeadwalk': 1204,
    'TheStrikingTreeExtreme': 375,
    'TheStrikingTreeHard': 374,
    'TheSunkenTempleOfQarn': 163,
    'TheSunkenTempleOfQarnHard': 367,
    'TheSwallowsCompass': 768,
    'TheTamTaraDeepcroft': 1037,
    'TheTamTaraDeepcroftHard': 373,
    'TheTempest': 818,
    'TheTempleOfTheFist': 663,
    'TheThousandMawsOfTotoRak': 1039,
    'TheTowerAtParadigmsBreach': 966,
    'TheTowerOfBabil': 969,
    'TheTowerOfZot': 952,
    'TheTripleTriadBattlehall': 579,
    'TheTwinning': 840,
    'TheUnendingCoilOfBahamutUltimate': 733,
    'TheValentionesCeremony': 741,
    'TheVault': 1066,
    'TheVault61': 421,
    'TheVoidArk': 508,
    'TheVoidcastDais': 1140,
    'TheVoidcastDaisExtreme': 1141,
    'TheWanderersPalace': 159,
    'TheWanderersPalaceHard': 188,
    'TheWarmthOfFamily': 1244,
    'TheWeaponsRefrainUltimate': 777,
    'TheWeepingCityOfMhach': 556,
    'TheWhorleaterExtreme': 359,
    'TheWhorleaterHard': 281,
    'TheWhorleaterUnreal': 972,
    'TheWillOfTheMoon': 797,
    'TheWorldOfDarkness': 151,
    'TheWreathOfSnakes': 824,
    'TheWreathOfSnakesExtreme': 825,
    'ThokAstThokExtreme': 446,
    'ThokAstThokHard': 432,
    'ThornmarchExtreme': 364,
    'ThornmarchHard': 1067,
    'ThornmarchHard61': 207,
    'ToCalmerSeas': 1016,
    'TripleTriadInvitationalParlor': 941,
    'TripleTriadOpenTournament': 940,
    'Tuliyollal': 1185,
    'UldahStepsOfNald': 130,
    'UldahStepsOfThal': 131,
    'UltimaThule': 960,
    'UltimasBaneUnreal': 1035,
    'UnderTheArmor': 190,
    'UpperLaNoscea': 139,
    'Urqopacha': 1187,
    'UrthsFount': 394,
    'Vanaspati': 970,
    'Vanguard': 1198,
    'VengeanceOfTheViper': 1236,
    'VowsOfVirtueDeedsOfCruelty': 893,
    'WardUp': 299,
    'WesternLaNoscea': 138,
    'WesternThanalan': 140,
    'WhenClansCollide': 723,
    'WhereEverythingBegins': 1091,
    'WithHeartAndSteel': 707,
    'WolvesDenPier': 250,
    'WorqorLarDor': 1195,
    'WorqorLarDorExtreme': 1196,
    'WorqorZormor': 1193,
    'WorthyOfHisBack': 1014,
    'Xelphatol': 1113,
    'Xelphatol62': 572,
    'YakTel': 1189,
    'Yanxia': 614,
    'YuweyawataFieldStation': 1242,
    'Zadnor': 975,
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);
//# sourceMappingURL=zone_id.js.map

/***/ }),

/***/ 53:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   A: () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Auto-generated from gen_zone_id_and_info.ts
// DO NOT EDIT THIS FILE DIRECTLY
const data = {
    128: {
        'exVersion': 0,
        'name': {
            'cn': '利姆萨·罗敏萨上层甲板',
            'de': 'Obere Decks',
            'en': 'Limsa Lominsa Upper Decks',
            'fr': 'Limsa Lominsa - Le Tillac',
            'ja': 'リムサ・ロミンサ：上甲板層',
            'ko': '림사 로민사 상층 갑판',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 14,
    },
    129: {
        'exVersion': 0,
        'name': {
            'cn': '利姆萨·罗敏萨下层甲板',
            'de': 'Untere Decks',
            'en': 'Limsa Lominsa Lower Decks',
            'fr': 'Limsa Lominsa - L\'Entrepont',
            'ja': 'リムサ・ロミンサ：下甲板層',
            'ko': '림사 로민사 하층 갑판',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 15,
    },
    130: {
        'exVersion': 0,
        'name': {
            'cn': '乌尔达哈现世回廊',
            'de': 'Nald-Kreuzgang',
            'en': 'Ul\'dah - Steps of Nald',
            'fr': 'Ul\'dah - Faubourg de Nald',
            'ja': 'ウルダハ：ナル回廊',
            'ko': '울다하 날 회랑',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 7,
    },
    131: {
        'exVersion': 0,
        'name': {
            'cn': '乌尔达哈来生回廊',
            'de': 'Thal-Kreuzgang',
            'en': 'Ul\'dah - Steps of Thal',
            'fr': 'Ul\'dah - Faubourg de Thal',
            'ja': 'ウルダハ：ザル回廊',
            'ko': '울다하 달 회랑',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 8,
    },
    132: {
        'exVersion': 0,
        'name': {
            'cn': '格里达尼亚新街',
            'de': 'Neu-Gridania',
            'en': 'New Gridania',
            'fr': 'Nouvelle Gridania',
            'ja': 'グリダニア：新市街',
            'ko': '그리다니아 신시가지',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 1,
    },
    133: {
        'exVersion': 0,
        'name': {
            'cn': '格里达尼亚旧街',
            'de': 'Alt-Gridania',
            'en': 'Old Gridania',
            'fr': 'Vieille Gridania',
            'ja': 'グリダニア：旧市街',
            'ko': '그리다니아 구시가지',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 2,
    },
    134: {
        'exVersion': 0,
        'name': {
            'cn': '中拉诺西亚',
            'de': 'Zentrales La Noscea',
            'en': 'Middle La Noscea',
            'fr': 'Noscea centrale',
            'ja': '中央ラノシア',
            'ko': '중부 라노시아',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 16,
    },
    135: {
        'exVersion': 0,
        'name': {
            'cn': '拉诺西亚低地',
            'de': 'Unteres La Noscea',
            'en': 'Lower La Noscea',
            'fr': 'Basse-Noscea',
            'ja': '低地ラノシア',
            'ko': '저지 라노시아',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 17,
    },
    136: {
        'exVersion': 0,
        'name': {
            'cn': '海雾村',
            'de': 'Dorf des Nebels',
            'en': 'Mist',
            'fr': 'Brumée',
            'ja': 'ミスト・ヴィレッジ',
            'ko': '안갯빛 마을',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 14,
    },
    137: {
        'exVersion': 0,
        'name': {
            'cn': '东拉诺西亚',
            'de': 'Östliches La Noscea',
            'en': 'Eastern La Noscea',
            'fr': 'Noscea orientale',
            'ja': '東ラノシア',
            'ko': '동부 라노시아',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 18,
    },
    138: {
        'exVersion': 0,
        'name': {
            'cn': '西拉诺西亚',
            'de': 'Westliches La Noscea',
            'en': 'Western La Noscea',
            'fr': 'Noscea occidentale',
            'ja': '西ラノシア',
            'ko': '서부 라노시아',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 19,
    },
    139: {
        'exVersion': 0,
        'name': {
            'cn': '拉诺西亚高地',
            'de': 'Oberes La Noscea',
            'en': 'Upper La Noscea',
            'fr': 'Haute-Noscea',
            'ja': '高地ラノシア',
            'ko': '고지 라노시아',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 20,
    },
    140: {
        'exVersion': 0,
        'name': {
            'cn': '西萨纳兰',
            'de': 'Westliches Thanalan',
            'en': 'Western Thanalan',
            'fr': 'Thanalan occidental',
            'ja': '西ザナラーン',
            'ko': '서부 다날란',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 9,
    },
    141: {
        'exVersion': 0,
        'name': {
            'cn': '中萨纳兰',
            'de': 'Zentrales Thanalan',
            'en': 'Central Thanalan',
            'fr': 'Thanalan central',
            'ja': '中央ザナラーン',
            'ko': '중부 다날란',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 10,
    },
    142: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '艾玛吉娜杯斗技大会决赛',
            'de': 'Das Drachenhals-Kolosseum',
            'en': 'The Dragon\'s Neck',
            'fr': 'Le Col du dragon',
            'ja': 'アマジナ杯闘技会決勝戦',
            'ko': '아마지나배 투기대회 결승전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    143: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '(6.1)皇都伊修加德保卫战',
            'de': '(6.1)Der Schicksalsweg',
            'en': '(6.1)The Steps of Faith',
            'fr': '(6.1)Le Siège de la sainte Cité d\'Ishgard',
            'ja': '(6.1)皇都イシュガルド防衛戦',
            'ko': '(6.1)성도 이슈가르드 방어전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    145: {
        'exVersion': 0,
        'name': {
            'cn': '东萨纳兰',
            'de': 'Östliches Thanalan',
            'en': 'Eastern Thanalan',
            'fr': 'Thanalan oriental',
            'ja': '東ザナラーン',
            'ko': '동부 다날란',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 11,
    },
    146: {
        'exVersion': 0,
        'name': {
            'cn': '南萨纳兰',
            'de': 'Südliches Thanalan',
            'en': 'Southern Thanalan',
            'fr': 'Thanalan méridional',
            'ja': '南ザナラーン',
            'ko': '남부 다날란',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 12,
    },
    147: {
        'exVersion': 0,
        'name': {
            'cn': '北萨纳兰',
            'de': 'Nördliches Thanalan',
            'en': 'Northern Thanalan',
            'fr': 'Thanalan septentrional',
            'ja': '北ザナラーン',
            'ko': '북부 다날란',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 13,
    },
    148: {
        'exVersion': 0,
        'name': {
            'cn': '黑衣森林中央林区',
            'de': 'Tiefer Wald',
            'en': 'Central Shroud',
            'fr': 'Forêt centrale',
            'ja': '黒衣森：中央森林',
            'ko': '검은장막 숲 중부삼림',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 3,
    },
    150: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '(6.1)幻龙残骸密约之塔',
            'de': '(6.1)Hüter des Sees',
            'en': '(6.1)The Keeper of the Lake',
            'fr': '(6.1)Le Gardien du lac',
            'ja': '(6.1)幻龍残骸 黙約の塔',
            'ko': '(6.1)묵약의 탑',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 74,
    },
    151: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '水晶塔 暗之世界',
            'de': 'Die Welt der Dunkelheit',
            'en': 'The World of Darkness',
            'fr': 'La Tour de Cristal - Monde des Ténèbres',
            'ja': 'クリスタルタワー：闇の世界',
            'ko': '크리스탈 타워: 어둠의 세계',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    152: {
        'exVersion': 0,
        'name': {
            'cn': '黑衣森林东部林区',
            'de': 'Ostwald',
            'en': 'East Shroud',
            'fr': 'Forêt de l\'est',
            'ja': '黒衣森：東部森林',
            'ko': '검은장막 숲 동부삼림',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 4,
    },
    153: {
        'exVersion': 0,
        'name': {
            'cn': '黑衣森林南部林区',
            'de': 'Südwald',
            'en': 'South Shroud',
            'fr': 'Forêt du sud',
            'ja': '黒衣森：南部森林',
            'ko': '검은장막 숲 남부삼림',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 5,
    },
    154: {
        'exVersion': 0,
        'name': {
            'cn': '黑衣森林北部林区',
            'de': 'Nordwald',
            'en': 'North Shroud',
            'fr': 'Forêt du nord',
            'ja': '黒衣森：北部森林',
            'ko': '검은장막 숲 북부삼림',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 6,
    },
    155: {
        'exVersion': 0,
        'name': {
            'cn': '库尔札斯中央高地',
            'de': 'Zentrales Hochland von Coerthas',
            'en': 'Coerthas Central Highlands',
            'fr': 'Hautes terres du Coerthas central',
            'ja': 'クルザス中央高地',
            'ko': '커르다스 중앙고지',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 21,
    },
    156: {
        'exVersion': 0,
        'name': {
            'cn': '摩杜纳',
            'de': 'Mor Dhona',
            'en': 'Mor Dhona',
            'fr': 'Mor Dhona',
            'ja': 'モードゥナ',
            'ko': '모르도나',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 22,
    },
    159: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '神灵圣域放浪神古神殿',
            'de': 'Palast des Wanderers',
            'en': 'The Wanderer\'s Palace',
            'fr': 'Le Palais du Vagabond',
            'ja': '旅神聖域 ワンダラーパレス',
            'ko': '방랑자의 궁전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    160: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '领航明灯天狼星灯塔',
            'de': 'Pharos Sirius',
            'en': 'Pharos Sirius',
            'fr': 'Le Phare de Sirius',
            'ja': '怪鳥巨塔 シリウス大灯台',
            'ko': '시리우스 대등대',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    162: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '(7.0)魔兽领域日影地修炼所',
            'de': '(7.0)Halatali',
            'en': '(7.0)Halatali',
            'fr': '(7.0)Halatali',
            'ja': '(7.0)魔獣領域 ハラタリ修練所',
            'ko': '(7.0)할라탈리 수련장',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    163: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '古代遗迹喀恩埋没圣堂',
            'de': 'Versunkener Tempel von Qarn',
            'en': 'The Sunken Temple of Qarn',
            'fr': 'Le Temple enseveli de Qarn',
            'ja': '遺跡探索 カルン埋没寺院',
            'ko': '카른의 무너진 사원',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    167: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '邪教驻地无限城古堡',
            'de': 'Die Ruinen von Amdapor',
            'en': 'Amdapor Keep',
            'fr': 'Le Château d\'Amdapor',
            'ja': '邪教排撃 古城アムダプール',
            'ko': '옛 암다포르 성',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    170: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '流沙迷宫樵鸣洞',
            'de': 'Sägerschrei',
            'en': 'Cutter\'s Cry',
            'fr': 'Le Gouffre hurlant',
            'ja': '流砂迷宮 カッターズクライ',
            'ko': '나무꾼의 비명',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    171: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '山中战线泽梅尔要塞',
            'de': 'Die Feste Dzemael',
            'en': 'Dzemael Darkhold',
            'fr': 'La Forteresse de Dzemael',
            'ja': '掃討作戦 ゼーメル要塞',
            'ko': '제멜 요새',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    172: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '毒雾洞窟黄金谷',
            'de': 'Goldklamm',
            'en': 'The Aurum Vale',
            'fr': 'Le Val d\'Aurum',
            'ja': '霧中行軍 オーラムヴェイル',
            'ko': '금빛 골짜기',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    174: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '水晶塔 古代人迷宫',
            'de': 'Kristallturm - Das Labyrinth der Alten',
            'en': 'The Labyrinth of the Ancients',
            'fr': 'La Tour de Cristal - Dédale antique',
            'ja': 'クリスタルタワー：古代の民の迷宮',
            'ko': '크리스탈 타워: 고대인의 미궁',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    180: {
        'exVersion': 0,
        'name': {
            'cn': '拉诺西亚外地',
            'de': 'Äußeres La Noscea',
            'en': 'Outer La Noscea',
            'fr': 'Noscea extérieure',
            'ja': '外地ラノシア',
            'ko': '외지 라노시아',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 24,
    },
    188: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '武装圣域放浪神古神殿',
            'de': 'Palast des Wanderers (schwer)',
            'en': 'The Wanderer\'s Palace (Hard)',
            'fr': 'Le Palais du Vagabond (brutal)',
            'ja': '武装聖域 ワンダラーパレス (Hard)',
            'ko': '방랑자의 궁전(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 40,
    },
    189: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '邪念妖地无限城古堡',
            'de': 'Die Ruinen von Amdapor (schwer)',
            'en': 'Amdapor Keep (Hard)',
            'fr': 'Le Château d\'Amdapor (brutal)',
            'ja': '邪念排撃 古城アムダプール (Hard)',
            'ko': '옛 암다포르 성(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 40,
    },
    190: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '讨伐彷徨死灵！',
            'de': 'Bockmanns Gefolge',
            'en': 'Under the Armor',
            'fr': 'Chasse au fantôme fantoche',
            'ja': '彷徨う死霊を討て！',
            'ko': '방황하는 사령을 쓰러뜨려라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 3,
    },
    191: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '驱除剧毒妖花！',
            'de': 'Unkraut jäten',
            'en': 'Pulling Poison Posies',
            'fr': 'Opération fleurs du mal',
            'ja': '有毒妖花を駆除せよ！',
            'ko': '독성 요괴꽃을 제거하라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 4,
    },
    192: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '消灭恶徒团伙寄生蜂团！',
            'de': 'Ins Wespennest stechen',
            'en': 'Stinging Back',
            'fr': 'Expédition punitive contre les Ventrerouge',
            'ja': '無法者「似我蜂団」を撃滅せよ！',
            'ko': '무법자 집단 \'나나니단\'을 섬멸하라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 5,
    },
    193: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 真源之章1',
            'de': 'Verschlungene Schatten 3 - 1',
            'en': 'The Final Coil of Bahamut - Turn 1',
            'fr': 'L\'Abîme de Bahamut I',
            'ja': '大迷宮バハムート：真成編1',
            'ko': '대미궁 바하무트: 진성편 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    194: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 真源之章2',
            'de': 'Verschlungene Schatten 3 - 2',
            'en': 'The Final Coil of Bahamut - Turn 2',
            'fr': 'L\'Abîme de Bahamut II',
            'ja': '大迷宮バハムート：真成編2',
            'ko': '대미궁 바하무트: 진성편 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    195: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 真源之章3',
            'de': 'Verschlungene Schatten 3 - 3',
            'en': 'The Final Coil of Bahamut - Turn 3',
            'fr': 'L\'Abîme de Bahamut III',
            'ja': '大迷宮バハムート：真成編3',
            'ko': '대미궁 바하무트: 진성편 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    196: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 真源之章4',
            'de': 'Verschlungene Schatten 3 - 4',
            'en': 'The Final Coil of Bahamut - Turn 4',
            'fr': 'L\'Abîme de Bahamut IV',
            'ja': '大迷宮バハムート：真成編4',
            'ko': '대미궁 바하무트: 진성편 4',
        },
        'offsetX': -448,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 44,
    },
    207: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '(6.1)莫古力贤王歼灭战',
            'de': '(6.1)Königliche Konfrontation (schwer)',
            'en': '(6.1)Thornmarch (Hard)',
            'fr': '(6.1)La Lisière de ronces (brutal)',
            'ja': '(6.1)善王モグル・モグXII世討滅戦',
            'ko': '(6.1)선왕 모그루 모그 XII세 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 30,
    },
    214: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '完成集团战训练！',
            'de': 'Einer für alle, alle für einen',
            'en': 'Basic Training: Enemy Parties',
            'fr': 'Entraînement : groupes d\'ennemis',
            'ja': '集団戦訓練をくぐり抜けろ！',
            'ko': '집단전 훈련을 완수하라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 16,
    },
    215: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '突破所有关门，讨伐最深处的敌人！',
            'de': 'Sturmkommando',
            'en': 'Basic Training: Enemy Strongholds',
            'fr': 'Entraînement : in­fil­tra­tion en base ennemie',
            'ja': '全関門を突破し、最深部の敵を討て！',
            'ko': '관문을 돌파하고 최심부의 적을 쓰러뜨려라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 9,
    },
    216: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '捕获金币龟！',
            'de': 'Gil oder Leben',
            'en': 'Hero on the Half Shell',
            'fr': 'Reconquête d\'une carapace escamotée',
            'ja': 'ギルガメを捕獲せよ！',
            'ko': '길거북을 사로잡아라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 10,
    },
    219: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '击溃哥布林炸弹军团！',
            'de': 'Bombige Goblins',
            'en': 'Flicking Sticks and Taking Names',
            'fr': 'Les Gobelins bombardiers',
            'ja': '爆弾魔ゴブリン軍団を撃滅せよ！',
            'ko': '폭탄광 고블린 군단을 섬멸하라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 3,
    },
    220: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '讨伐梦幻之布拉奇希奥！',
            'de': 'Briaxio ausschalten',
            'en': 'All\'s Well that Ends in the Well',
            'fr': 'Briaxio à bras raccourcis',
            'ja': '夢幻のブラキシオを討て！',
            'ko': '몽환의 브라크시오를 쓰러뜨려라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 5,
    },
    221: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '讨伐污染源头魔界花！',
            'de': 'Tödliches Rankenspiel',
            'en': 'More than a Feeler',
            'fr': 'Sus au morbol pollueur',
            'ja': '汚染源モルボルを討て！',
            'ko': '오염원 몰볼을 쓰러뜨려라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 20,
    },
    222: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '讨伐坑道中出现的妖异！',
            'de': 'Gefahr aus dem Nichts',
            'en': 'Annoy the Void',
            'fr': 'Buso l\'immolateur',
            'ja': '坑道に現れた妖異ブソを討て！',
            'ko': '갱도에 나타난 요마 부소를 쓰러뜨려라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 17,
    },
    223: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '注意无敌的眷属，讨伐大型妖异！',
            'de': 'Kampf gegen Schatten',
            'en': 'Shadow and Claw',
            'fr': 'Ombres et griffes',
            'ja': '無敵の眷属を従えし、大型妖異を討て！',
            'ko': '무적의 부하를 조종하는 요마를 쓰러뜨려라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 21,
    },
    241: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 邂逅之章1',
            'de': 'Verschlungene Schatten 1',
            'en': 'The Binding Coil of Bahamut - Turn 1',
            'fr': 'Le Labyrinthe de Bahamut I',
            'ja': '大迷宮バハムート：邂逅編1',
            'ko': '대미궁 바하무트: 해후편 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    242: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 邂逅之章2',
            'de': 'Verschlungene Schatten 2',
            'en': 'The Binding Coil of Bahamut - Turn 2',
            'fr': 'Le Labyrinthe de Bahamut II',
            'ja': '大迷宮バハムート：邂逅編2',
            'ko': '대미궁 바하무트: 해후편 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    243: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 邂逅之章3',
            'de': 'Verschlungene Schatten 3',
            'en': 'The Binding Coil of Bahamut - Turn 3',
            'fr': 'Le Labyrinthe de Bahamut III',
            'ja': '大迷宮バハムート：邂逅編3',
            'ko': '대미궁 바하무트: 해후편 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    244: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 邂逅之章4',
            'de': 'Verschlungene Schatten 4',
            'en': 'The Binding Coil of Bahamut - Turn 4',
            'fr': 'Le Labyrinthe de Bahamut IV',
            'ja': '大迷宮バハムート：邂逅編4',
            'ko': '대미궁 바하무트: 해후편 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    245: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 邂逅之章5',
            'de': 'Verschlungene Schatten 5',
            'en': 'The Binding Coil of Bahamut - Turn 5',
            'fr': 'Le Labyrinthe de Bahamut V',
            'ja': '大迷宮バハムート：邂逅編5',
            'ko': '대미궁 바하무트: 해후편 5',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    250: {
        'exVersion': 0,
        'name': {
            'cn': '狼狱停船场',
            'de': 'Wolfshöhlen-Pier',
            'en': 'Wolves\' Den Pier',
            'fr': 'Jetée de l\'Antre des loups',
            'ja': 'ウルヴズジェイル係船場',
            'ko': '늑대우리 부두',
        },
        'offsetX': -77,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 29,
    },
    281: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '利维亚桑歼灭战',
            'de': 'Götterdämmerung - Leviathan',
            'en': 'The Whorleater (Hard)',
            'fr': 'Le Briseur de marées (brutal)',
            'ja': '真リヴァイアサン討滅戦',
            'ko': '진 리바이어선 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 38,
    },
    292: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '伊弗利特歼灭战',
            'de': 'Götterdämmerung - Ifrit',
            'en': 'The Bowl of Embers (Hard)',
            'fr': 'Le Cratère des tisons (brutal)',
            'ja': '真イフリート討滅戦',
            'ko': '진 이프리트 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 25,
    },
    293: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '泰坦歼灭战',
            'de': 'Götterdämmerung - Titan',
            'en': 'The Navel (Hard)',
            'fr': 'Le Nombril (brutal)',
            'ja': '真タイタン討滅戦',
            'ko': '진 타이탄 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 23,
    },
    294: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '迦楼罗歼灭战',
            'de': 'Götterdämmerung - Garuda',
            'en': 'The Howling Eye (Hard)',
            'fr': 'Hurlœil (brutal)',
            'ja': '真ガルーダ討滅戦',
            'ko': '진 가루다 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 26,
    },
    295: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '伊弗利特歼殛战',
            'de': 'Zenit der Götter - Ifrit',
            'en': 'The Bowl of Embers (Extreme)',
            'fr': 'Le Cratère des tisons (extrême)',
            'ja': '極イフリート討滅戦',
            'ko': '극 이프리트 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 25,
    },
    296: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '泰坦歼殛战',
            'de': 'Zenit der Götter - Titan',
            'en': 'The Navel (Extreme)',
            'fr': 'Le Nombril (extrême)',
            'ja': '極タイタン討滅戦',
            'ko': '극 타이탄 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 23,
    },
    297: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '迦楼罗歼殛战',
            'de': 'Zenit der Götter - Garuda',
            'en': 'The Howling Eye (Extreme)',
            'fr': 'Hurlœil (extrême)',
            'ja': '極ガルーダ討滅戦',
            'ko': '극 가루다 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 26,
    },
    298: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '讨伐爆弹怪的女王！',
            'de': 'Miss Bombastic',
            'en': 'Long Live the Queen',
            'fr': 'Longue vie à la Reine',
            'ja': 'ボムを率いる「ボムクイーン」を討て！',
            'ko': '봄을 거느린 \'봄 여왕\'을 쓰러뜨려라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 21,
    },
    299: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '歼灭特殊阵型的妖异！',
            'de': 'Unzertrennlich',
            'en': 'Ward Up',
            'fr': 'Quintettes infernaux',
            'ja': '不気味な陣形を組む妖異をせん滅せよ！',
            'ko': '불길한 진형을 짜는 요마를 섬멸하라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 22,
    },
    300: {
        'contentType': 3,
        'exVersion': 0,
        'name': {
            'cn': '制止三方混战的巨人族，守住遗物！',
            'de': 'Wuchtige Dreifaltigkeit',
            'en': 'Solemn Trinity',
            'fr': 'Trinité sinistre',
            'ja': '三つ巴の巨人族を制し、遺物を守れ！',
            'ko': '세 거인족을 제압하여 유물을 지켜내라!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 22,
    },
    348: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '究极神兵假想作战',
            'de': 'Heldenlied von Ultima',
            'en': 'The Minstrel\'s Ballad: Ultima\'s Bane',
            'fr': 'Le fléau d\'Ultima',
            'ja': '究極幻想 アルテマウェポン破壊作戦',
            'ko': '궁극의 환상 알테마 웨폰 파괴작전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 31,
    },
    349: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '骚乱坑道铜铃铜山',
            'de': 'Kupferglocken-Mine (schwer)',
            'en': 'Copperbell Mines (Hard)',
            'fr': 'Les Mines de Clochecuivre (brutal)',
            'ja': '騒乱坑道 カッパーベル銅山 (Hard)',
            'ko': '구리종 광산(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    350: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '恶灵府邸静语庄园',
            'de': 'Haukke-Herrenhaus (schwer)',
            'en': 'Haukke Manor (Hard)',
            'fr': 'Le Manoir des Haukke (brutal)',
            'ja': '妖異屋敷 ハウケタ御用邸 (Hard)',
            'ko': '하우케타 별궁(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    353: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '活动挑战2',
            'de': 'Event-Inhalt 1',
            'en': 'Special Event I',
            'fr': 'Défi spécial I',
            'ja': 'イベント用コンテンツ：1',
            'ko': '이벤트용 임무: 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    354: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '活动挑战3',
            'de': 'Event-Inhalt 2',
            'en': 'Special Event II',
            'fr': 'Défi spécial II',
            'ja': 'イベント用コンテンツ：2',
            'ko': '이벤트용 임무: 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 103,
    },
    355: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 入侵之章1',
            'de': 'Verschlungene Schatten 2 - 1',
            'en': 'The Second Coil of Bahamut - Turn 1',
            'fr': 'Les Méandres de Bahamut I',
            'ja': '大迷宮バハムート：侵攻編1',
            'ko': '대미궁 바하무트: 침공편 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    356: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 入侵之章2',
            'de': 'Verschlungene Schatten 2 - 2',
            'en': 'The Second Coil of Bahamut - Turn 2',
            'fr': 'Les Méandres de Bahamut II',
            'ja': '大迷宮バハムート：侵攻編2',
            'ko': '대미궁 바하무트: 침공편 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    357: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 入侵之章3',
            'de': 'Verschlungene Schatten 2 - 3',
            'en': 'The Second Coil of Bahamut - Turn 3',
            'fr': 'Les Méandres de Bahamut III',
            'ja': '大迷宮バハムート：侵攻編3',
            'ko': '대미궁 바하무트: 침공편 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    358: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特大迷宫 入侵之章4',
            'de': 'Verschlungene Schatten 2 - 4',
            'en': 'The Second Coil of Bahamut - Turn 4',
            'fr': 'Les Méandres de Bahamut IV',
            'ja': '大迷宮バハムート：侵攻編4',
            'ko': '대미궁 바하무트: 침공편 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    359: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '利维亚桑歼殛战',
            'de': 'Zenit der Götter - Leviathan',
            'en': 'The Whorleater (Extreme)',
            'fr': 'Le Briseur de marées (extrême)',
            'ja': '極リヴァイアサン討滅戦',
            'ko': '극 리바이어선 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 38,
    },
    360: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '剑斗领域日影地修炼所',
            'de': 'Halatali (schwer)',
            'en': 'Halatali (Hard)',
            'fr': 'Halatali (brutal)',
            'ja': '剣闘領域 ハラタリ修練所 (Hard)',
            'ko': '할라탈리 수련장(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    361: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '财宝传说破舰岛',
            'de': 'Schiffbrecher-Insel',
            'en': 'Hullbreaker Isle',
            'fr': 'L\'Île de Crèvecarène',
            'ja': '財宝伝説 ハルブレーカー・アイル',
            'ko': '난파선의 섬',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    362: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '纷争要地布雷福洛克斯野营地',
            'de': 'Brüllvolx\' Langrast (schwer)',
            'en': 'Brayflox\'s Longstop (Hard)',
            'fr': 'Le Bivouac de Brayflox (brutal)',
            'ja': '盟友支援 ブレイフロクスの野営地 (Hard)',
            'ko': '브레이플록스의 야영지(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 37,
    },
    363: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '腐坏遗迹无限城市街古迹',
            'de': 'Historisches Amdapor',
            'en': 'The Lost City of Amdapor',
            'fr': 'Les Vestiges de la cité d\'Amdapor',
            'ja': '腐敗遺跡 古アムダプール市街',
            'ko': '옛 암다포르 시가지',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 40,
    },
    364: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '莫古力贤王歼殛战',
            'de': 'Königliche Konfrontation (extrem)',
            'en': 'Thornmarch (Extreme)',
            'fr': 'La Lisière de ronces (extrême)',
            'ja': '極王モグル・モグXII世討滅戦',
            'ko': '극왕 모그루 모그 XII세 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 30,
    },
    365: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '激战城塞石卫塔',
            'de': 'Steinerne Wacht (schwer)',
            'en': 'The Stone Vigil (Hard)',
            'fr': 'Le Vigile de Pierre (brutal)',
            'ja': '城塞奪回 ストーンヴィジル (Hard)',
            'ko': '돌방패 경계초소(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 42,
    },
    366: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '大桥上的决斗',
            'de': 'Duell auf der großen Brücke',
            'en': 'Battle on the Big Bridge',
            'fr': 'Affrontement sur le grand pont',
            'ja': 'ギルガメッシュ討伐戦',
            'ko': '길가메시 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    367: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '苏醒遗迹喀恩埋没圣堂',
            'de': 'Versunkener Tempel von Qarn (schwer)',
            'en': 'The Sunken Temple of Qarn (Hard)',
            'fr': 'Le Temple enseveli de Qarn (brutal)',
            'ja': '遺跡救援 カルン埋没寺院 (Hard)',
            'ko': '카른의 무너진 사원(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 41,
    },
    368: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '死化奇美拉讨伐战',
            'de': 'Kampf gegen die Dhorme-Chimära',
            'en': 'A Relic Reborn: the Chimera',
            'fr': 'La chimère dhorme du Coerthas',
            'ja': 'ドルムキマイラ討伐戦',
            'ko': '도름 키마이라 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 21,
    },
    369: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '海德拉讨伐战',
            'de': 'Kampf gegen die Hydra',
            'en': 'A Relic Reborn: the Hydra',
            'fr': 'L\'hydre d\'Halatali',
            'ja': 'ハイドラ討伐戦',
            'ko': '하이드라 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    371: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '(6.1)凛冽洞天披雪大冰壁',
            'de': '(6.1)Das Schneekleid',
            'en': '(6.1)Snowcloak',
            'fr': '(6.1)Manteneige',
            'ja': '(6.1)氷結潜窟 スノークローク大氷壁',
            'ko': '(6.1)얼음외투 대빙벽',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 42,
    },
    372: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '水晶塔 希尔科斯塔',
            'de': 'Kristallturm - Der Syrcus-Turm',
            'en': 'Syrcus Tower',
            'fr': 'La Tour de Cristal - Tour de Syrcus',
            'ja': 'クリスタルタワー：シルクスの塔',
            'ko': '크리스탈 타워: 시르쿠스 탑',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    373: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '惨剧灵殿塔姆·塔拉墓园',
            'de': 'Totenacker Tam-Tara (schwer)',
            'en': 'The Tam–Tara Deepcroft (Hard)',
            'fr': 'L\'Hypogée de Tam-Tara (brutal)',
            'ja': '惨劇霊殿 タムタラの墓所 (Hard)',
            'ko': '탐타라 묘소(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 300,
        'weatherRate': 0,
    },
    374: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '拉姆歼灭战',
            'de': 'Götterdämmerung - Ramuh',
            'en': 'The Striking Tree (Hard)',
            'fr': 'L\'Arbre du jugement (brutal)',
            'ja': '真ラムウ討滅戦',
            'ko': '진 라무 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 43,
    },
    375: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '拉姆歼殛战',
            'de': 'Zenit der Götter - Ramuh',
            'en': 'The Striking Tree (Extreme)',
            'fr': 'L\'Arbre du jugement (extrême)',
            'ja': '極ラムウ討滅戦',
            'ko': '극 라무 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 43,
    },
    376: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '周边遗迹群（阵地战）',
            'de': 'Äußere Ruinen (Sicherung)',
            'en': 'The Borderland Ruins (Secure)',
            'fr': 'Les Ruines frontalières (annexion)',
            'ja': '外縁遺跡群 (制圧戦)',
            'ko': '외곽 유적지대(제압전)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    377: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '希瓦歼灭战',
            'de': 'Götterdämmerung - Shiva',
            'en': 'The Akh Afah Amphitheatre (Hard)',
            'fr': 'L\'Amphithéâtre d\'Akh Afah (brutal)',
            'ja': '真シヴァ討滅戦',
            'ko': '진 시바 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 46,
    },
    378: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '希瓦歼殛战',
            'de': 'Zenit der Götter - Shiva',
            'en': 'The Akh Afah Amphitheatre (Extreme)',
            'fr': 'L\'Amphithéâtre d\'Akh Afah (extrême)',
            'ja': '極シヴァ討滅戦',
            'ko': '극 시바 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 46,
    },
    380: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特零式大迷宫 入侵之章1',
            'de': 'Verschlungene Schatten 2 - 1 (episch)',
            'en': 'The Second Coil of Bahamut (Savage) - Turn 1',
            'fr': 'Les Méandres de Bahamut I (sadique)',
            'ja': '大迷宮バハムート零式：侵攻編1',
            'ko': '대미궁 바하무트: 침공편(영웅) 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    381: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特零式大迷宫 入侵之章2',
            'de': 'Verschlungene Schatten 2 - 2 (episch)',
            'en': 'The Second Coil of Bahamut (Savage) - Turn 2',
            'fr': 'Les Méandres de Bahamut II (sadique)',
            'ja': '大迷宮バハムート零式：侵攻編2',
            'ko': '대미궁 바하무트: 침공편(영웅) 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    382: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特零式大迷宫 入侵之章3',
            'de': 'Verschlungene Schatten 2 - 3 (episch)',
            'en': 'The Second Coil of Bahamut (Savage) - Turn 3',
            'fr': 'Les Méandres de Bahamut III (sadique)',
            'ja': '大迷宮バハムート零式：侵攻編3',
            'ko': '대미궁 바하무트: 침공편(영웅) 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    383: {
        'contentType': 5,
        'exVersion': 0,
        'name': {
            'cn': '巴哈姆特零式大迷宫 入侵之章4',
            'de': 'Verschlungene Schatten 2 - 4 (episch)',
            'en': 'The Second Coil of Bahamut (Savage) - Turn 4',
            'fr': 'Les Méandres de Bahamut IV (sadique)',
            'ja': '大迷宮バハムート零式：侵攻編4',
            'ko': '대미궁 바하무트: 침공편(영웅) 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    387: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '逆转要害沙斯塔夏溶洞',
            'de': 'Sastasha (schwer)',
            'en': 'Sastasha (Hard)',
            'fr': 'Sastasha (brutal)',
            'ja': '逆襲要害 サスタシャ浸食洞 (Hard)',
            'ko': '사스타샤 침식 동굴(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    389: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '陆行鸟竞赛：太阳海岸',
            'de': 'Chocobo-Rennen: Sonnenküste',
            'en': 'Chocobo Race: Costa del Sol',
            'fr': 'Course de chocobos : Costa del Sol',
            'ja': 'チョコボレース：コスタ・デル・ソル',
            'ko': '초코보 경주: 코스타 델 솔',
        },
        'offsetX': -472,
        'offsetY': -424,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    390: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '陆行鸟竞赛：荒野大道',
            'de': 'Chocobo-Rennen: Sagolii-Straße',
            'en': 'Chocobo Race: Sagolii Road',
            'fr': 'Course de chocobos : Route de Sagolii',
            'ja': 'チョコボレース：サゴリーロード',
            'ko': '초코보 경주: 사골리 사막',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    391: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '陆行鸟竞赛：恬静小路',
            'de': 'Chocobo-Rennen: Pfad der Seelenruhe',
            'en': 'Chocobo Race: Tranquil Paths',
            'fr': 'Course de chocobos : Sentes tranquilles',
            'ja': 'チョコボレース：トランキルパス',
            'ko': '초코보 경주: 고요한 야영지',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    394: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '奥丁歼灭战',
            'de': 'Jenseits Urths Quelle',
            'en': 'Urth\'s Fount',
            'fr': 'La Fontaine d\'Urth',
            'ja': '闘神オーディン討滅戦',
            'ko': '투신 오딘 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 45,
    },
    396: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '无限城的死斗',
            'de': 'Revanche in den Ruinen',
            'en': 'Battle in the Big Keep',
            'fr': 'Revanche au vieux château',
            'ja': '真ギルガメッシュ討滅戦',
            'ko': '진 길가메시 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    397: {
        'exVersion': 1,
        'name': {
            'cn': '库尔札斯西部高地',
            'de': 'Westliches Hochland von Coerthas',
            'en': 'Coerthas Western Highlands',
            'fr': 'Hautes terres du Coerthas occidental',
            'ja': 'クルザス西部高地',
            'ko': '커르다스 서부고지',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 95,
        'weatherRate': 49,
    },
    398: {
        'exVersion': 1,
        'name': {
            'cn': '龙堡参天高地',
            'de': 'Dravanisches Vorland',
            'en': 'The Dravanian Forelands',
            'fr': 'Avant-pays dravanien',
            'ja': '高地ドラヴァニア',
            'ko': '고지 드라바니아',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 95,
        'weatherRate': 50,
    },
    399: {
        'exVersion': 1,
        'name': {
            'cn': '龙堡内陆低地',
            'de': 'Dravanisches Hinterland',
            'en': 'The Dravanian Hinterlands',
            'fr': 'Arrière-pays dravanien',
            'ja': '低地ドラヴァニア',
            'ko': '저지 드라바니아',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 95,
        'weatherRate': 51,
    },
    400: {
        'exVersion': 1,
        'name': {
            'cn': '翻云雾海',
            'de': 'Wallende Nebel',
            'en': 'The Churning Mists',
            'fr': 'L\'Écume des cieux de Dravania',
            'ja': 'ドラヴァニア雲海',
            'ko': '드라바니아 구름바다',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 95,
        'weatherRate': 52,
    },
    401: {
        'exVersion': 1,
        'name': {
            'cn': '阿巴拉提亚云海',
            'de': 'Abalathisches Wolkenmeer',
            'en': 'The Sea of Clouds',
            'fr': 'L\'Écume des cieux d\'Abalathia',
            'ja': 'アバラシア雲海',
            'ko': '아발라시아 구름바다',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 95,
        'weatherRate': 53,
    },
    402: {
        'exVersion': 1,
        'name': {
            'cn': '魔大陆阿济兹拉',
            'de': 'Azys Lla',
            'en': 'Azys Lla',
            'fr': 'Azys Lla',
            'ja': 'アジス・ラー',
            'ko': '아지스 라',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 95,
        'weatherRate': 54,
    },
    403: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '英雄归来',
            'de': 'Verrat der Qalyana',
            'en': 'Return of the Bull',
            'fr': 'Retour au bercail',
            'ja': '英雄の帰還',
            'ko': '영웅의 귀환',
        },
        'offsetX': -250,
        'offsetY': 128,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    416: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '(6.2)学识宝库迦巴勒幻想图书馆',
            'de': '(6.2)Große Gubal-Bibliothek',
            'en': '(6.2)The Great Gubal Library',
            'fr': '(6.2)La Grande bibliothèque de Gubal',
            'ja': '(6.2)禁書回収 グブラ幻想図書館',
            'ko': '(6.2)구브라 환상도서관',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    417: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '陆行鸟竞赛：竞赛教学',
            'de': 'Chocobo-Rennen: Übungsbahn',
            'en': 'Chocobo Race: Tutorial',
            'fr': 'Course d\'appentissage',
            'ja': 'チョコボレース：チュートリアル',
            'ko': '초코보 경주: 튜토리얼',
        },
        'offsetX': 0,
        'offsetY': -690,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    418: {
        'exVersion': 1,
        'name': {
            'cn': '伊修加德基础层',
            'de': 'Fundamente',
            'en': 'Foundation',
            'fr': 'Ishgard - L\'Assise',
            'ja': 'イシュガルド：下層',
            'ko': '이슈가르드 하층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 47,
    },
    419: {
        'exVersion': 1,
        'name': {
            'cn': '伊修加德砥柱层',
            'de': 'Strebewerk',
            'en': 'The Pillars',
            'fr': 'Ishgard - Les Contreforts',
            'ja': 'イシュガルド：上層',
            'ko': '이슈가르드 상층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 48,
    },
    420: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '空中神域不获岛',
            'de': 'Nimmerreich',
            'en': 'Neverreap',
            'fr': 'Nalloncques',
            'ja': '神域浮島 ネバーリープ',
            'ko': '거두지 않는 섬',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    421: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '(6.1)圣教中枢伊修加德教皇厅',
            'de': '(6.1)Erzbasilika',
            'en': '(6.1)The Vault',
            'fr': '(6.1)La Voûte',
            'ja': '(6.1)強硬突入 イシュガルド教皇庁',
            'ko': '(6.1)이슈가르드 교황청',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    426: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '那布里亚勒斯讨伐战',
            'de': 'Chrysalis',
            'en': 'The Chrysalis',
            'fr': 'La Chrysalide',
            'ja': 'アシエン・ナプリアレス討伐戦',
            'ko': '아씨엔 나브리알레스 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    430: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '博物战舰无限回廊',
            'de': 'Die Fraktal-Kontinuum',
            'en': 'The Fractal Continuum',
            'fr': 'Le Continuum fractal',
            'ja': '博物戦艦 フラクタル・コンティニアム',
            'ko': '무한연속 박물함',
        },
        'offsetX': 0,
        'offsetY': -213,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    431: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '尘封秘岩（争夺战）',
            'de': 'Robbenholm (Eroberung)',
            'en': 'Seal Rock (Seize)',
            'fr': 'Le Rocher des tréfonds (invasion)',
            'ja': 'シールロック (争奪戦)',
            'ko': '봉인된 바위섬(쟁탈전)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 59,
    },
    432: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '罗波那歼灭战',
            'de': 'Götterdämmerung - Ravana',
            'en': 'Thok ast Thok (Hard)',
            'fr': 'Thok ast Thok (brutal)',
            'ja': '真ラーヴァナ討滅戦',
            'ko': '진 라바나 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 57,
    },
    434: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '冰雪废堡暮卫塔',
            'de': 'Abendrot-Wacht',
            'en': 'The Dusk Vigil',
            'fr': 'Le Vigile du Crépuscule',
            'ja': '廃砦捜索 ダスクヴィジル',
            'ko': '어스름 요새',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 42,
    },
    435: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '(6.1)邪龙王座龙巢神殿',
            'de': '(6.1)Nest des Drachen',
            'en': '(6.1)The Aery',
            'fr': '(6.1)L\'Aire',
            'ja': '(6.1)邪竜血戦 ドラゴンズエアリー',
            'ko': '(6.1)용의 둥지',
        },
        'offsetX': -40,
        'offsetY': 55,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    436: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '俾斯麦歼灭战',
            'de': 'Götterdämmerung - Bismarck',
            'en': 'The Limitless Blue (Hard)',
            'fr': 'L\'Immensité bleue (brutal)',
            'ja': '真ビスマルク討滅戦',
            'ko': '진 비스마르크 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 28,
    },
    437: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '圆桌骑士歼灭战',
            'de': 'Singularitäts-Reaktor',
            'en': 'The Singularity Reactor',
            'fr': 'Le Réacteur de singularité',
            'ja': 'ナイツ・オブ・ラウンド討滅戦',
            'ko': '나이츠 오브 라운드 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 56,
    },
    438: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '(6.2)血战苍穹魔科学研究所',
            'de': '(6.2)Ätherochemisches For<SoftHyphen/>schungs<SoftHyphen/>labor',
            'en': '(6.2)The Aetherochemical Research Facility',
            'fr': '(6.2)Le Laboratoire de magismologie',
            'ja': '(6.2)蒼天聖戦 魔科学研究所',
            'ko': '(6.2)마과학 연구소',
        },
        'offsetX': -18,
        'offsetY': 149,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    441: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '(6.1)天山绝顶索姆阿尔灵峰',
            'de': '(6.1)Sohm Al',
            'en': '(6.1)Sohm Al',
            'fr': '(6.1)Sohm Al',
            'ja': '(6.1)霊峰踏破 ソーム・アル',
            'ko': '(6.1)솜 알',
        },
        'offsetX': 185,
        'offsetY': 51,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    442: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 启动之章1',
            'de': 'Alexander - Faust des Vaters',
            'en': 'Alexander - The Fist of the Father',
            'fr': 'Alexander - Le Poing du Père',
            'ja': '機工城アレキサンダー：起動編1',
            'ko': '기공성 알렉산더: 기동편 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    443: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 启动之章2',
            'de': 'Alexander - Elle des Vaters',
            'en': 'Alexander - The Cuff of the Father',
            'fr': 'Alexander - Le Poignet du Père',
            'ja': '機工城アレキサンダー：起動編2',
            'ko': '기공성 알렉산더: 기동편 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    444: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 启动之章3',
            'de': 'Alexander - Arm des Vaters',
            'en': 'Alexander - The Arm of the Father',
            'fr': 'Alexander - Le Bras du Père',
            'ja': '機工城アレキサンダー：起動編3',
            'ko': '기공성 알렉산더: 기동편 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    445: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 启动之章4',
            'de': 'Alexander - Last des Vaters',
            'en': 'Alexander - The Burden of the Father',
            'fr': 'Alexander - Le Fardeau du Père',
            'ja': '機工城アレキサンダー：起動編4',
            'ko': '기공성 알렉산더: 기동편 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    446: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '罗波那歼殛战',
            'de': 'Zenit der Götter - Ravana',
            'en': 'Thok ast Thok (Extreme)',
            'fr': 'Thok ast Thok (extrême)',
            'ja': '極ラーヴァナ討滅戦',
            'ko': '극 라바나 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 57,
    },
    447: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '俾斯麦歼殛战',
            'de': 'Zenit der Götter - Bismarck',
            'en': 'The Limitless Blue (Extreme)',
            'fr': 'L\'Immensité bleue (extrême)',
            'ja': '極ビスマルク討滅戦',
            'ko': '극 비스마르크 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 28,
    },
    448: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '圆桌骑士幻想歼灭战',
            'de': 'Heldenlied von Thordans Fall',
            'en': 'The Minstrel\'s Ballad: Thordan\'s Reign',
            'fr': 'Le règne de Thordan',
            'ja': '蒼天幻想 ナイツ・オブ・ラウンド討滅戦',
            'ko': '극 나이츠 오브 라운드 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 56,
    },
    449: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 启动之章1',
            'de': 'Alexander - Faust des Vaters (episch)',
            'en': 'Alexander - The Fist of the Father (Savage)',
            'fr': 'Alexander - Le Poing du Père (sadique)',
            'ja': '機工城アレキサンダー零式：起動編1',
            'ko': '기공성 알렉산더: 기동편(영웅) 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    450: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 启动之章2',
            'de': 'Alexander - Elle des Vaters (episch)',
            'en': 'Alexander - The Cuff of the Father (Savage)',
            'fr': 'Alexander - Le Poignet du Père (sadique)',
            'ja': '機工城アレキサンダー零式：起動編2',
            'ko': '기공성 알렉산더: 기동편(영웅) 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    451: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 启动之章3',
            'de': 'Alexander - Arm des Vaters (episch)',
            'en': 'Alexander - The Arm of the Father (Savage)',
            'fr': 'Alexander - Le Bras du Père (sadique)',
            'ja': '機工城アレキサンダー零式：起動編3',
            'ko': '기공성 알렉산더: 기동편(영웅) 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    452: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 启动之章4',
            'de': 'Alexander - Last des Vaters (episch)',
            'en': 'Alexander - The Burden of the Father (Savage)',
            'fr': 'Alexander - Le Fardeau du Père (sadique)',
            'ja': '機工城アレキサンダー零式：起動編4',
            'ko': '기공성 알렉산더: 기동편(영웅) 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    478: {
        'exVersion': 1,
        'name': {
            'cn': '田园郡',
            'de': 'Frohehalde',
            'en': 'Idyllshire',
            'fr': 'Idyllée',
            'ja': 'イディルシャイア',
            'ko': '이딜샤이어',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 55,
    },
    506: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '萌宠之王：大赛对战（人机对战）',
            'de': 'Kampf der Trabanten: Turnier (gegen Arenameister)',
            'en': 'LoVM: Master Tournament',
            'fr': 'Bataille de tournoi contre l\'ordinateur',
            'ja': 'LoVM：大会対戦 (CPU対戦)',
            'ko': '꼬마 친구 공방전: 대회 대결(인공 지능 대결)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    508: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '魔航船虚无方舟',
            'de': 'Die Nichts-Arche',
            'en': 'The Void Ark',
            'fr': 'L\'Arche du néant',
            'ja': '魔航船ヴォイドアーク',
            'ko': '보이드의 방주',
        },
        'offsetX': 289,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 37,
    },
    510: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '地脉灵灯天狼星灯塔',
            'de': 'Pharos Sirius (schwer)',
            'en': 'Pharos Sirius (Hard)',
            'fr': 'Le Phare de Sirius (brutal)',
            'ja': '制圧巨塔 シリウス大灯台 (Hard)',
            'ko': '시리우스 대등대(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    511: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '草木庭园圣茉夏娜植物园',
            'de': 'Sankt Mocianne-Arboretum',
            'en': 'Saint Mocianne\'s Arboretum',
            'fr': 'L\'Arboretum Sainte-Mocianne',
            'ja': '草木庭園 聖モシャーヌ植物園',
            'ko': '성 모샨 식물원',
        },
        'offsetX': 40,
        'offsetY': 6,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    512: {
        'contentType': 23,
        'exVersion': 1,
        'name': {
            'cn': '云冠群岛白昼探索',
            'de': 'Das Diadem (leicht)',
            'en': 'The Diadem (Easy)',
            'fr': 'Le Diadème (facile)',
            'ja': '雲海探索 ディアデム諸島 (Easy)',
            'ko': '디아뎀 제도(쉬움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 60,
    },
    515: {
        'contentType': 23,
        'exVersion': 1,
        'name': {
            'cn': '云冠群岛夜晚探索',
            'de': 'Das Diadem (schwer)',
            'en': 'The Diadem (Hard)',
            'fr': 'Le Diadème (brutal)',
            'ja': '雲海探索 ディアデム諸島 (Hard)',
            'ko': '디아뎀 제도(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 62,
    },
    516: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '(6.2)星海空间颠倒塔',
            'de': '(6.2)Antiturm',
            'en': '(6.2)The Antitower',
            'fr': '(6.2)L\'Antitour',
            'ja': '(6.2)星海観測 逆さの塔',
            'ko': '(6.2)거꾸로 선 탑',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    517: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '萨菲洛特歼灭战',
            'de': 'Götterdämmerung - Sephirot',
            'en': 'Containment Bay S1T7',
            'fr': 'Unité de contention S1P7',
            'ja': '魔神セフィロト討滅戦',
            'ko': '마신 세피로트 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 66,
    },
    519: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '神圣遗迹无限城市街古迹',
            'de': 'Historisches Amdapor (schwer)',
            'en': 'The Lost City of Amdapor (Hard)',
            'fr': 'Les Vestiges de la cité d\'Amdapor (brutal)',
            'ja': '神聖遺跡 古アムダプール市街 (Hard)',
            'ko': '옛 암다포르 시가지(어려움)',
        },
        'offsetX': 64,
        'offsetY': 315,
        'sizeFactor': 200,
        'weatherRate': 63,
    },
    520: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 律动之章1',
            'de': 'Alexander - Faust des Sohnes',
            'en': 'Alexander - The Fist of the Son',
            'fr': 'Alexander - Le Poing du Fils',
            'ja': '機工城アレキサンダー：律動編1',
            'ko': '기공성 알렉산더: 율동편 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    521: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 律动之章2',
            'de': 'Alexander - Elle des Sohnes',
            'en': 'Alexander - The Cuff of the Son',
            'fr': 'Alexander - Le Poignet du Fils',
            'ja': '機工城アレキサンダー：律動編2',
            'ko': '기공성 알렉산더: 율동편 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    522: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 律动之章3',
            'de': 'Alexander - Arm des Sohnes',
            'en': 'Alexander - The Arm of the Son',
            'fr': 'Alexander - Le Bras du Fils',
            'ja': '機工城アレキサンダー：律動編3',
            'ko': '기공성 알렉산더: 율동편 3',
        },
        'offsetX': -110,
        'offsetY': -170,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    523: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 律动之章4',
            'de': 'Alexander - Last des Sohnes',
            'en': 'Alexander - The Burden of the Son',
            'fr': 'Alexander - Le Fardeau du Fils',
            'ja': '機工城アレキサンダー：律動編4',
            'ko': '기공성 알렉산더: 율동편 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    524: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '萨菲洛特歼殛战',
            'de': 'Zenit der Götter - Sephirot',
            'en': 'Containment Bay S1T7 (Extreme)',
            'fr': 'Unité de contention S1P7 (extrême)',
            'ja': '極魔神セフィロト討滅戦',
            'ko': '극 마신 세피로트 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 66,
    },
    529: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 律动之章1',
            'de': 'Alexander - Faust des Sohnes (episch)',
            'en': 'Alexander - The Fist of the Son (Savage)',
            'fr': 'Alexander - Le Poing du Fils (sadique)',
            'ja': '機工城アレキサンダー零式：律動編1',
            'ko': '기공성 알렉산더: 율동편(영웅) 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    530: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 律动之章2',
            'de': 'Alexander - Elle des Sohnes (episch)',
            'en': 'Alexander - The Cuff of the Son (Savage)',
            'fr': 'Alexander - Le Poignet du Fils (sadique)',
            'ja': '機工城アレキサンダー零式：律動編2',
            'ko': '기공성 알렉산더: 율동편(영웅) 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    531: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 律动之章3',
            'de': 'Alexander - Arm des Sohnes (episch)',
            'en': 'Alexander - The Arm of the Son (Savage)',
            'fr': 'Alexander - Le Bras du Fils (sadique)',
            'ja': '機工城アレキサンダー零式：律動編3',
            'ko': '기공성 알렉산더: 율동편(영웅) 3',
        },
        'offsetX': -110,
        'offsetY': -170,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    532: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 律动之章4',
            'de': 'Alexander - Last des Sohnes (episch)',
            'en': 'Alexander - The Burden of the Son (Savage)',
            'fr': 'Alexander - Le Fardeau du Fils (sadique)',
            'ja': '機工城アレキサンダー零式：律動編4',
            'ko': '기공성 알렉산더: 율동편(영웅) 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    533: {
        'contentType': 7,
        'exVersion': 1,
        'name': {
            'cn': '四国联合军演',
            'de': 'Truppenübung der Eorzäischen Allianz',
            'en': 'A Spectacle for the Ages',
            'fr': 'La grande manœuvre éorzéenne',
            'ja': '四国合同演習',
            'ko': '4개국 합동 훈련',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    537: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '躲避范围攻击',
            'de': 'Flächenangriffen ausweichen',
            'en': 'Avoid Area of Effect Attacks',
            'fr': 'Éviter les attaques à aire d\'effet',
            'ja': '範囲攻撃を避けよう！',
            'ko': '범위 공격을 피하자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    538: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '掌握仇恨连击',
            'de': 'Mit Kombos Feindseligkeit auf sich ziehen',
            'en': 'Execute a Combo to Increase Enmity',
            'fr': 'Générer de l\'inimitié avec un combo',
            'ja': 'コンボで敵視を集めよう！',
            'ko': '콤보를 이어 적개심을 끌자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    539: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '控制敌人的仇恨',
            'de': 'Kombos im Kampf einsetzen',
            'en': 'Execute a Combo in Battle',
            'fr': 'Effectuer le combo en combat',
            'ja': '実戦でコンボに挑戦しよう！',
            'ko': '실전에서 콤보를 사용해보자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    540: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '控制多个敌人的仇恨',
            'de': 'Feindseligkeit mehrerer Gegner auf sich ziehen',
            'en': 'Accrue Enmity from Multiple Targets',
            'fr': 'Attirer l\'inimitié de plusieurs ennemis sur soi',
            'ja': '複数の敵から敵視を集めよう！',
            'ko': '다수의 적에게서 적개심을 끌자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    541: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '实战控制多个敌人的仇恨',
            'de': 'Gegen mehrere Gegner auf einmal kämpfen',
            'en': 'Engage Multiple Targets',
            'fr': 'Affronter plusieurs ennemis',
            'ja': '実戦で複数の敵と戦ってみよう！',
            'ko': '실전에서 다수의 적과 싸워보자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    542: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '控制远处敌人的仇恨',
            'de': 'Aus der Ferne Feindseligkeit auf sich ziehen',
            'en': 'Execute a Ranged Attack to Increase Enmity',
            'fr': 'Générer de l\'inimitié à distance',
            'ja': '遠距離から敵視を集めよう！',
            'ko': '멀리서 적개심을 끌자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    543: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '留心增援的敌人',
            'de': 'Feindliche Verstärkung aufhalten',
            'en': 'Engage Enemy Reinforcements',
            'fr': 'Faire face à des renforts ennemis',
            'ja': '敵の増援に対応しよう！',
            'ko': '적 지원군에 대처하자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    544: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '配合防护职业打倒单个敌人',
            'de': 'Gegner gemeinsam besiegen',
            'en': 'Assist Allies in Defeating a Target',
            'fr': 'Vaincre un ennemi en assistant des alliés',
            'ja': '味方と協力して敵を倒そう！',
            'ko': '파티원과 협력하여 적을 물리치자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    545: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '配合防护职业打倒多个敌人',
            'de': 'Den Gegner eines Verbündeten besiegen',
            'en': 'Defeat an Occupied Target',
            'fr': 'Vaincre un ennemi occupé par un allié',
            'ja': '味方が引きつけている敵を倒そう！',
            'ko': '파티원과 같은 적을 공격하자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    546: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '躲避范围攻击的同时进行战斗',
            'de': 'Angriffen ausweichen',
            'en': 'Avoid Engaged Targets',
            'fr': 'Combattre en évitant les attaques ennemies',
            'ja': '敵の攻撃を避けながら戦おう！',
            'ko': '적의 공격을 피하면서 싸우자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    548: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '灵活运用场地机关',
            'de': 'Mit dem Gelände interagieren',
            'en': 'Interact with the Battlefield',
            'fr': 'Interagir avec le décor en combat',
            'ja': 'ギミックを活用して戦おう！',
            'ko': '특수 장치를 활용하며 싸우자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    549: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '治疗防护职业',
            'de': 'Verbündete heilen',
            'en': 'Heal an Ally',
            'fr': 'Soigner un allié',
            'ja': '味方を回復しよう！',
            'ko': '파티원을 회복시키자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    550: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '治疗小队队员',
            'de': 'Mehrere Verbündete heilen',
            'en': 'Heal Multiple Allies',
            'fr': 'Soigner plusieurs alliés',
            'ja': '複数の味方を回復しよう！',
            'ko': '다수의 파티원을 회복시키자!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    552: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'cn': '最终训练',
            'de': 'Letzte Übung',
            'en': 'Final Exercise',
            'fr': 'Exercice final',
            'ja': '最終訓練！',
            'ko': '마지막 훈련!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    554: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '荣誉野（碎冰战）',
            'de': 'Feld der Ehre (Zersplitterung)',
            'en': 'The Fields of Glory (Shatter)',
            'fr': 'Les Champs de la Gloire (brise-glace)',
            'ja': 'フィールド・オブ・グローリー (砕氷戦)',
            'ko': '영광의 평원(쇄빙전)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 67,
    },
    555: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '(6.2)天龙宫殿忆罪宫',
            'de': '(6.2)Sohr Khai',
            'en': '(6.2)Sohr Khai',
            'fr': '(6.2)Sohr Khai',
            'ja': '(6.2)天竜宮殿 ソール・カイ',
            'ko': '(6.2)소르 카이',
        },
        'offsetX': 370,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    556: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '禁忌城邦玛哈',
            'de': 'Die Stadt der Tränen',
            'en': 'The Weeping City of Mhach',
            'fr': 'La Cité défendue de Mhach',
            'ja': '禁忌都市マハ',
            'ko': '금기도시 마하',
        },
        'offsetX': -40,
        'offsetY': -40,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    557: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '黑涡传说破舰岛',
            'de': 'Schiffbrecher-Insel (schwer)',
            'en': 'Hullbreaker Isle (Hard)',
            'fr': 'L\'Île de Crèvecarène (brutal)',
            'ja': '黒渦伝説 ハルブレーカー・アイル (Hard)',
            'ko': '난파선의 섬(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 68,
    },
    558: {
        'contentType': 9,
        'exVersion': 0,
        'name': {
            'cn': '水城宝物库',
            'de': 'Aquapolis',
            'en': 'The Aquapolis',
            'fr': 'L\'Aquapole',
            'ja': '宝物庫 アクアポリス',
            'ko': '보물고 아쿠아폴리스',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    559: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '尼德霍格征龙战',
            'de': 'Der letzte Schicksalsweg',
            'en': 'The Final Steps of Faith',
            'fr': 'La Dernière avancée de la Foi',
            'ja': 'ニーズヘッグ征竜戦',
            'ko': '니드호그 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 28,
    },
    560: {
        'contentType': 7,
        'exVersion': 1,
        'name': {
            'cn': '雷古拉·范·休著斯追击战',
            'de': 'Blutiges Wieder­sehen',
            'en': 'A Bloody Reunion',
            'fr': 'Course-poursuite dans le laboratoire',
            'ja': 'レグラ・ヴァン・ヒュドルス追撃戦',
            'ko': '레굴라 반 히드루스 추격전',
        },
        'offsetX': -18,
        'offsetY': 149,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    561: {
        'contentType': 21,
        'exVersion': 0,
        'name': {
            'cn': '死者宫殿 地下1～10层',
            'de': 'Palast der Toten (Ebenen 1-10)',
            'en': 'The Palace of the Dead (Floors 1-10)',
            'fr': 'Le Palais des morts (sous-sols 1-10)',
            'ja': '死者の宮殿 B1～B10',
            'ko': '망자의 궁전 B1~B10',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    562: {
        'contentType': 21,
        'exVersion': 0,
        'name': {
            'cn': '死者宫殿 地下11～20层',
            'de': 'Palast der Toten (Ebenen 11-20)',
            'en': 'The Palace of the Dead (Floors 11-20)',
            'fr': 'Le Palais des morts (sous-sols 11-20)',
            'ja': '死者の宮殿 B11～B20',
            'ko': '망자의 궁전 B11~B20',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    563: {
        'contentType': 21,
        'exVersion': 0,
        'name': {
            'cn': '死者宫殿 地下21～30层',
            'de': 'Palast der Toten (Ebenen 21-30)',
            'en': 'The Palace of the Dead (Floors 21-30)',
            'fr': 'Le Palais des morts (sous-sols 21-30)',
            'ja': '死者の宮殿 B21～B30',
            'ko': '망자의 궁전 B21~B30',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    564: {
        'contentType': 21,
        'exVersion': 0,
        'name': {
            'cn': '死者宫殿 地下31～40层',
            'de': 'Palast der Toten (Ebenen 31-40)',
            'en': 'The Palace of the Dead (Floors 31-40)',
            'fr': 'Le Palais des morts (sous-sols 31-40)',
            'ja': '死者の宮殿 B31～B40',
            'ko': '망자의 궁전 B31~B40',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    565: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下41～50层',
            'de': 'Palast der Toten (Ebenen 41-50)',
            'en': 'The Palace of the Dead (Floors 41-50)',
            'fr': 'Le Palais des morts (sous-sols 41-50)',
            'ja': '死者の宮殿 B41～B50',
            'ko': '망자의 궁전 B41~B50',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    566: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '尼德霍格传奇征龙战',
            'de': 'Das Lied von Nidhoggs letztem Ruf',
            'en': 'The Minstrel\'s Ballad: Nidhogg\'s Rage',
            'fr': 'L\'ire de Nidhogg',
            'ja': '極ニーズヘッグ征竜戦',
            'ko': '극 니드호그 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 28,
    },
    571: {
        'contentType': 22,
        'exVersion': 0,
        'name': {
            'cn': '亡灵府邸闹鬼庄园',
            'de': 'Das Geisterschloss',
            'en': 'The Haunted Manor',
            'fr': 'Le Manoir hanté',
            'ja': '亡霊屋敷 ホーンテッドマナー',
            'ko': '유령의 집',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    572: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '(6.2)险峻峡谷塞尔法特尔溪谷',
            'de': '(6.2)Xelphatol',
            'en': '(6.2)Xelphatol',
            'fr': '(6.2)Xelphatol',
            'ja': '(6.2)峻厳渓谷 ゼルファトル',
            'ko': '(6.2)젤파톨',
        },
        'offsetX': -148,
        'offsetY': 35,
        'sizeFactor': 200,
        'weatherRate': 40,
    },
    576: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '索菲娅歼灭战',
            'de': 'Götterdämmerung - Sophia',
            'en': 'Containment Bay P1T6',
            'fr': 'Unité de contention P1P6',
            'ja': '女神ソフィア討滅戦',
            'ko': '여신 소피아 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 69,
    },
    577: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '索菲娅歼殛战',
            'de': 'Zenit der Götter - Sophia',
            'en': 'Containment Bay P1T6 (Extreme)',
            'fr': 'Unité de contention P1P6 (extrême)',
            'ja': '極女神ソフィア討滅戦',
            'ko': '극 여신 소피아 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 69,
    },
    578: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '秘本宝库迦巴勒幻想图书馆',
            'de': 'Große Gubal-Bibliothek (schwer)',
            'en': 'The Great Gubal Library (Hard)',
            'fr': 'La Grande bibliothèque de Gubal (brutal)',
            'ja': '稀書回収 グブラ幻想図書館 (Hard)',
            'ko': '구브라 환상도서관(어려움)',
        },
        'offsetX': 116,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    579: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '九宫幻卡：幻卡对局室',
            'de': 'Triple Triad: Weltensalon',
            'en': 'The Triple Triad Battlehall',
            'fr': 'Arène Triple Triade',
            'ja': 'トリプルトライアド：カードバトルルーム',
            'ko': '트리플 트라이어드: 카드 대결장',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 800,
        'weatherRate': 0,
    },
    580: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 天动之章1',
            'de': 'Alexander - Augen des Schöpfers',
            'en': 'Alexander - The Eyes of the Creator',
            'fr': 'Alexander - Les Yeux du Créateur',
            'ja': '機工城アレキサンダー：天動編1',
            'ko': '기공성 알렉산더: 천동편 1',
        },
        'offsetX': 75,
        'offsetY': 14,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    581: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 天动之章2',
            'de': 'Alexander - Atem des Schöpfers',
            'en': 'Alexander - The Breath of the Creator',
            'fr': 'Alexander - Le Souffle du Créateur',
            'ja': '機工城アレキサンダー：天動編2',
            'ko': '기공성 알렉산더: 천동편 2',
        },
        'offsetX': 0,
        'offsetY': -80,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    582: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 天动之章3',
            'de': 'Alexander - Herz des Schöpfers',
            'en': 'Alexander - The Heart of the Creator',
            'fr': 'Alexander - Le Cœur du Créateur',
            'ja': '機工城アレキサンダー：天動編3',
            'ko': '기공성 알렉산더: 천동편 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    583: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大机神城 天动之章4',
            'de': 'Alexander - Seele des Schöpfers',
            'en': 'Alexander - The Soul of the Creator',
            'fr': 'Alexander - L\'Âme du Créateur',
            'ja': '機工城アレキサンダー：天動編4',
            'ko': '기공성 알렉산더: 천동편 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    584: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 天动之章1',
            'de': 'Alexander - Augen des Schöpfers (episch)',
            'en': 'Alexander - The Eyes of the Creator (Savage)',
            'fr': 'Alexander - Les Yeux du Créateur (sadique)',
            'ja': '機工城アレキサンダー零式：天動編1',
            'ko': '기공성 알렉산더: 천동편(영웅) 1',
        },
        'offsetX': 75,
        'offsetY': 14,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    585: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 天动之章2',
            'de': 'Alexander - Atem des Schöpfers (episch)',
            'en': 'Alexander - The Breath of the Creator (Savage)',
            'fr': 'Alexander - Le Souffle du Créateur (sadique)',
            'ja': '機工城アレキサンダー零式：天動編2',
            'ko': '기공성 알렉산더: 천동편(영웅) 2',
        },
        'offsetX': 0,
        'offsetY': -80,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    586: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 天动之章3',
            'de': 'Alexander - Herz des Schöpfers (episch)',
            'en': 'Alexander - The Heart of the Creator (Savage)',
            'fr': 'Alexander - Le Cœur du Créateur (sadique)',
            'ja': '機工城アレキサンダー零式：天動編3',
            'ko': '기공성 알렉산더: 천동편(영웅) 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    587: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '亚历山大零式机神城 天动之章4',
            'de': 'Alexander - Seele des Schöpfers (episch)',
            'en': 'Alexander - The Soul of the Creator (Savage)',
            'fr': 'Alexander - L\'Âme du Créateur (sadique)',
            'ja': '機工城アレキサンダー零式：天動編4',
            'ko': '기공성 알렉산더: 천동편(영웅) 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    589: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '萌宠之王：玩家对战（绩点赛）',
            'de': 'Kampf der Trabanten: Gegen Spieler (um RP)',
            'en': 'LoVM: Player Battle (RP)',
            'fr': 'Bataille simple contre un joueur (avec PR)',
            'ja': 'LoVM：プレイヤー対戦 (RP変動あり)',
            'ko': '꼬마 친구 공방전: 플레이어 대결(RP 변동 있음)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    590: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '萌宠之王：大赛对战（玩家对战）',
            'de': 'Kampf der Trabanten: Turnier (gegen Spieler)',
            'en': 'LoVM: Tournament',
            'fr': 'Bataille de tournoi contre des joueurs',
            'ja': 'LoVM：大会対戦 (プレイヤー対戦）',
            'ko': '꼬마 친구 공방전: 대회 대결(플레이어 대결)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    591: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '萌宠之王：玩家对战（无绩点赛）',
            'de': 'Kampf der Trabanten: Gegen Spieler (ohne RP)',
            'en': 'LoVM: Player Battle (Non-RP)',
            'fr': 'Bataille simple contre un joueur (sans PR)',
            'ja': 'LoVM：プレイヤー対戦 (RP変動なし)',
            'ko': '꼬마 친구 공방전: 플레이어 대결(RP 변동 없음)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    592: {
        'contentType': 7,
        'exVersion': 1,
        'name': {
            'cn': '纠缠不清的宿命',
            'de': 'Weltenübergreifendes Schicksal',
            'en': 'One Life for One World',
            'fr': 'Destins entrecroisés',
            'ja': '絡み合う宿命',
            'ko': '뒤얽히는 숙명',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 28,
    },
    593: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下51～60层',
            'de': 'Palast der Toten (Ebenen 51 - 60)',
            'en': 'The Palace of the Dead (Floors 51-60)',
            'fr': 'Le Palais des morts (sous-sols 51-60)',
            'ja': '死者の宮殿 B51～B60',
            'ko': '망자의 궁전 B51~B60',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    594: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下61～70层',
            'de': 'Palast der Toten (Ebenen 61 - 70)',
            'en': 'The Palace of the Dead (Floors 61-70)',
            'fr': 'Le Palais des morts (sous-sols 61-70)',
            'ja': '死者の宮殿 B61～B70',
            'ko': '망자의 궁전 B61~B70',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    595: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下71～80层',
            'de': 'Palast der Toten (Ebenen 71 - 80)',
            'en': 'The Palace of the Dead (Floors 71-80)',
            'fr': 'Le Palais des morts (sous-sols 71-80)',
            'ja': '死者の宮殿 B71～B80',
            'ko': '망자의 궁전 B71~B80',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    596: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下81～90层',
            'de': 'Palast der Toten (Ebenen 81 - 90)',
            'en': 'The Palace of the Dead (Floors 81-90)',
            'fr': 'Le Palais des morts (sous-sols 81-90)',
            'ja': '死者の宮殿 B81～B90',
            'ko': '망자의 궁전 B81~B90',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    597: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下91～100层',
            'de': 'Palast der Toten (Ebenen 91 - 100)',
            'en': 'The Palace of the Dead (Floors 91-100)',
            'fr': 'Le Palais des morts (sous-sols 91-100)',
            'ja': '死者の宮殿 B91～B100',
            'ko': '망자의 궁전 B91~B100',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    598: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下101～110层',
            'de': 'Palast der Toten (Ebenen 101 - 110)',
            'en': 'The Palace of the Dead (Floors 101-110)',
            'fr': 'Le Palais des morts (sous-sols 101-110)',
            'ja': '死者の宮殿 B101～B110',
            'ko': '망자의 궁전 B101~B110',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    599: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下111～120层',
            'de': 'Palast der Toten (Ebenen 111 - 120)',
            'en': 'The Palace of the Dead (Floors 111-120)',
            'fr': 'Le Palais des morts (sous-sols 111-120)',
            'ja': '死者の宮殿 B111～B120',
            'ko': '망자의 궁전 B111~B120',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    600: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下121～130层',
            'de': 'Palast der Toten (Ebenen 121 - 130)',
            'en': 'The Palace of the Dead (Floors 121-130)',
            'fr': 'Le Palais des morts (sous-sols 121-130)',
            'ja': '死者の宮殿 B121～B130',
            'ko': '망자의 궁전 B121~B130',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    601: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下131～140层',
            'de': 'Palast der Toten (Ebenen 131 - 140)',
            'en': 'The Palace of the Dead (Floors 131-140)',
            'fr': 'Le Palais des morts (sous-sols 131-140)',
            'ja': '死者の宮殿 B131～B140',
            'ko': '망자의 궁전 B131~B140',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    602: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下141～150层',
            'de': 'Palast der Toten (Ebenen 141 - 150)',
            'en': 'The Palace of the Dead (Floors 141-150)',
            'fr': 'Le Palais des morts (sous-sols 141-150)',
            'ja': '死者の宮殿 B141～B150',
            'ko': '망자의 궁전 B141~B150',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    603: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下151～160层',
            'de': 'Palast der Toten (Ebenen 151 - 160)',
            'en': 'The Palace of the Dead (Floors 151-160)',
            'fr': 'Le Palais des morts (sous-sols 151-160)',
            'ja': '死者の宮殿 B151～B160',
            'ko': '망자의 궁전 B151~B160',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    604: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下161～170层',
            'de': 'Palast der Toten (Ebenen 161 - 170)',
            'en': 'The Palace of the Dead (Floors 161-170)',
            'fr': 'Le Palais des morts (sous-sols 161-170)',
            'ja': '死者の宮殿 B161～B170',
            'ko': '망자의 궁전 B161~B170',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    605: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下171～180层',
            'de': 'Palast der Toten (Ebenen 171 - 180)',
            'en': 'The Palace of the Dead (Floors 171-180)',
            'fr': 'Le Palais des morts (sous-sols 171-180)',
            'ja': '死者の宮殿 B171～B180',
            'ko': '망자의 궁전 B171~B180',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    606: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下181～190层',
            'de': 'Palast der Toten (Ebenen 181 - 190)',
            'en': 'The Palace of the Dead (Floors 181-190)',
            'fr': 'Le Palais des morts (sous-sols 181-190)',
            'ja': '死者の宮殿 B181～B190',
            'ko': '망자의 궁전 B181~B190',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    607: {
        'contentType': 21,
        'exVersion': 1,
        'name': {
            'cn': '死者宫殿 地下191～200层',
            'de': 'Palast der Toten (Ebenen 191 - 200)',
            'en': 'The Palace of the Dead (Floors 191-200)',
            'fr': 'Le Palais des morts (sous-sols 191-200)',
            'ja': '死者の宮殿 B191～B200',
            'ko': '망자의 궁전 B191~B200',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    612: {
        'exVersion': 2,
        'name': {
            'cn': '基拉巴尼亚边区',
            'de': 'Abanisches Grenzland',
            'en': 'The Fringes',
            'fr': 'Les Marges',
            'ja': 'ギラバニア辺境地帯',
            'ko': '기라바니아 변방지대',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 79,
    },
    613: {
        'exVersion': 2,
        'name': {
            'cn': '红玉海',
            'de': 'Rubinsee',
            'en': 'The Ruby Sea',
            'fr': 'Mer de Rubis',
            'ja': '紅玉海',
            'ko': '홍옥해',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 83,
    },
    614: {
        'exVersion': 2,
        'name': {
            'cn': '延夏',
            'de': 'Yanxia',
            'en': 'Yanxia',
            'fr': 'Yanxia',
            'ja': 'ヤンサ',
            'ko': '얀샤',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 84,
    },
    615: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '(6.2)坚牢铁壁巴埃萨长城',
            'de': '(6.2)Baelsar-Wall',
            'en': '(6.2)Baelsar\'s Wall',
            'fr': '(6.2)La Muraille de Baelsar',
            'ja': '(6.2)巨大防壁 バエサルの長城',
            'ko': '(6.2)바일사르 장성',
        },
        'offsetX': 182,
        'offsetY': 32,
        'sizeFactor': 200,
        'weatherRate': 40,
    },
    616: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '海底宫殿紫水宫',
            'de': 'Shisui',
            'en': 'Shisui of the Violet Tides',
            'fr': 'Le Palais aux Marées violettes',
            'ja': '海底宮殿 紫水宮',
            'ko': '시스이 궁',
        },
        'offsetX': 0,
        'offsetY': 35,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    617: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '天山深境索姆阿尔灵峰',
            'de': 'Sohm Al (schwer)',
            'en': 'Sohm Al (Hard)',
            'fr': 'Sohm Al (brutal)',
            'ja': '霊峰浄化 ソーム・アル (Hard)',
            'ko': '솜 알(어려움)',
        },
        'offsetX': 128,
        'offsetY': -32,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    620: {
        'exVersion': 2,
        'name': {
            'cn': '基拉巴尼亚山区',
            'de': 'Die Zinnen',
            'en': 'The Peaks',
            'fr': 'Les Pics',
            'ja': 'ギラバニア山岳地帯',
            'ko': '기라바니아 산악지대',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 80,
    },
    621: {
        'exVersion': 2,
        'name': {
            'cn': '基拉巴尼亚湖区',
            'de': 'Das Fenn',
            'en': 'The Lochs',
            'fr': 'Les Lacs',
            'ja': 'ギラバニア湖畔地帯',
            'ko': '기라바니아 호반지대',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 81,
    },
    622: {
        'exVersion': 2,
        'name': {
            'cn': '太阳神草原',
            'de': 'Azim-Steppe',
            'en': 'The Azim Steppe',
            'fr': 'Steppe d\'Azim',
            'ja': 'アジムステップ',
            'ko': '아짐 대초원',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 85,
    },
    623: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '(6.3)试炼行路巴儿达木霸道',
            'de': '(6.3)Bardams Probe',
            'en': '(6.3)Bardam\'s Mettle',
            'fr': '(6.3)La Force de Bardam',
            'ja': '(6.3)伝統試練 バルダム覇道',
            'ko': '(6.3)바르담 패도',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    624: {
        'contentType': 23,
        'exVersion': 1,
        'name': {
            'cn': '云冠群岛白昼探索（狩猎专用）',
            'de': 'Das Diadem - Jagdgründe (leicht)',
            'en': 'The Diadem Hunting Grounds (Easy)',
            'fr': 'Le Diadème : terrains de chasse (facile)',
            'ja': '雲海探索 ディアデム諸島：狩猟限定 (Easy)',
            'ko': '디아뎀 제도: 전투 한정(쉬움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 60,
    },
    625: {
        'contentType': 23,
        'exVersion': 1,
        'name': {
            'cn': '云冠群岛黄昏探索（狩猎专用）',
            'de': 'Das Diadem - Jagdgründe',
            'en': 'The Diadem Hunting Grounds',
            'fr': 'Le Diadème : terrains de chasse',
            'ja': '雲海探索 ディアデム諸島：狩猟限定',
            'ko': '디아뎀 제도: 전투 한정',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 61,
    },
    626: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '(6.3)漂流海域妖歌海',
            'de': '(6.3)Sirenen-See',
            'en': '(6.3)The Sirensong Sea',
            'fr': '(6.3)La Mer du Chant des sirènes',
            'ja': '(6.3)漂流海域 セイレーン海',
            'ko': '(6.3)세이렌 해',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 36,
    },
    627: {
        'contentType': 5,
        'exVersion': 1,
        'name': {
            'cn': '影之国',
            'de': 'Dun Scaith',
            'en': 'Dun Scaith',
            'fr': 'Dun Scaith',
            'ja': '影の国ダン・スカー',
            'ko': '둔 스카',
        },
        'offsetX': -350,
        'offsetY': -400,
        'sizeFactor': 200,
        'weatherRate': 58,
    },
    628: {
        'exVersion': 2,
        'name': {
            'cn': '黄金港',
            'de': 'Kugane',
            'en': 'Kugane',
            'fr': 'Kugane',
            'ja': 'クガネ',
            'ko': '쿠가네',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 82,
    },
    630: {
        'contentType': 23,
        'exVersion': 0,
        'name': {
            'cn': '云冠群岛战争神猎场',
            'de': 'Das Diadem - Halones Prüfung',
            'en': 'The Diadem - Trials of the Fury',
            'fr': 'Le Diadème - Épreuves de Halone',
            'ja': '雲海探索 ディアデム諸島 (狩猟)',
            'ko': '디아뎀 제도: 전투',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    633: {
        'contentType': 7,
        'exVersion': 1,
        'name': {
            'cn': '加尔提诺平原遭遇战',
            'de': 'Heliodrom',
            'en': 'The Carteneau Flats: Heliodrome',
            'fr': 'Rixe à l\'Héliodrome',
            'ja': 'カルテノー平原遭遇戦',
            'ko': '카르테노 평원 조우전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    635: {
        'exVersion': 2,
        'name': {
            'cn': '神拳痕',
            'de': 'Rhalgrs Wacht',
            'en': 'Rhalgr\'s Reach',
            'fr': 'L\'Étendue de Rhalgr',
            'ja': 'ラールガーズリーチ',
            'ko': '랄거의 손길',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 78,
    },
    637: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '祖尔宛歼灭战',
            'de': 'Götterdämmerung - Zurvan',
            'en': 'Containment Bay Z1T9',
            'fr': 'Unité de contention Z1P9',
            'ja': '鬼神ズルワーン討滅戦',
            'ko': '귀신 주르반 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 75,
    },
    638: {
        'contentType': 4,
        'exVersion': 1,
        'name': {
            'cn': '祖尔宛歼殛战',
            'de': 'Zenit der Götter - Zurvan',
            'en': 'Containment Bay Z1T9 (Extreme)',
            'fr': 'Unité de contention Z1P9 (extrême)',
            'ja': '極鬼神ズルワーン討滅戦',
            'ko': '극 귀신 주르반 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 75,
    },
    656: {
        'contentType': 23,
        'exVersion': 1,
        'name': {
            'cn': '云冠群岛丰饶神福地',
            'de': 'Das Diadem - Nophicas Prüfung',
            'en': 'The Diadem - Trials of the Matron',
            'fr': 'Le Diadème - Épreuves de Nophica',
            'ja': '雲海探索 ディアデム諸島 (採集)',
            'ko': '디아뎀 제도: 채집',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 71,
    },
    660: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '(6.3)解放决战多玛王城',
            'de': '(6.3)Burg Doma',
            'en': '(6.3)Doma Castle',
            'fr': '(6.3)Le Château de Doma',
            'ja': '(6.3)解放決戦 ドマ城',
            'ko': '(6.3)도마 성',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    661: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '(6.3)巨炮要塞帝国白山堡',
            'de': '(6.3)Castrum Abania',
            'en': '(6.3)Castrum Abania',
            'fr': '(6.3)Castrum Abania',
            'ja': '(6.3)巨砲要塞 カストルム・アバニア',
            'ko': '(6.3)카스트룸 아바니아',
        },
        'offsetX': 72,
        'offsetY': -186,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    662: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '恶党孤城黄金阁',
            'de': 'Schloss Kugane',
            'en': 'Kugane Castle',
            'fr': 'Le Château de Kugane',
            'ja': '悪党成敗 クガネ城',
            'ko': '쿠가네 성',
        },
        'offsetX': 70,
        'offsetY': 33,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    663: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '修行古刹星导寺',
            'de': 'Tempel der Faust',
            'en': 'The Temple of the Fist',
            'fr': 'Le Temple du Poing',
            'ja': '壊神修行 星導山寺院',
            'ko': '성도산 사원',
        },
        'offsetX': -427,
        'offsetY': -314,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    665: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '鱼道现身！',
            'de': 'Ein zweifelhaftes Angebot',
            'en': 'It\'s Probably a Trap',
            'fr': 'Un drôle de Namazu',
            'ja': 'ギョドウ現る！',
            'ko': '교도 등장!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    674: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '须佐之男歼灭战',
            'de': 'Götterdämmerung - Susano',
            'en': 'The Pool of Tribute',
            'fr': 'La Crique aux tributs',
            'ja': 'スサノオ討滅戦',
            'ko': '스사노오 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 77,
    },
    677: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '须佐之男歼殛战',
            'de': 'Zenit der Götter - Susano',
            'en': 'The Pool of Tribute (Extreme)',
            'fr': 'La Crique aux tributs (extrême)',
            'ja': '極スサノオ討滅戦',
            'ko': '극 스사노오 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 77,
    },
    679: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '神龙歼灭战',
            'de': 'Königliche Menagerie',
            'en': 'The Royal Menagerie',
            'fr': 'La Ménagerie royale',
            'ja': '神龍討滅戦',
            'ko': '신룡 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 76,
    },
    684: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '于里昂热的秘策',
            'de': 'Wege zur Transzendenz',
            'en': 'The Resonant',
            'fr': 'La ruse d\'Urianger',
            'ja': 'ウリエンジェの秘策',
            'ko': '위리앙제의 비책',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    688: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '那达慕',
            'de': 'Naadam',
            'en': 'Naadam',
            'fr': 'La grande bataille du Naadam',
            'ja': '終節の合戦',
            'ko': '계절끝 합전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    689: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '(6.3)鏖战红莲阿拉米格',
            'de': '(6.3)Ala Mhigo',
            'en': '(6.3)Ala Mhigo',
            'fr': '(6.3)Ala Mhigo',
            'ja': '(6.3)紅蓮決戦 アラミゴ',
            'ko': '(6.3)알라미고',
        },
        'offsetX': 292,
        'offsetY': -163,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    690: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '时空狭缝外缘',
            'de': 'Interdimensionaler Riss',
            'en': 'Interdimensional Rift',
            'fr': 'Fissure interdimensionnelle',
            'ja': '次元の狭間：外縁',
            'ko': '차원의 틈: 외곽',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 88,
    },
    691: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 德尔塔幻境1',
            'de': 'Deltametrie 1.0',
            'en': 'Deltascape V1.0',
            'fr': 'Deltastice v1.0',
            'ja': '次元の狭間オメガ：デルタ編1',
            'ko': '차원의 틈 오메가: 델타편 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 88,
    },
    692: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 德尔塔幻境2',
            'de': 'Deltametrie 2.0',
            'en': 'Deltascape V2.0',
            'fr': 'Deltastice v2.0',
            'ja': '次元の狭間オメガ：デルタ編2',
            'ko': '차원의 틈 오메가: 델타편 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 88,
    },
    693: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 德尔塔幻境3',
            'de': 'Deltametrie 3.0',
            'en': 'Deltascape V3.0',
            'fr': 'Deltastice v3.0',
            'ja': '次元の狭間オメガ：デルタ編3',
            'ko': '차원의 틈 오메가: 델타편 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 88,
    },
    694: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 德尔塔幻境4',
            'de': 'Deltametrie 4.0',
            'en': 'Deltascape V4.0',
            'fr': 'Deltastice v4.0',
            'ja': '次元の狭間オメガ：デルタ編4',
            'ko': '차원의 틈 오메가: 델타편 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 88,
    },
    695: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 德尔塔幻境1',
            'de': 'Deltametrie 1.0 (episch)',
            'en': 'Deltascape V1.0 (Savage)',
            'fr': 'Deltastice v1.0 (sadique)',
            'ja': '次元の狭間オメガ零式：デルタ編1',
            'ko': '차원의 틈 오메가: 델타편(영웅) 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 88,
    },
    696: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 德尔塔幻境2',
            'de': 'Deltametrie 2.0 (episch)',
            'en': 'Deltascape V2.0 (Savage)',
            'fr': 'Deltastice v2.0 (sadique)',
            'ja': '次元の狭間オメガ零式：デルタ編2',
            'ko': '차원의 틈 오메가: 델타편(영웅) 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 88,
    },
    697: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 德尔塔幻境3',
            'de': 'Deltametrie 3.0 (episch)',
            'en': 'Deltascape V3.0 (Savage)',
            'fr': 'Deltastice v3.0 (sadique)',
            'ja': '次元の狭間オメガ零式：デルタ編3',
            'ko': '차원의 틈 오메가: 델타편(영웅) 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 88,
    },
    698: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 德尔塔幻境4',
            'de': 'Deltametrie 4.0 (episch)',
            'en': 'Deltascape V4.0 (Savage)',
            'fr': 'Deltastice v4.0 (sadique)',
            'ja': '次元の狭間オメガ零式：デルタ編4',
            'ko': '차원의 틈 오메가: 델타편(영웅) 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 88,
    },
    705: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '大会开始',
            'de': 'Thal zu Ehren',
            'en': 'In Thal\'s Name',
            'fr': 'Le tournoi commémoratif du sultanat',
            'ja': 'ウル王杯闘技会の始まり',
            'ko': '울다하 왕실배 투기대회',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 8,
    },
    706: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '为了更强',
            'de': 'Die hohe Kunst des Schwertkampfs',
            'en': 'Raising the Sword',
            'fr': 'La finale des champions',
            'ja': 'さらなる剣術の高みへ',
            'ko': '더 높은 검술의 경지로',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 8,
    },
    707: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '抗争之力',
            'de': 'Die Kraft des Widerstands',
            'en': 'With Heart and Steel',
            'fr': 'Transmigration démoniaque',
            'ja': '抗う力',
            'ko': '맞서는 힘',
        },
        'offsetX': 298,
        'offsetY': 350,
        'sizeFactor': 200,
        'weatherRate': 37,
    },
    708: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '海都路人身首异',
            'de': 'Mord ist sein Hobby',
            'en': 'Blood on the Deck',
            'fr': 'La légende de Musosai : l\'assassin de Limsa Lominsa',
            'ja': '海都を震わす人斬りの宴！',
            'ko': '해양도시를 흔드는 살인자의 연회!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    709: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '极恶之人木枯',
            'de': 'Der Inbegriff des Bösen',
            'en': 'The Face of True Evil',
            'fr': 'L\'abominable Kogarashi',
            'ja': '極悪人コガラシ',
            'ko': '극악무도한 코가라시',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 95,
        'weatherRate': 49,
    },
    710: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '松叶门外之变',
            'de': 'Vorfall auf dem Matsuba-Platz',
            'en': 'Matsuba Mayhem',
            'fr': 'Règlement de compte au square Matsuba',
            'ja': '松葉門外の変',
            'ko': '마츠바 사변',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 82,
    },
    711: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '决战龟甲岛',
            'de': 'Ent­schei­dungs­schlacht auf Bekko',
            'en': 'The Battle on Bekko',
            'fr': 'L\'af­fron­te­ment de deux justices',
            'ja': 'ベッコウ島の決闘',
            'ko': '베코우 섬의 결투',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 83,
    },
    712: {
        'contentType': 9,
        'exVersion': 2,
        'name': {
            'cn': '运河宝物库',
            'de': 'Kanäle von Uznair',
            'en': 'The Lost Canals of Uznair',
            'fr': 'Les Canaux perdus d\'Uznair',
            'ja': '宝物庫 ウズネアカナル',
            'ko': '보물고 우즈네어 운하',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    713: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '漆黑的巨龙',
            'de': 'Der tobende Drache',
            'en': 'Dark as the Night Sky',
            'fr': 'Aussi sombre que la nuit',
            'ja': '漆黒の巨竜',
            'ko': '칠흑의 거룡',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 85,
    },
    714: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '红血之龙骑士',
            'de': 'Der Rubin-Drachenreiter',
            'en': 'Dragon Sound',
            'fr': 'Le Dragon écarlate',
            'ja': '紅の竜騎士',
            'ko': '붉은 용기사',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    715: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '遥远的憧憬',
            'de': 'Probe des Meisters',
            'en': 'The Orphans and the Broken Blade',
            'fr': 'L\'aspiration refoulée',
            'ja': 'あと三度、遥かな憧憬',
            'ko': '앞으로 세 번, 아득한 동경',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 95,
        'weatherRate': 86,
    },
    716: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '再次相见',
            'de': 'Aus der Tiefe des Herzens',
            'en': 'Our Compromise',
            'fr': 'La dernière séparation',
            'ja': 'あと一度、君に会えたら',
            'ko': '앞으로 한 번, 너와 만날 수 있다면',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 28,
    },
    717: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '原初的战士',
            'de': 'Die Urkraft in ihr',
            'en': 'Curious Gorge Meets His Match',
            'fr': 'L\'épreuve de force',
            'ja': '原初的な彼女',
            'ko': '원초적 그녀',
        },
        'offsetX': -77,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    718: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '燃烧吧高吉',
            'de': 'Kriegerische Leidenschaft',
            'en': 'The Heart of the Problem',
            'fr': 'Passion guerrière',
            'ja': '燃えよゴージ！',
            'ko': '불타올라라, 산골짜기!',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 85,
    },
    719: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '吉祥天女歼灭战',
            'de': 'Götterdämmerung - Lakshmi',
            'en': 'Emanation',
            'fr': 'Émanation',
            'ja': 'ラクシュミ討滅戦',
            'ko': '락슈미 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 87,
    },
    720: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '吉祥天女歼殛战',
            'de': 'Zenit der Götter - Lakshmi',
            'en': 'Emanation (Extreme)',
            'fr': 'Émanation (extrême)',
            'ja': '極ラクシュミ討滅戦',
            'ko': '극 락슈미 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 87,
    },
    722: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '穿越时空的夙愿',
            'de': 'Ein Wunsch aus alten Zeiten',
            'en': 'Our Unsung Heroes',
            'fr': 'L\'espoir en héritage',
            'ja': '時をかける願い',
            'ko': '시간을 뛰어넘은 염원',
        },
        'offsetX': -175,
        'offsetY': -297,
        'sizeFactor': 200,
        'weatherRate': 63,
    },
    723: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '影隐忍法贴',
            'de': 'Aus dem Verborgenen',
            'en': 'When Clans Collide',
            'fr': 'La bataille des clans',
            'ja': '影隠忍法帖',
            'ko': '그림자 인법첩',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 85,
    },
    725: {
        'contentType': 9,
        'exVersion': 2,
        'name': {
            'cn': '运河宝物库深层',
            'de': 'Vergessene Kanäle von Uznair',
            'en': 'The Hidden Canals of Uznair',
            'fr': 'Les Canaux cachés d\'Uznair',
            'ja': '宝物庫 ウズネアカナル深層',
            'ko': '보물고 우즈네어 운하 심층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    729: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '距骨研究所（机动战）',
            'de': 'Astragalos',
            'en': 'Astragalos',
            'fr': 'Astragalos (machinerie)',
            'ja': 'アストラガロス (機工戦)',
            'ko': '아스트라갈로스(기공전)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    730: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '神龙梦幻歼灭战',
            'de': 'Heldenlied von Shinryu',
            'en': 'The Minstrel\'s Ballad: Shinryu\'s Domain',
            'fr': 'Le domaine de Shinryu',
            'ja': '極神龍討滅戦',
            'ko': '극 신룡 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 76,
    },
    731: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '(6.4)沉没神殿斯卡拉遗迹',
            'de': '(6.4)Die versunkene Stadt Skalla',
            'en': '(6.4)The Drowned City of Skalla',
            'fr': '(6.4)La Cité engloutie de Skalla',
            'ja': '(6.4)水没遺構 スカラ',
            'ko': '(6.4)스칼라 유적',
        },
        'offsetX': 185,
        'offsetY': 5,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    732: {
        'contentType': 26,
        'exVersion': 2,
        'name': {
            'cn': '禁地优雷卡 常风之地',
            'de': 'Eureka Anemos',
            'en': 'The Forbidden Land, Eureka Anemos',
            'fr': 'Eurêka Anemos',
            'ja': '禁断の地 エウレカ：アネモス編',
            'ko': '금단의 땅 에우레카: 아네모스편',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 91,
    },
    733: {
        'contentType': 28,
        'exVersion': 2,
        'name': {
            'cn': '巴哈姆特绝境战',
            'de': 'Endlose Schatten von Bahamut (fatal)',
            'en': 'The Unending Coil of Bahamut (Ultimate)',
            'fr': 'L\'Abîme infini de Bahamut (fatal)',
            'ja': '絶バハムート討滅戦',
            'ko': '절 바하무트 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    734: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '失落之都拉巴纳斯塔',
            'de': 'Rabanastre',
            'en': 'The Royal City of Rabanastre',
            'fr': 'La Cité royale de Rabanastre',
            'ja': '失われた都 ラバナスタ',
            'ko': '왕도 라바나스터',
        },
        'offsetX': 300,
        'offsetY': -100,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    741: {
        'contentType': 22,
        'exVersion': 0,
        'name': {
            'cn': '良缘仪式',
            'de': 'Valentionzeremonie',
            'en': 'The Valentione\'s Ceremony',
            'fr': 'La Cérémonie de la Valention',
            'ja': 'ヴァレンティオンセレモニー',
            'ko': '발렌티온 예식장',
        },
        'offsetX': 0,
        'offsetY': 125,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    742: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '红玉火山狱之盖',
            'de': 'Höllenspund',
            'en': 'Hells\' Lid',
            'fr': 'Le Couvercle des enfers',
            'ja': '紅玉火山 獄之蓋',
            'ko': '지옥뚜껑',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    743: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '疯狂战舰无限回廊',
            'de': 'Die Fraktal-Kontinuum (schwer)',
            'en': 'The Fractal Continuum (Hard)',
            'fr': 'Le Continuum fractal (brutal)',
            'ja': '暴走戦艦 フラクタル・コンティニアム (Hard)',
            'ko': '무한연속 박물함(어려움)',
        },
        'offsetX': 0,
        'offsetY': 350,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    746: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '白虎镇魂战',
            'de': 'Seelentanz - Byakko',
            'en': 'The Jade Stoa',
            'fr': 'La Clairière de Jade',
            'ja': '白虎征魂戦',
            'ko': '백호 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 93,
    },
    748: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 西格玛幻境1',
            'de': 'Sigmametrie 1.0',
            'en': 'Sigmascape V1.0',
            'fr': 'Sigmastice v1.0',
            'ja': '次元の狭間オメガ：シグマ編1',
            'ko': '차원의 틈 오메가: 시그마편 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    749: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 西格玛幻境2',
            'de': 'Sigmametrie 2.0',
            'en': 'Sigmascape V2.0',
            'fr': 'Sigmastice v2.0',
            'ja': '次元の狭間オメガ：シグマ編2',
            'ko': '차원의 틈 오메가: 시그마편 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    750: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 西格玛幻境3',
            'de': 'Sigmametrie 3.0',
            'en': 'Sigmascape V3.0',
            'fr': 'Sigmastice v3.0',
            'ja': '次元の狭間オメガ：シグマ編3',
            'ko': '차원의 틈 오메가: 시그마편 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    751: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 西格玛幻境4',
            'de': 'Sigmametrie 4.0',
            'en': 'Sigmascape V4.0',
            'fr': 'Sigmastice v4.0',
            'ja': '次元の狭間オメガ：シグマ編4',
            'ko': '차원의 틈 오메가: 시그마편 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    752: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 西格玛幻境1',
            'de': 'Sigmametrie 1.0 (episch)',
            'en': 'Sigmascape V1.0 (Savage)',
            'fr': 'Sigmastice v1.0 (sadique)',
            'ja': '次元の狭間オメガ零式：シグマ編1',
            'ko': '차원의 틈 오메가: 시그마편(영웅) 1',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    753: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 西格玛幻境2',
            'de': 'Sigmametrie 2.0 (episch)',
            'en': 'Sigmascape V2.0 (Savage)',
            'fr': 'Sigmastice v2.0 (sadique)',
            'ja': '次元の狭間オメガ零式：シグマ編2',
            'ko': '차원의 틈 오메가: 시그마편(영웅) 2',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    754: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 西格玛幻境3',
            'de': 'Sigmametrie 3.0 (episch)',
            'en': 'Sigmascape V3.0 (Savage)',
            'fr': 'Sigmastice v3.0 (sadique)',
            'ja': '次元の狭間オメガ零式：シグマ編3',
            'ko': '차원의 틈 오메가: 시그마편(영웅) 3',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    755: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 西格玛幻境4',
            'de': 'Sigmametrie 4.0 (episch)',
            'en': 'Sigmascape V4.0 (Savage)',
            'fr': 'Sigmastice v4.0 (sadique)',
            'ja': '次元の狭間オメガ零式：シグマ編4',
            'ko': '차원의 틈 오메가: 시그마편(영웅) 4',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    758: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '白虎诗魂战',
            'de': 'Seelensturm - Byakko',
            'en': 'The Jade Stoa (Extreme)',
            'fr': 'La Clairière de Jade (extrême)',
            'ja': '極白虎征魂戦',
            'ko': '극 백호 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 93,
    },
    759: {
        'exVersion': 2,
        'name': {
            'cn': '多玛飞地',
            'de': 'Domanische Enklave',
            'en': 'The Doman Enclave',
            'fr': 'Quartier enclavé de Doma',
            'ja': 'ドマ町人地',
            'ko': '도마 도읍지',
        },
        'offsetX': 23,
        'offsetY': 34,
        'sizeFactor': 400,
        'weatherRate': 84,
    },
    761: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '火龙狩猎战',
            'de': 'Jagd auf Rathalos',
            'en': 'The Great Hunt',
            'fr': 'Chasse au Rathalos',
            'ja': 'リオレウス狩猟戦',
            'ko': '리오레우스 수렵전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    762: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '火龙上位狩猎战',
            'de': 'Jagd auf Rathalos (schwer)',
            'en': 'The Great Hunt (Extreme)',
            'fr': 'Chasse au Rathalos (extrême)',
            'ja': '極リオレウス狩猟戦',
            'ko': '극 리오레우스 수렵전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    763: {
        'contentType': 26,
        'exVersion': 2,
        'name': {
            'cn': '禁地优雷卡 恒冰之地',
            'de': 'Eureka Pagos',
            'en': 'The Forbidden Land, Eureka Pagos',
            'fr': 'Eurêka Pagos',
            'ja': '禁断の地 エウレカ：パゴス編',
            'ko': '금단의 땅 에우레카: 파고스편',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 94,
    },
    768: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '风水灵庙岩燕庙',
            'de': 'Kompass der Schwalbe',
            'en': 'The Swallow\'s Compass',
            'fr': 'Le Compas de l\'Hirondelle',
            'ja': '風水霊殿 ガンエン廟',
            'ko': '강엔 종묘',
        },
        'offsetX': 240,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    769: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '拂晓的少年',
            'de': 'Der Knabe der Morgenröte',
            'en': 'Emissary of the Dawn',
            'fr': 'Voyage en terre hostile',
            'ja': '「暁」の少年',
            'ko': '\'새벽\'의 소년',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    770: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 1～10层',
            'de': 'Himmelssäule (Ebenen 1-10)',
            'en': 'Heaven-on-High  (Floors 1-10)',
            'fr': 'Le Pilier des Cieux (étages 1-10)',
            'ja': 'アメノミハシラ 1～10層',
            'ko': '천궁탑 1~10층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    771: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 11～20层',
            'de': 'Himmelssäule (Ebenen 11-20)',
            'en': 'Heaven-on-High  (Floors 11-20)',
            'fr': 'Le Pilier des Cieux (étages 11-20)',
            'ja': 'アメノミハシラ 11～20層',
            'ko': '천궁탑 11~20층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    772: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 21～30层',
            'de': 'Himmelssäule (Ebenen 21-30)',
            'en': 'Heaven-on-High  (Floors 21-30)',
            'fr': 'Le Pilier des Cieux (étages 21-30)',
            'ja': 'アメノミハシラ 21～30層',
            'ko': '천궁탑 21~30층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    773: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 41～50层',
            'de': 'Himmelssäule (Ebenen 41-50)',
            'en': 'Heaven-on-High  (Floors 41-50)',
            'fr': 'Le Pilier des Cieux (étages 41-50)',
            'ja': 'アメノミハシラ 41～50層',
            'ko': '천궁탑 41~50층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    774: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 61～70层',
            'de': 'Himmelssäule (Ebenen 61-70)',
            'en': 'Heaven-on-High  (Floors 61-70)',
            'fr': 'Le Pilier des Cieux (étages 61-70)',
            'ja': 'アメノミハシラ 61～70層',
            'ko': '천궁탑 61~70층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    775: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 81～90层',
            'de': 'Himmelssäule (Ebenen 81-90)',
            'en': 'Heaven-on-High  (Floors 81-90)',
            'fr': 'Le Pilier des Cieux (étages 81-90)',
            'ja': 'アメノミハシラ 81～90層',
            'ko': '천궁탑 81~90층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    776: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '封闭圣塔黎铎拉纳大灯塔',
            'de': 'Richtfeuer von Ridorana',
            'en': 'The Ridorana Lighthouse',
            'fr': 'Le Phare de Ridorana',
            'ja': '封じられた聖塔 リドルアナ',
            'ko': '대등대 리도르아나',
        },
        'offsetX': 202,
        'offsetY': -92,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    777: {
        'contentType': 28,
        'exVersion': 2,
        'name': {
            'cn': '究极神兵绝境战',
            'de': 'Heldenlied von Ultima (fatal)',
            'en': 'The Weapon\'s Refrain (Ultimate)',
            'fr': 'La Fantasmagorie d\'Ultima (fatal)',
            'ja': '絶アルテマウェポン破壊作戦',
            'ko': '절 알테마 웨폰 파괴작전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 26,
    },
    778: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '月读歼灭战',
            'de': 'Götterdämmerung - Tsukuyomi',
            'en': 'Castrum Fluminis',
            'fr': 'Castrum Fluminis',
            'ja': 'ツクヨミ討滅戦',
            'ko': '츠쿠요미 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    779: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '月读幽夜歼灭战',
            'de': 'Zenit der Götter - Tsukuyomi',
            'en': 'The Minstrel\'s Ballad: Tsukuyomi\'s Pain',
            'fr': 'Castrum Fluminis (extrême)',
            'ja': '極ツクヨミ討滅戦',
            'ko': '극 츠쿠요미 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    782: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 31～40层',
            'de': 'Himmelssäule (Ebenen 31-40)',
            'en': 'Heaven-on-High  (Floors 31-40)',
            'fr': 'Le Pilier des Cieux (étages 31-40)',
            'ja': 'アメノミハシラ 31～40層',
            'ko': '천궁탑 31~40층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    783: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 51～60层',
            'de': 'Himmelssäule (Ebenen 51-60)',
            'en': 'Heaven-on-High  (Floors 51-60)',
            'fr': 'Le Pilier des Cieux (étages 51-60)',
            'ja': 'アメノミハシラ 51～60層',
            'ko': '천궁탑 51~60층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    784: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 71～80层',
            'de': 'Himmelssäule (Ebenen 71-80)',
            'en': 'Heaven-on-High  (Floors 71-80)',
            'fr': 'Le Pilier des Cieux (étages 71-80)',
            'ja': 'アメノミハシラ 71～80層',
            'ko': '천궁탑 71~80층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    785: {
        'contentType': 21,
        'exVersion': 2,
        'name': {
            'cn': '天之御柱 91～100层',
            'de': 'Himmelssäule (Ebenen 91-100)',
            'en': 'Heaven-on-High  (Floors 91-100)',
            'fr': 'Le Pilier des Cieux (étages 91-100)',
            'ja': 'アメノミハシラ 91～100層',
            'ko': '천궁탑 91~100층',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    788: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '污染庭园圣茉夏娜植物园',
            'de': 'Sankt Mocianne-Arboretum (schwer)',
            'en': 'Saint Mocianne\'s Arboretum (Hard)',
            'fr': 'L\'Arboretum Sainte-Mocianne (brutal)',
            'ja': '草木汚染 聖モシャーヌ植物園 (Hard)',
            'ko': '성 모샨 식물원(어려움)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    789: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '(6.4)死亡大地终末焦土',
            'de': '(6.4)Das Kargland',
            'en': '(6.4)The Burn',
            'fr': '(6.4)L\'Escarre',
            'ja': '(6.4)永久焦土 ザ・バーン',
            'ko': '(6.4)영구 초토지대',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 97,
    },
    790: {
        'contentType': 22,
        'exVersion': 0,
        'name': {
            'cn': '灾厄重现军事演习',
            'de': 'Gedenkschlacht der Eorzäischen Allianz',
            'en': 'The Calamity Retold',
            'fr': 'Les grandes manœuvres commémoratives',
            'ja': '新生祭軍事演習',
            'ko': '신생제 군사훈련',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 95,
    },
    791: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '隐塞（机动战）',
            'de': 'Verborgene Schlucht',
            'en': 'Hidden Gorge',
            'fr': 'Gorge dérobée (machinerie)',
            'ja': 'ヒドゥンゴージ (機工戦)',
            'ko': '숨겨진 보루(기공전)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    792: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '虚景跳跳乐大挑战',
            'de': 'Kaktor-Kletterwand',
            'en': 'Leap of Faith',
            'fr': 'Haute voltige',
            'ja': '挑戦！ ジャンピングアスレチック',
            'ko': '뛰어라! 점핑 운동회',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    793: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '(6.4)国境防线基姆利特暗区',
            'de': '(6.4)Die Ghimlyt-Finsternis',
            'en': '(6.4)The Ghimlyt Dark',
            'fr': '(6.4)Les Ténèbres de Ghimlyt',
            'ja': '(6.4)境界戦線 ギムリトダーク',
            'ko': '(6.4)김리트 황야',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    794: {
        'contentType': 9,
        'exVersion': 2,
        'name': {
            'cn': '运河宝物库神殿',
            'de': 'Glücksaltäre von Uznair',
            'en': 'The Shifting Altars of Uznair',
            'fr': 'Le Temple sacré d\'Uznair',
            'ja': '宝物庫 ウズネアカナル祭殿',
            'ko': '보물고 우즈네어 운하 제전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    795: {
        'contentType': 26,
        'exVersion': 2,
        'name': {
            'cn': '禁地优雷卡 涌火之地',
            'de': 'Eureka Pyros',
            'en': 'The Forbidden Land, Eureka Pyros',
            'fr': 'Eurêka Pyros',
            'ja': '禁断の地 エウレカ：ピューロス編',
            'ko': '금단의 땅 에우레카: 피로스편',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 96,
    },
    796: {
        'contentType': 27,
        'exVersion': 0,
        'name': {
            'cn': '出道战',
            'de': 'Debüt in der Himmlischen Arena',
            'en': 'All\'s Well That Starts Well',
            'fr': 'Début du spectacle',
            'ja': 'デビューマッチ',
            'ko': '데뷔전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    797: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '楔石洞',
            'de': 'Der Wille der Mondgöttin',
            'en': 'The Will of the Moon',
            'fr': 'Ralliement dans la steppe',
            'ja': '楔石の虚',
            'ko': '쐐기돌 동굴',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    798: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 阿尔法幻境1',
            'de': 'Alphametrie 1.0',
            'en': 'Alphascape V1.0',
            'fr': 'Alphastice v1.0',
            'ja': '次元の狭間オメガ：アルファ編1',
            'ko': '차원의 틈 오메가: 알파편 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    799: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 阿尔法幻境2',
            'de': 'Alphametrie 2.0',
            'en': 'Alphascape V2.0',
            'fr': 'Alphastice v2.0',
            'ja': '次元の狭間オメガ：アルファ編2',
            'ko': '차원의 틈 오메가: 알파편 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    800: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 阿尔法幻境3',
            'de': 'Alphametrie 3.0',
            'en': 'Alphascape V3.0',
            'fr': 'Alphastice v3.0',
            'ja': '次元の狭間オメガ：アルファ編3',
            'ko': '차원의 틈 오메가: 알파편 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    801: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄时空狭缝 阿尔法幻境4',
            'de': 'Alphametrie 4.0',
            'en': 'Alphascape V4.0',
            'fr': 'Alphastice v4.0',
            'ja': '次元の狭間オメガ：アルファ編4',
            'ko': '차원의 틈 오메가: 알파편 4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    802: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 阿尔法幻境1',
            'de': 'Alphametrie 1.0 (episch)',
            'en': 'Alphascape V1.0 (Savage)',
            'fr': 'Alphastice v1.0 (sadique)',
            'ja': '次元の狭間オメガ零式：アルファ編1',
            'ko': '차원의 틈 오메가: 알파편(영웅) 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    803: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 阿尔法幻境2',
            'de': 'Alphametrie 2.0 (episch)',
            'en': 'Alphascape V2.0 (Savage)',
            'fr': 'Alphastice v2.0 (sadique)',
            'ja': '次元の狭間オメガ零式：アルファ編2',
            'ko': '차원의 틈 오메가: 알파편(영웅) 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    804: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 阿尔法幻境3',
            'de': 'Alphametrie 3.0 (episch)',
            'en': 'Alphascape V3.0 (Savage)',
            'fr': 'Alphastice v3.0 (sadique)',
            'ja': '次元の狭間オメガ零式：アルファ編3',
            'ko': '차원의 틈 오메가: 알파편(영웅) 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    805: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '欧米茄零式时空狭缝 阿尔法幻境4',
            'de': 'Alphametrie 4.0 (episch)',
            'en': 'Alphascape V4.0 (Savage)',
            'fr': 'Alphastice v4.0 (sadique)',
            'ja': '次元の狭間オメガ零式：アルファ編4',
            'ko': '차원의 틈 오메가: 알파편(영웅) 4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 92,
    },
    806: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '保镖歼灭战',
            'de': 'Duell auf der Kugane-Brücke',
            'en': 'Kugane Ohashi',
            'fr': 'Le Pont Ohashi',
            'ja': '真ヨウジンボウ討滅戦',
            'ko': '진 요우진보 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    810: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '朱雀镇魂战',
            'de': 'Seelentanz - Suzaku',
            'en': 'Hells\' Kier',
            'fr': 'Le Nid des Lamentations',
            'ja': '朱雀征魂戦',
            'ko': '주작 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 98,
    },
    811: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '朱雀诗魂战',
            'de': 'Seelensturm - Suzaku',
            'en': 'Hells\' Kier (Extreme)',
            'fr': 'Le Nid des Lamentations (extrême)',
            'ja': '極朱雀征魂戦',
            'ko': '극 주작 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 98,
    },
    813: {
        'exVersion': 3,
        'name': {
            'cn': '雷克兰德',
            'de': 'Seenland',
            'en': 'Lakeland',
            'fr': 'Grand-Lac',
            'ja': 'レイクランド',
            'ko': '레이크랜드',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 106,
    },
    814: {
        'exVersion': 3,
        'name': {
            'cn': '珂露西亚岛',
            'de': 'Kholusia',
            'en': 'Kholusia',
            'fr': 'Kholusia',
            'ja': 'コルシア島',
            'ko': '콜루시아 섬',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 107,
    },
    815: {
        'exVersion': 3,
        'name': {
            'cn': '安穆·艾兰',
            'de': 'Amh Araeng',
            'en': 'Amh Araeng',
            'fr': 'Amh Araeng',
            'ja': 'アム・アレーン',
            'ko': '아므 아랭',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 108,
    },
    816: {
        'exVersion': 3,
        'name': {
            'cn': '伊尔美格',
            'de': 'Il Mheg',
            'en': 'Il Mheg',
            'fr': 'Il Mheg',
            'ja': 'イル・メグ',
            'ko': '일 메그',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 109,
    },
    817: {
        'exVersion': 3,
        'name': {
            'cn': '拉凯提卡大森林',
            'de': 'Der Große Wald Rak\'tika',
            'en': 'The Rak\'tika Greatwood',
            'fr': 'Rak\'tika',
            'ja': 'ラケティカ大森林',
            'ko': '라케티카 대삼림',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 110,
    },
    818: {
        'exVersion': 3,
        'name': {
            'cn': '黑风海',
            'de': 'Tempest',
            'en': 'The Tempest',
            'fr': 'La Tempête',
            'ja': 'テンペスト',
            'ko': '템페스트',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 111,
    },
    819: {
        'exVersion': 3,
        'name': {
            'cn': '水晶都',
            'de': 'Crystarium',
            'en': 'The Crystarium',
            'fr': 'Cristarium',
            'ja': 'クリスタリウム',
            'ko': '크리스타리움',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 112,
    },
    820: {
        'exVersion': 3,
        'name': {
            'cn': '游末邦',
            'de': 'Eulmore',
            'en': 'Eulmore',
            'fr': 'Eulmore',
            'ja': 'ユールモア',
            'ko': '율모어',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 113,
    },
    821: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '水妖幻园多恩美格禁园',
            'de': 'Dohn Mheg',
            'en': 'Dohn Mheg',
            'fr': 'Dohn Mheg',
            'ja': '水妖幻園 ドォーヌ・メグ',
            'ko': '도느 메그',
        },
        'offsetX': 0,
        'offsetY': 200,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    822: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '伪造天界格鲁格火山',
            'de': 'Der Gulg',
            'en': 'Mt. Gulg',
            'fr': 'Mont Gulg',
            'ja': '偽造天界 グルグ火山',
            'ko': '굴그 화산',
        },
        'offsetX': -188,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 102,
    },
    823: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '文明古迹奇坦那神影洞',
            'de': 'Irrungen der Qitari',
            'en': 'The Qitana Ravel',
            'fr': 'L\'Enchevêtrement des Qitari',
            'ja': '古跡探索 キタンナ神影洞',
            'ko': '키타나 신굴',
        },
        'offsetX': 0,
        'offsetY': -274,
        'sizeFactor': 200,
        'weatherRate': 102,
    },
    824: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '青龙镇魂战',
            'de': 'Seelentanz - Seiryu',
            'en': 'The Wreath of Snakes',
            'fr': 'L\'Îlot des Amertumes',
            'ja': '青龍征魂戦',
            'ko': '청룡 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 99,
    },
    825: {
        'contentType': 4,
        'exVersion': 2,
        'name': {
            'cn': '青龙诗魂战',
            'de': 'Seelensturm - Seiryu',
            'en': 'The Wreath of Snakes (Extreme)',
            'fr': 'L\'Îlot des Amertumes (extrême)',
            'ja': '極青龍征魂戦',
            'ko': '극 청룡 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 99,
    },
    826: {
        'contentType': 5,
        'exVersion': 2,
        'name': {
            'cn': '乐欲之所瓯博讷修道院',
            'de': 'Kloster von Orbonne',
            'en': 'The Orbonne Monastery',
            'fr': 'Le Monastère d\'Orbonne',
            'ja': '楽欲の僧院 オーボンヌ',
            'ko': '오본느 수도원',
        },
        'offsetX': -545,
        'offsetY': -663,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    827: {
        'contentType': 26,
        'exVersion': 2,
        'name': {
            'cn': '禁地优雷卡 丰水之地',
            'de': 'Eureka Hydatos',
            'en': 'The Forbidden Land, Eureka Hydatos',
            'fr': 'Eurêka Hydatos',
            'ja': '禁断の地 エウレカ：ヒュダトス編',
            'ko': '금단의 땅 에우레카: 히다토스편',
        },
        'offsetX': 0,
        'offsetY': 475,
        'sizeFactor': 100,
        'weatherRate': 100,
    },
    830: {
        'contentType': 7,
        'exVersion': 2,
        'name': {
            'cn': '英雄挽歌',
            'de': 'Requiem der Helden',
            'en': 'A Requiem for Heroes',
            'fr': 'Un requiem pour les héros',
            'ja': '英雄への鎮魂歌',
            'ko': '영웅을 위한 진혼가',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    831: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '多玛方城战：东风战4人亲友桌（不带食断）',
            'de': '4-Spieler-Mahjong (schnelle Partie, Kuitan deaktiviert)',
            'en': 'Four-player Mahjong (Quick Match, Kuitan Disabled)',
            'fr': 'Mahjong domien : 4 joueurs (partie rapide sans kuitan)',
            'ja': 'ドマ式麻雀：東風戦4人セット卓（クイタン無し）',
            'ko': '작패유희: 동풍전 4인용 탁자(부르기 단요구 없음)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    832: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '空军装甲驾驶员',
            'de': 'Luftwaffe, Feuer frei!',
            'en': 'Air Force One',
            'fr': 'As de l\'air',
            'ja': '出撃！ エアフォースパイロット',
            'ko': '출격! 에어포스 조종사',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    834: {
        'contentType': 7,
        'exVersion': 0,
        'name': {
            'cn': '风之使者',
            'de': 'Durch den Sturm und zurück',
            'en': 'Messenger of the Winds',
            'fr': 'La Messagère du vent',
            'ja': '来訪せし風の御使',
            'ko': '바람의 어사',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 101,
    },
    836: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '避暑离宫马利卡大井',
            'de': 'Malikahs Brunnen',
            'en': 'Malikah\'s Well',
            'fr': 'Le Puits de Malikah',
            'ja': '爽涼離宮 マリカの大井戸',
            'ko': '말리카 큰우물',
        },
        'offsetX': -65,
        'offsetY': -30,
        'sizeFactor': 200,
        'weatherRate': 102,
    },
    837: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '遇袭集落水滩村',
            'de': 'Holminster',
            'en': 'Holminster Switch',
            'fr': 'Holminster',
            'ja': '殺戮郷村 ホルミンスター',
            'ko': '홀민스터',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 102,
    },
    838: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '末日暗影亚马乌罗提',
            'de': 'Amaurot',
            'en': 'Amaurot',
            'fr': 'Amaurote',
            'ja': '終末幻想 アーモロート',
            'ko': '아모로트',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 105,
    },
    840: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '异界遗构希尔科斯孪晶塔',
            'de': 'Der Kristallzwilling',
            'en': 'The Twinning',
            'fr': 'La Macle de Syrcus',
            'ja': '異界遺構 シルクス・ツイニング',
            'ko': '쌍둥이 시르쿠스',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    841: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '创造机构阿尼德罗学院',
            'de': 'Akadaemia Anyder',
            'en': 'Akadaemia Anyder',
            'fr': 'Akadaemia Anydre',
            'ja': '創造機関 アナイダアカデミア',
            'ko': '애나이더 아카데미아',
        },
        'offsetX': 0,
        'offsetY': 30,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    845: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '缇坦妮雅歼灭战',
            'de': 'Offenbarung - Titania',
            'en': 'The Dancing Plague',
            'fr': 'La Valse du Monarque',
            'ja': 'ティターニア討滅戦',
            'ko': '티타니아 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 103,
    },
    846: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '无瑕灵君歼灭战',
            'de': 'Offenbarung - Innozenz',
            'en': 'The Crown of the Immaculate',
            'fr': 'La Couronne de l\'Immaculé',
            'ja': 'イノセンス討滅戦',
            'ko': '이노센스 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 104,
    },
    847: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '哈迪斯歼灭战',
            'de': 'Offenbarung - Hades',
            'en': 'The Dying Gasp',
            'fr': 'Le Râle de l\'Agonie',
            'ja': 'ハーデス討滅戦',
            'ko': '하데스 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 105,
    },
    848: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '无瑕灵君歼殛战',
            'de': 'Letzte Läuterung - Innozenz',
            'en': 'The Crown of the Immaculate (Extreme)',
            'fr': 'La Couronne de l\'Immaculé (extrême)',
            'ja': '極イノセンス討滅戦',
            'ko': '극 이노센스 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 104,
    },
    849: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 觉醒之章1',
            'de': 'Edens Erwachen - Auferstehung',
            'en': 'Eden\'s Gate: Resurrection',
            'fr': 'L\'Éveil d\'Éden - Résurrection',
            'ja': '希望の園エデン：覚醒編1',
            'ko': '희망의 낙원 에덴: 각성편 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    850: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 觉醒之章2',
            'de': 'Edens Erwachen - Niederkunft',
            'en': 'Eden\'s Gate: Descent',
            'fr': 'L\'Éveil d\'Éden - Descente',
            'ja': '希望の園エデン：覚醒編2',
            'ko': '희망의 낙원 에덴: 각성편 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    851: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 觉醒之章3',
            'de': 'Edens Erwachen - Überflutung',
            'en': 'Eden\'s Gate: Inundation',
            'fr': 'L\'Éveil d\'Éden - Déluge',
            'ja': '希望の園エデン：覚醒編3',
            'ko': '희망의 낙원 에덴: 각성편 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 38,
    },
    852: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 觉醒之章4',
            'de': 'Edens Erwachen - Beerdigung',
            'en': 'Eden\'s Gate: Sepulture',
            'fr': 'L\'Éveil d\'Éden - Inhumation',
            'ja': '希望の園エデン：覚醒編4',
            'ko': '희망의 낙원 에덴: 각성편 4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 23,
    },
    853: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 觉醒之章1',
            'de': 'Edens Erwachen - Auferstehung (episch)',
            'en': 'Eden\'s Gate: Resurrection (Savage)',
            'fr': 'L\'Éveil d\'Éden - Résurrection (sadique)',
            'ja': '希望の園エデン零式：覚醒編1',
            'ko': '희망의 낙원 에덴: 각성편(영웅) 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    854: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 觉醒之章2',
            'de': 'Edens Erwachen - Niederkunft (episch)',
            'en': 'Eden\'s Gate: Descent (Savage)',
            'fr': 'L\'Éveil d\'Éden - Descente (sadique)',
            'ja': '希望の園エデン零式：覚醒編2',
            'ko': '희망의 낙원 에덴: 각성편(영웅) 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    855: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 觉醒之章3',
            'de': 'Edens Erwachen - Überflutung (episch)',
            'en': 'Eden\'s Gate: Inundation (Savage)',
            'fr': 'L\'Éveil d\'Éden - Déluge (sadique)',
            'ja': '希望の園エデン零式：覚醒編3',
            'ko': '희망의 낙원 에덴: 각성편(영웅) 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 38,
    },
    856: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 觉醒之章4',
            'de': 'Edens Erwachen - Beerdigung (episch)',
            'en': 'Eden\'s Gate: Sepulture (Savage)',
            'fr': 'L\'Éveil d\'Éden - Inhumation (sadique)',
            'ja': '希望の園エデン零式：覚醒編4',
            'ko': '희망의 낙원 에덴: 각성편(영웅) 4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 23,
    },
    858: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '缇坦妮雅歼殛战',
            'de': 'Letzte Läuterung - Titania',
            'en': 'The Dancing Plague (Extreme)',
            'fr': 'La Valse du Monarque (extrême)',
            'ja': '極ティターニア討滅戦',
            'ko': '극 티타니아 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 103,
    },
    859: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '机关、诅咒、剧毒与……',
            'de': 'Der Beichtstuhl von Toupasa dem Älteren',
            'en': 'Legend of the Not-so-hidden Temple',
            'fr': 'Le Confessionnal de Toupasa l\'ancien',
            'ja': '仕掛けと呪いと毒と',
            'ko': '함정과 저주와 독',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 102,
    },
    860: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '废都拿巴示艾兰',
            'de': 'Vater und Bruder',
            'en': 'Coming Clean',
            'fr': 'Sur les rails de Nabaath Areng',
            'ja': '廃都ナバスアレン',
            'ko': '나바스아렝 폐허',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 102,
    },
    873: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '摇摆的天平',
            'de': 'Ob Mitleid oder Hass',
            'en': 'The Hardened Heart',
            'fr': 'Naissance d\'un bourreau',
            'ja': '揺れる天秤',
            'ko': '흔들리는 천칭',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    874: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '古代大再生魔法',
            'de': 'Alter Zauber',
            'en': 'The Lost and the Found',
            'fr': 'Magie ancestrale',
            'ja': '古の大再生魔法',
            'ko': '고대의 대재생 마법',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 110,
    },
    875: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '勇敢的猎人',
            'de': 'Der Legende auf der Spur',
            'en': 'The Hunter\'s Legacy',
            'fr': 'La chasseuse de légende',
            'ja': '勇気の狩人',
            'ko': '용기 있는 사냥꾼',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 63,
    },
    876: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '奈贝尔特的后悔',
            'de': 'Ein großes Opfer',
            'en': 'Nyelbert\'s Lament',
            'fr': 'Une cupidité bien généreuse',
            'ja': 'ナイルベルトの後悔',
            'ko': '나일베르트의 후회',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    879: {
        'contentType': 9,
        'exVersion': 3,
        'name': {
            'cn': '梦羽宝境',
            'de': 'Verliese von Lyhe Ghiah',
            'en': 'The Dungeons of Lyhe Ghiah',
            'fr': 'Le Donjon hypogéen du Lyhe Ghiah',
            'ja': '宝物庫 リェー・ギア・ダンジョン',
            'ko': '보물고 리예 기아 지하미궁',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    882: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '复制工厂废墟',
            'de': 'Die kopierte Fabrik',
            'en': 'The Copied Factory',
            'fr': 'La réplique de l\'usine désaffectée',
            'ja': '複製サレタ工場廃墟',
            'ko': '복제된 공장 폐허',
        },
        'offsetX': 610,
        'offsetY': 70,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    884: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '魔法宫殿宇宙宫',
            'de': 'Chateau Cosmea',
            'en': 'The Grand Cosmos',
            'fr': 'Le Cosmos coruscant',
            'ja': '魔法宮殿 グラン・コスモス',
            'ko': '그랑 코스모스',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    885: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '哈迪斯孤念歼灭战',
            'de': 'Letzte Läuterung - Hades',
            'en': 'The Minstrel\'s Ballad: Hades\'s Elegy',
            'fr': 'Le Râle de l\'Agonie (extrême)',
            'ja': '極ハーデス討滅戦',
            'ko': '극 하데스 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 105,
    },
    887: {
        'contentType': 28,
        'exVersion': 3,
        'name': {
            'cn': '亚历山大绝境战',
            'de': 'Alexander (fatal)',
            'en': 'The Epic of Alexander (Ultimate)',
            'fr': 'L\'Odyssée d\'Alexander (fatal)',
            'ja': '絶アレキサンダー討滅戦',
            'ko': '절 알렉산더 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    888: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '昂萨哈凯尔（竞争战）',
            'de': 'Onsal Hakair (Danshig Naadam)',
            'en': 'Onsal Hakair (Danshig Naadam)',
            'fr': 'Onsal Hakair (Danshig Naadam)',
            'ja': 'オンサル・ハカイル (終節戦)',
            'ko': '온살 하카이르(계절끝 합전)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 117,
    },
    893: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '纯白誓约、漆黑密约',
            'de': 'Der Wolf und der Drachenreiter',
            'en': 'Vows of Virtue, Deeds of Cruelty',
            'fr': 'Vœux de vertu, actes de cruauté',
            'ja': '白き誓約、黒き密約',
            'ko': '하얀 서약, 검은 밀약',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    894: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '我心依旧',
            'de': 'Trubel im Traumland',
            'en': 'As the Heart Bids',
            'fr': 'À l\'écoute de soi',
            'ja': 'この心が望むがままに',
            'ko': '이 마음이 원하는 대로',
        },
        'offsetX': -12,
        'offsetY': 50,
        'sizeFactor': 400,
        'weatherRate': 40,
    },
    897: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '红宝石神兵破坏作战',
            'de': 'Rubinfeuer - Entfesselung',
            'en': 'Cinder Drift',
            'fr': 'Les Nuées de Brandons',
            'ja': 'ルビーウェポン破壊作戦',
            'ko': '루비 웨폰 파괴작전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 28,
    },
    898: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '黑风海底阿尼德罗追忆馆',
            'de': 'Anamnesis Anyder',
            'en': 'Anamnesis Anyder',
            'fr': 'Anamnesis Anydre',
            'ja': '黒風海底 アニドラス・アナムネーシス',
            'ko': '애니드라스 아남네시스',
        },
        'offsetX': 100,
        'offsetY': -390,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    900: {
        'contentType': 16,
        'exVersion': 0,
        'name': {
            'cn': '出海垂钓',
            'de': 'Auf großer Fahrt',
            'en': 'Ocean Fishing',
            'fr': 'Pêche en mer',
            'ja': 'オーシャンフィッシング',
            'ko': '먼바다 낚시',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 14,
    },
    902: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 共鸣之章1',
            'de': 'Edens Resonanz - Entladung',
            'en': 'Eden\'s Verse: Fulmination',
            'fr': 'Les Accords d\'Éden - Fulmination',
            'ja': '希望の園エデン：共鳴編1',
            'ko': '희망의 낙원 에덴: 공명편 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    903: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 共鸣之章2',
            'de': 'Edens Resonanz - Raserei',
            'en': 'Eden\'s Verse: Furor',
            'fr': 'Les Accords d\'Éden - Fureur',
            'ja': '希望の園エデン：共鳴編2',
            'ko': '희망의 낙원 에덴: 공명편 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    904: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 共鸣之章3',
            'de': 'Edens Resonanz - Bildersturm',
            'en': 'Eden\'s Verse: Iconoclasm',
            'fr': 'Les Accords d\'Éden - Iconoclasme',
            'ja': '希望の園エデン：共鳴編3',
            'ko': '희망의 낙원 에덴: 공명편 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    905: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 共鸣之章4',
            'de': 'Edens Resonanz - Erstarrung',
            'en': 'Eden\'s Verse: Refulgence',
            'fr': 'Les Accords d\'Éden - Éclat',
            'ja': '希望の園エデン：共鳴編4',
            'ko': '희망의 낙원 에덴: 공명편 4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 46,
    },
    906: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 共鸣之章1',
            'de': 'Edens Resonanz - Entladung (episch)',
            'en': 'Eden\'s Verse: Fulmination (Savage)',
            'fr': 'Les Accords d\'Éden - Fulmination (sadique)',
            'ja': '希望の園エデン零式：共鳴編1',
            'ko': '희망의 낙원 에덴: 공명편(영웅) 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    907: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 共鸣之章2',
            'de': 'Edens Resonanz - Raserei (episch)',
            'en': 'Eden\'s Verse: Furor (Savage)',
            'fr': 'Les Accords d\'Éden - Fureur (sadique)',
            'ja': '希望の園エデン零式：共鳴編2',
            'ko': '희망의 낙원 에덴: 공명편(영웅) 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    908: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 共鸣之章3',
            'de': 'Edens Resonanz - Bildersturm (episch)',
            'en': 'Eden\'s Verse: Iconoclasm (Savage)',
            'fr': 'Les Accords d\'Éden - Iconoclasme (sadique)',
            'ja': '希望の園エデン零式：共鳴編3',
            'ko': '희망의 낙원 에덴: 공명편(영웅) 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    909: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 共鸣之章4',
            'de': 'Edens Resonanz - Erstarrung (episch)',
            'en': 'Eden\'s Verse: Refulgence (Savage)',
            'fr': 'Les Accords d\'Éden - Éclat (sadique)',
            'ja': '希望の園エデン零式：共鳴編4',
            'ko': '희망의 낙원 에덴: 공명편(영웅) 4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 46,
    },
    911: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '博兹雅堡垒蒸发事件',
            'de': 'Der Bozja-Vorfall',
            'en': 'The Bozja Incident',
            'fr': 'Prélude à la catastrophe',
            'ja': 'シタデル・ボズヤ蒸発事変',
            'ko': '보즈야 사건',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 123,
    },
    912: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '红宝石神兵狂想作战',
            'de': 'Rubinfeuer - Trauma',
            'en': 'Cinder Drift (Extreme)',
            'fr': 'Les Nuées de Brandons (extrême)',
            'ja': '極ルビーウェポン破壊作戦',
            'ko': '극 루비 웨폰 파괴작전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 28,
    },
    913: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '博兹雅堡垒追忆战',
            'de': 'Memoria Misera (extrem)',
            'en': 'Memoria Misera (Extreme)',
            'fr': 'Memoria Misera (extrême)',
            'ja': '極シタデル・ボズヤ追憶戦',
            'ko': '극 보즈야 추억전',
        },
        'offsetX': -35,
        'offsetY': 683,
        'sizeFactor': 400,
        'weatherRate': 123,
    },
    914: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '英雄无法安息',
            'de': 'Von schlafenden Helden',
            'en': 'A Sleep Disturbed',
            'fr': 'L\'épreuve ronka',
            'ja': '汝、英雄の眠り妨げるは',
            'ko': '그대, 영웅의 잠을 방해하는가',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    916: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '暗影决战诺弗兰特',
            'de': 'Schlacht um Norvrandt',
            'en': 'The Heroes\' Gauntlet',
            'fr': 'La Traversée de Norvrandt',
            'ja': '漆黒決戦 ノルヴラント',
            'ko': '노르브란트',
        },
        'offsetX': 626,
        'offsetY': -611,
        'sizeFactor': 200,
        'weatherRate': 125,
    },
    917: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '人偶军事基地',
            'de': 'Die Puppenfestung',
            'en': 'The Puppets\' Bunker',
            'fr': 'La base militaire des Pantins',
            'ja': '人形タチノ軍事基地',
            'ko': '인형들의 군사 기지',
        },
        'offsetX': 290,
        'offsetY': -190,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    920: {
        'contentType': 29,
        'exVersion': 3,
        'name': {
            'cn': '南方博兹雅战线',
            'de': 'Bozja-Südfront',
            'en': 'The Bozjan Southern Front',
            'fr': 'Front sud de Bozja',
            'ja': '南方ボズヤ戦線',
            'ko': '남부 보즈야 전선',
        },
        'offsetX': -127,
        'offsetY': -424,
        'sizeFactor': 100,
        'weatherRate': 124,
    },
    922: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '光之战士歼灭战',
            'de': 'Krieger des Lichts',
            'en': 'The Seat of Sacrifice',
            'fr': 'Le Trône du Sacrifice',
            'ja': 'ウォーリア・オブ・ライト討滅戦',
            'ko': '빛의 전사 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 125,
    },
    923: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '光之战士幻耀歼灭战',
            'de': 'Krieger des Lichts (extrem)',
            'en': 'The Seat of Sacrifice (Extreme)',
            'fr': 'Le Trône du Sacrifice (extrême)',
            'ja': '極ウォーリア・オブ・ライト討滅戦',
            'ko': '극 빛의 전사 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 126,
    },
    924: {
        'contentType': 9,
        'exVersion': 3,
        'name': {
            'cn': '梦羽宝殿',
            'de': 'Das Karussell von Lyhe Ghiah',
            'en': 'The Shifting Oubliettes of Lyhe Ghiah',
            'fr': 'Le Jardin secret du Lyhe Ghiah',
            'ja': '宝物庫 リェー・ギア・ダンジョン祭殿',
            'ko': '보물고 리예 기아 지하미궁 제전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    925: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '飞翔吧，前往维尔利特！',
            'de': 'Luftangriff auf Werlyt',
            'en': 'Sleep Now in Sapphire',
            'fr': 'Sur la mer de saphir',
            'ja': '飛べ！ ウェルリトへ ',
            'ko': '날아라! 웰리트를 향하여',
        },
        'offsetX': 15,
        'offsetY': -610,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    929: {
        'contentType': 16,
        'exVersion': 1,
        'name': {
            'cn': '天上福地云冠群岛',
            'de': 'Das Diadem - Erschließung',
            'en': 'The Diadem',
            'fr': 'Le Diadème',
            'ja': '雲海採集 ディアデム諸島',
            'ko': '디아뎀 제도',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 68,
    },
    930: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '希瓦幻巧战',
            'de': 'Traumprüfung - Shiva',
            'en': 'The Akh Afah Amphitheatre (Unreal)',
            'fr': 'L\'Amphithéâtre d\'Akh Afah (irréel)',
            'ja': '幻シヴァ討滅戦',
            'ko': '환 시바 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 46,
    },
    932: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '褪色的记忆',
            'de': 'Verblasste Erinnerungen',
            'en': 'Faded Memories',
            'fr': 'Souvenir périssable',
            'ja': '色あせた記憶',
            'ko': '빛바랜 기억',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 114,
    },
    933: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '魔术工房玛托雅工作室',
            'de': 'Matoyas Atelier',
            'en': 'Matoya\'s Relict',
            'fr': 'L\'Atelier abandonné de Matoya',
            'ja': '魔術工房 マトーヤのアトリエ',
            'ko': '마토야의 공방',
        },
        'offsetX': 0,
        'offsetY': -75,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    934: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '绿宝石神兵破坏作战',
            'de': 'Smaragdsturm - Entfesselung',
            'en': 'Castrum Marinum',
            'fr': 'Castrum Marinum',
            'ja': 'エメラルドウェポン破壊作戦',
            'ko': '에메랄드 웨폰 파괴작전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    935: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '绿宝石神兵狂想作战',
            'de': 'Smaragdsturm - Trauma',
            'en': 'Castrum Marinum (Extreme)',
            'fr': 'Castrum Marinum (extrême)',
            'ja': '極エメラルドウェポン破壊作戦',
            'ko': '극 에메랄드 웨폰 파괴작전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    936: {
        'contentType': 29,
        'exVersion': 3,
        'name': {
            'cn': '女王古殿',
            'de': 'Delubrum Reginae',
            'en': 'Delubrum Reginae',
            'fr': 'Delubrum Reginae',
            'ja': 'グンヒルド・ディルーブラム',
            'ko': '군힐드 사원',
        },
        'offsetX': 0,
        'offsetY': -378,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    937: {
        'contentType': 29,
        'exVersion': 3,
        'name': {
            'cn': '零式女王古殿',
            'de': 'Delubrum Reginae (episch)',
            'en': 'Delubrum Reginae (Savage)',
            'fr': 'Delubrum Reginae (sadique)',
            'ja': 'グンヒルド・ディルーブラム零式',
            'ko': '군힐드 사원(영웅)',
        },
        'offsetX': 0,
        'offsetY': -378,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    938: {
        'contentType': 2,
        'exVersion': 3,
        'name': {
            'cn': '黄金平原帕戈尔赞草原',
            'de': 'Die Goldene Ebene von Paglth\'an',
            'en': 'Paglth\'an',
            'fr': 'La grande prairie de Paglth\'an',
            'ja': '黄金平原 パガルザン',
            'ko': '파글단',
        },
        'offsetX': 415,
        'offsetY': -110,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    940: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '九宫幻卡：官方锦标赛',
            'de': 'Triple Triad: Manderville-Turnier',
            'en': 'Triple Triad Open Tournament',
            'fr': 'Tournoi officiel de Triple Triade',
            'ja': 'トリプルトライアド：オフィシャルトーナメント',
            'ko': '트리플 트라이어드: 공식 토너먼트',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 800,
        'weatherRate': 0,
    },
    941: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '九宫幻卡：锦标赛对局室',
            'de': 'Triple Triad: Privatturnier',
            'en': 'Triple Triad Invitational Parlor',
            'fr': 'Salle de tournoi libre de Triple Triade',
            'ja': 'トリプルトライアド：カスタムトーナメントルーム',
            'ko': '트리플 트라이어드: 친선 토너먼트',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 800,
        'weatherRate': 0,
    },
    942: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 再生之章1',
            'de': 'Edens Verheißung - Umbra',
            'en': 'Eden\'s Promise: Umbra',
            'fr': 'La Promesse d\'Éden - Nuée',
            'ja': '希望の園エデン：再生編1',
            'ko': '희망의 낙원 에덴: 재생편 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    943: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 再生之章2',
            'de': 'Edens Verheißung - Litanei',
            'en': 'Eden\'s Promise: Litany',
            'fr': 'La Promesse d\'Éden - Litanie',
            'ja': '希望の園エデン：再生編2',
            'ko': '희망의 낙원 에덴: 재생편 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    944: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 再生之章3',
            'de': 'Edens Verheißung - Anamorphose',
            'en': 'Eden\'s Promise: Anamorphosis',
            'fr': 'La Promesse d\'Éden - Anamorphose',
            'ja': '希望の園エデン：再生編3',
            'ko': '희망의 낙원 에덴: 재생편 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    945: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸希望乐园 再生之章4',
            'de': 'Edens Verheißung - Ewigkeit',
            'en': 'Eden\'s Promise: Eternity',
            'fr': 'La Promesse d\'Éden - Éternité',
            'ja': '希望の園エデン：再生編4',
            'ko': '희망의 낙원 에덴: 재생편 4',
        },
        'offsetX': -71,
        'offsetY': 23,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    946: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 再生之章1',
            'de': 'Edens Verheißung - Umbra (episch)',
            'en': 'Eden\'s Promise: Umbra (Savage)',
            'fr': 'La Promesse d\'Éden - Nuée (sadique)',
            'ja': '希望の園エデン零式：再生編1',
            'ko': '희망의 낙원 에덴: 재생편(영웅) 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    947: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 再生之章2',
            'de': 'Edens Verheißung - Litanei (episch)',
            'en': 'Eden\'s Promise: Litany (Savage)',
            'fr': 'La Promesse d\'Éden - Litanie (sadique)',
            'ja': '希望の園エデン零式：再生編2',
            'ko': '희망의 낙원 에덴: 재생편(영웅) 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    948: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 再生之章3',
            'de': 'Edens Verheißung - Anamorphose (episch)',
            'en': 'Eden\'s Promise: Anamorphosis (Savage)',
            'fr': 'La Promesse d\'Éden - Anamorphose (sadique)',
            'ja': '希望の園エデン零式：再生編3',
            'ko': '희망의 낙원 에덴: 재생편(영웅) 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    949: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '伊甸零式希望乐园 再生之章4',
            'de': 'Edens Verheißung - Ewigkeit (episch)',
            'en': 'Eden\'s Promise: Eternity (Savage)',
            'fr': 'La Promesse d\'Éden - Éternité (sadique)',
            'ja': '希望の園エデン零式：再生編4',
            'ko': '희망의 낙원 에덴: 재생편(영웅) 4',
        },
        'offsetX': 0,
        'offsetY': 75,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    950: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '钻石神兵捕获作战',
            'de': 'Diamantblitz - Entfesselung',
            'en': 'The Cloud Deck',
            'fr': 'Le Tillac des Cirrus',
            'ja': 'ダイヤウェポン捕獲作戦',
            'ko': '다이아몬드 웨폰 포획작전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    951: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '钻石神兵狂想作战',
            'de': 'Diamantblitz - Trauma',
            'en': 'The Cloud Deck (Extreme)',
            'fr': 'Le Tillac des Cirrus (extrême)',
            'ja': '極ダイヤウェポン捕獲作戦',
            'ko': '극 다이아몬드 웨폰 포획작전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    952: {
        'contentType': 2,
        'exVersion': 4,
        'name': {
            'cn': '异形楼阁佐特塔',
            'de': 'Der Turm von Zot',
            'en': 'The Tower of Zot',
            'fr': 'La tour de Zott',
            'ja': '異形楼閣 ゾットの塔',
            'ko': '조트 탑',
        },
        'offsetX': -50,
        'offsetY': -50,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    953: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '泰坦幻巧战',
            'de': 'Traumprüfung - Titan',
            'en': 'The Navel (Unreal)',
            'fr': 'Le Nombril (irréel)',
            'ja': '幻タイタン討滅戦',
            'ko': '환 타이탄 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 23,
    },
    954: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '威尔布兰德扬帆起航',
            'de': 'Gute Winde für Vylbrand',
            'en': 'The Great Ship Vylbrand',
            'fr': 'Un navire nommé Vylbrand',
            'ja': 'バイルブランドの船出',
            'ko': '바일브랜드 출항',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 23,
    },
    955: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '神佑女王',
            'de': 'Hinab in die Ruinen',
            'en': 'Fit for a Queen',
            'fr': 'Que les Dieux gardent la Reine',
            'ja': 'ゴッド・セイブ・ザ・クイーン',
            'ko': '갓 세이브 더 퀸',
        },
        'offsetX': 0,
        'offsetY': -750,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    956: {
        'exVersion': 4,
        'name': {
            'cn': '迷津',
            'de': 'Labyrinthos',
            'en': 'Labyrinthos',
            'fr': 'Le Labyrinthos',
            'ja': 'ラヴィリンソス',
            'ko': '라비린토스',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 131,
    },
    957: {
        'exVersion': 4,
        'name': {
            'cn': '萨维奈岛',
            'de': 'Thavnair',
            'en': 'Thavnair',
            'fr': 'Thavnair',
            'ja': 'サベネア島',
            'ko': '사베네어 섬',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 132,
    },
    958: {
        'exVersion': 4,
        'name': {
            'cn': '加雷马',
            'de': 'Garlemald',
            'en': 'Garlemald',
            'fr': 'Garlemald',
            'ja': 'ガレマルド',
            'ko': '갈레말드',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 133,
    },
    959: {
        'exVersion': 4,
        'name': {
            'cn': '叹息海',
            'de': 'Mare Lamentorum',
            'en': 'Mare Lamentorum',
            'fr': 'Mare Lamentorum',
            'ja': '嘆きの海',
            'ko': '비탄의 바다',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 135,
    },
    960: {
        'exVersion': 4,
        'name': {
            'cn': '天外天垓',
            'de': 'Ultima Thule',
            'en': 'Ultima Thule',
            'fr': 'Ultima Thulé',
            'ja': 'ウルティマ・トゥーレ',
            'ko': '울티마 툴레',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 136,
    },
    961: {
        'exVersion': 4,
        'name': {
            'cn': '厄尔庇斯',
            'de': 'Elpis',
            'en': 'Elpis',
            'fr': 'Elpis',
            'ja': 'エルピス',
            'ko': '엘피스',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 134,
    },
    962: {
        'exVersion': 4,
        'name': {
            'cn': '旧萨雷安',
            'de': 'Alt-Sharlayan',
            'en': 'Old Sharlayan',
            'fr': 'Vieille Sharlayan',
            'ja': 'オールド・シャーレアン',
            'ko': '올드 샬레이안',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 137,
    },
    963: {
        'exVersion': 4,
        'name': {
            'cn': '拉札罕',
            'de': 'Radz-at-Han',
            'en': 'Radz-at-Han',
            'fr': 'Radz-at-Han',
            'ja': 'ラザハン',
            'ko': '라자한',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 138,
    },
    966: {
        'contentType': 5,
        'exVersion': 3,
        'name': {
            'cn': '希望之炮台：“塔”',
            'de': 'Der Turm, Paradigmenbrecher',
            'en': 'The Tower at Paradigm\'s Breach',
            'fr': 'La tour de la Contingence',
            'ja': '希望ノ砲台：「塔」',
            'ko': '희망의 포대: \'탑\'',
        },
        'offsetX': 808,
        'offsetY': -772,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    968: {
        'contentType': 28,
        'exVersion': 4,
        'name': {
            'cn': '幻想龙诗绝境战',
            'de': 'Drachenkrieg (fatal)',
            'en': 'Dragonsong\'s Reprise (Ultimate)',
            'fr': 'La Guerre du chant des dragons (fatal)',
            'ja': '絶竜詩戦争',
            'ko': '절 용시전쟁',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    969: {
        'contentType': 2,
        'exVersion': 4,
        'name': {
            'cn': '魔导神门巴别塔',
            'de': 'Der Turm von Babil',
            'en': 'The Tower of Babil',
            'fr': 'La tour de Babil',
            'ja': '魔導神門 バブイルの塔',
            'ko': '바브일 탑',
        },
        'offsetX': 270,
        'offsetY': -300,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    970: {
        'contentType': 2,
        'exVersion': 4,
        'name': {
            'cn': '末日树海万相森国',
            'de': 'Vanaspati',
            'en': 'Vanaspati',
            'fr': 'Vanaspati',
            'ja': '終末樹海 ヴァナスパティ',
            'ko': '바나스파티',
        },
        'offsetX': 280,
        'offsetY': 8,
        'sizeFactor': 200,
        'weatherRate': 141,
    },
    972: {
        'contentType': 4,
        'exVersion': 3,
        'name': {
            'cn': '利维亚桑幻巧战',
            'de': 'Traumprüfung - Leviathan',
            'en': 'The <Emphasis>Whorleater</Emphasis> (Unreal)',
            'fr': 'Le Briseur de marées (irréel)',
            'ja': '幻リヴァイアサン討滅戦',
            'ko': '환 리바이어선 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 38,
    },
    973: {
        'contentType': 2,
        'exVersion': 4,
        'name': {
            'cn': '最终幻想末世终迹',
            'de': 'Das Sternengrab',
            'en': 'The Dead Ends',
            'fr': 'L\'Issue aux Impasses',
            'ja': '最終幻想 レムナント',
            'ko': '잔해별',
        },
        'offsetX': -310,
        'offsetY': 15,
        'sizeFactor': 200,
        'weatherRate': 144,
    },
    974: {
        'contentType': 2,
        'exVersion': 4,
        'name': {
            'cn': '创造环境极北造物院',
            'de': 'Ktisis Hyperboreia',
            'en': 'Ktisis Hyperboreia',
            'fr': 'L\'Hyperborée',
            'ja': '創造環境 ヒュペルボレア造物院',
            'ko': '휘페르보레아 조물원',
        },
        'offsetX': 40,
        'offsetY': -150,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    975: {
        'contentType': 29,
        'exVersion': 3,
        'name': {
            'cn': '扎杜诺尔高原',
            'de': 'Zadnor-Hochebene',
            'en': 'Zadnor',
            'fr': 'Hauts plateaux de Zadnor',
            'ja': 'ザトゥノル高原',
            'ko': '자트노르 고원',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 130,
    },
    976: {
        'contentType': 2,
        'exVersion': 4,
        'name': {
            'cn': '乐园都市笑笑镇',
            'de': 'Smileton',
            'en': 'Smileton',
            'fr': 'Risette-sur-lune',
            'ja': '楽園都市 スマイルトン',
            'ko': '스마일턴',
        },
        'offsetX': -22,
        'offsetY': -42,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    977: {
        'contentType': 7,
        'exVersion': 3,
        'name': {
            'cn': '死斗至黎明',
            'de': 'Kampf im Morgengrauen',
            'en': 'Death Unto Dawn',
            'fr': 'Aube meurtrière',
            'ja': '黎明の死闘',
            'ko': '여명의 사투',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 114,
    },
    978: {
        'contentType': 2,
        'exVersion': 4,
        'name': {
            'cn': '星海深幽寻因星晶镜',
            'de': 'Das Aitiaskop',
            'en': 'The Aitiascope',
            'fr': 'Le Prisme de l\'Aitia',
            'ja': '星海潜航 アイティオン星晶鏡',
            'ko': '아이티온 별현미경',
        },
        'offsetX': 8,
        'offsetY': -501,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    986: {
        'contentType': 2,
        'exVersion': 4,
        'name': {
            'cn': '电脑梦境斯提格玛四',
            'de': 'Stigma-Holometrie',
            'en': 'The Stigma Dreamscape',
            'fr': 'Rêve électrique de Stigma-4',
            'ja': '電脳夢想 スティグマ・フォー',
            'ko': '스티그마-4',
        },
        'offsetX': 144,
        'offsetY': -14,
        'sizeFactor': 200,
        'weatherRate': 140,
    },
    992: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '佐迪亚克歼灭战',
            'de': 'Prophetie - Zodiark',
            'en': 'The Dark Inside',
            'fr': 'Le Cratère des Martyrs',
            'ja': 'ゾディアーク討滅戦',
            'ko': '조디아크 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 139,
    },
    993: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '佐迪亚克暝暗歼灭战',
            'de': 'Eschatos - Zodiark',
            'en': 'The Minstrel\'s Ballad: Zodiark\'s Fall',
            'fr': 'Le Cratère des Martyrs (extrême)',
            'ja': '極ゾディアーク討滅戦',
            'ko': '극 조디아크 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 139,
    },
    994: {
        'contentType': 22,
        'exVersion': 0,
        'name': {
            'cn': '滑稽灵殿闹鬼盛宴',
            'de': 'Lustiges Bankett',
            'en': 'The Phantoms\' Feast',
            'fr': 'Le banquet cauchemardesque',
            'ja': '道化饗宴 ホーンテッドフィースト',
            'ko': '유령의 연회',
        },
        'offsetX': 20,
        'offsetY': 10,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    995: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '海德林歼灭战',
            'de': 'Prophetie - Hydaelyn',
            'en': 'The Mothercrystal',
            'fr': 'Le Cristal-mère',
            'ja': 'ハイデリン討滅戦',
            'ko': '하이델린 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 139,
    },
    996: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '海德林晖光歼灭战',
            'de': 'Eschatos - Hydaelyn',
            'en': 'The Minstrel\'s Ballad: Hydaelyn\'s Call',
            'fr': 'Le Cristal-mère (extrême)',
            'ja': '極ハイデリン討滅戦',
            'ko': '극 하이델린 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 139,
    },
    997: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '终结之战',
            'de': 'Prophetie - Endsängerin',
            'en': 'The Final Day',
            'fr': 'Le Répons final',
            'ja': '終焉の戦い',
            'ko': '종언의 결전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 116,
    },
    998: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '终极之战',
            'de': 'Eschatos - Endsängerin',
            'en': 'The Minstrel\'s Ballad: Endsinger\'s Aria',
            'fr': 'Le Répons final (extrême)',
            'ja': '終極の戦い',
            'ko': '종극의 결전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 146,
    },
    1000: {
        'contentType': 9,
        'exVersion': 4,
        'name': {
            'cn': '惊奇百宝城',
            'de': 'Euphoratron',
            'en': 'The Excitatron 6000',
            'fr': 'Le Ludodrome',
            'ja': '宝物庫 エキサイトロン',
            'ko': '보물고 익사이트론',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1002: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '万魔殿 边境之狱1',
            'de': 'Asphodelos - Erster Kreis',
            'en': 'Asphodelos: The First Circle',
            'fr': 'Les Limbes du Pandæmonium - Parvis',
            'ja': '万魔殿パンデモニウム：辺獄編1',
            'ko': '마의 전당 판데모니움: 변옥편 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1003: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '零式万魔殿 边境之狱1',
            'de': 'Asphodelos - Erster Kreis (episch)',
            'en': 'Asphodelos: The First Circle (Savage)',
            'fr': 'Les Limbes du Pandæmonium - Parvis (sadique)',
            'ja': '万魔殿パンデモニウム零式：辺獄編1',
            'ko': '마의 전당 판데모니움: 변옥편(영웅) 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1004: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '万魔殿 边境之狱2',
            'de': 'Asphodelos - Zweiter Kreis',
            'en': 'Asphodelos: The Second Circle',
            'fr': 'Les Limbes du Pandæmonium - Cloaque',
            'ja': '万魔殿パンデモニウム：辺獄編2',
            'ko': '마의 전당 판데모니움: 변옥편 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1005: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '零式万魔殿 边境之狱2',
            'de': 'Asphodelos - Zweiter Kreis (episch)',
            'en': 'Asphodelos: The Second Circle (Savage)',
            'fr': 'Les Limbes du Pandæmonium - Cloaque (sadique)',
            'ja': '万魔殿パンデモニウム零式：辺獄編2',
            'ko': '마의 전당 판데모니움: 변옥편(영웅) 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1006: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '万魔殿 边境之狱3',
            'de': 'Asphodelos - Dritter Kreis',
            'en': 'Asphodelos: The Third Circle',
            'fr': 'Les Limbes du Pandæmonium - Fournaise',
            'ja': '万魔殿パンデモニウム：辺獄編3',
            'ko': '마의 전당 판데모니움: 변옥편 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1007: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '零式万魔殿 边境之狱3',
            'de': 'Asphodelos - Dritter Kreis (episch)',
            'en': 'Asphodelos: The Third Circle (Savage)',
            'fr': 'Les Limbes du Pandæmonium - Fournaise (sadique)',
            'ja': '万魔殿パンデモニウム零式：辺獄編3',
            'ko': '마의 전당 판데모니움: 변옥편(영웅) 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1008: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '万魔殿 边境之狱4',
            'de': 'Asphodelos - Vierter Kreis',
            'en': 'Asphodelos: The Fourth Circle',
            'fr': 'Les Limbes du Pandæmonium - Abîme',
            'ja': '万魔殿パンデモニウム：辺獄編4',
            'ko': '마의 전당 판데모니움: 변옥편 4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1009: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '零式万魔殿 边境之狱4',
            'de': 'Asphodelos - Vierter Kreis (episch)',
            'en': 'Asphodelos: The Fourth Circle (Savage)',
            'fr': 'Les Limbes du Pandæmonium - Abîme (sadique)',
            'ja': '万魔殿パンデモニウム零式：辺獄編4',
            'ko': '마의 전당 판데모니움: 변옥편(영웅) 4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1010: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '踏破风雪',
            'de': 'Ein frostiger Empfang',
            'en': 'A Frosty Reception',
            'fr': 'Un accueil glacial',
            'ja': '霜雪を踏みしめて',
            'ko': '눈서리를 밟고',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1011: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '无尽寒夜',
            'de': 'In fremder Haut',
            'en': 'In from the Cold',
            'fr': 'Le voleur de corps',
            'ja': '寒夜のこと',
            'ko': '어느 추운 밤에',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 27,
    },
    1012: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '扩散的末日',
            'de': 'Rote Himmel, roter Schnee',
            'en': 'As the Heavens Burn',
            'fr': 'L\'arène des neiges',
            'ja': '拡がる終末',
            'ko': '퍼져가는 종말',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 141,
    },
    1013: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '晓月之终途',
            'de': 'Endschreiter',
            'en': 'Endwalker',
            'fr': 'Arpenteur des finitudes',
            'ja': '暁月のフィナーレ',
            'ko': '효월의 종언',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 100,
        'weatherRate': 143,
    },
    1014: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '上一任阿谢姆的教导',
            'de': ' Es reimt sich auf Gebell',
            'en': 'Worthy of His Back',
            'fr': 'Le défi de l\'ancienne Azem',
            'ja': '前代アゼムの手ほどき',
            'ko': '선대 아젬과의 대련',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 134,
    },
    1015: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '未来之路',
            'de': 'Offen für neue Wege',
            'en': 'A Path Unveiled',
            'fr': 'Des esprits et des hommes',
            'ja': '開かれた道の先へ',
            'ko': '열린 길 저편으로',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 3,
    },
    1016: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '驶向融合的巨轮',
            'de': 'Im Hafen des Friedens',
            'en': 'To Calmer Seas',
            'fr': 'Cap sur la paix',
            'ja': '融和への船出',
            'ko': '화합을 향한 출항',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1017: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '英魂安息',
            'de': 'Domanisches Begräbnis',
            'en': 'Laid to Rest',
            'fr': 'Des adieux domiens',
            'ja': 'ドマの弔い',
            'ko': '도마의 추도',
        },
        'offsetX': 240,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1018: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '仰望苍穹，不断迈进',
            'de': 'Der Weg zur Erneuerung',
            'en': 'Ever March Heavensward',
            'fr': 'La voie du renouveau',
            'ja': '蒼天を仰ぎ、歩み続ける',
            'ko': '창천을 보며 나아가자',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 114,
    },
    1019: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '目送生者前行',
            'de': 'Trauer und Hoffnung',
            'en': 'The Gift of Mercy',
            'fr': 'Acceptation',
            'ja': '僕たちは還り、君を見送ろう',
            'ko': '우리는 돌아가 그대를 보내리',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1020: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '大镰的意义',
            'de': 'Die Bedeutung der Sense',
            'en': 'The Harvest Begins',
            'fr': 'La vraie puissance de la faux',
            'ja': '大鎌の意味',
            'ko': '큰낫의 의미',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1021: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '暗杀道',
            'de': 'Die Kunst des Tötens',
            'en': 'The Killing Art',
            'fr': 'La voie du néant',
            'ja': '暗殺道',
            'ko': '암살의 길',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 42,
    },
    1022: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '贤者的短杖',
            'de': 'Des Weisen wundersames Werkzeug',
            'en': 'Sage\'s Focus',
            'fr': 'Les armes du sage',
            'ja': '賢者の短杖',
            'ko': '현자의 짧은 지팡이',
        },
        'offsetX': 40,
        'offsetY': 6,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1023: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '生命瞬逝，术道恒久',
            'de': 'Das Leben ist kurz, die Kunst ist lang',
            'en': 'Life Ephemeral, Path Eternal',
            'fr': 'Existences éphémères et savoir éternel',
            'ja': '人命は儚く、術のみちは永久に',
            'ko': '생명은 덧없으나 기술은 영원하리',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 95,
        'weatherRate': 50,
    },
    1035: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '究极神兵幻巧战',
            'de': 'Traumprüfung - Ultima',
            'en': 'Ultima\'s Bane (Unreal)',
            'fr': 'Le fléau d\'Ultima (irréel)',
            'ja': '幻アルテマウェポン破壊作戦',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 31,
    },
    1036: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '天然要害沙斯塔夏溶洞',
            'de': 'Sastasha',
            'en': 'Sastasha',
            'fr': 'Sastasha',
            'ja': '天然要害 サスタシャ浸食洞',
            'ko': '사스타샤 침식 동굴',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1037: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '地下灵殿塔姆·塔拉墓园',
            'de': 'Totenacker Tam-Tara',
            'en': 'The Tam–Tara Deepcroft',
            'fr': 'L\'Hypogée de Tam-Tara',
            'ja': '地下霊殿 タムタラの墓所',
            'ko': '탐타라 묘소',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 300,
        'weatherRate': 0,
    },
    1038: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '封锁坑道铜铃铜山',
            'de': 'Kupferglocken-Mine',
            'en': 'Copperbell Mines',
            'fr': 'Les Mines de Clochecuivre',
            'ja': '封鎖坑道 カッパーベル銅山',
            'ko': '구리종 광산',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1039: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '监狱废墟托托·拉克千狱',
            'de': 'Tausend Löcher von Toto-Rak',
            'en': 'The Thousand Maws of Toto–Rak',
            'fr': 'Les Mille Gueules de Toto-Rak',
            'ja': '監獄廃墟 トトラクの千獄',
            'ko': '토토라크 감옥',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1040: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '名门府邸静语庄园',
            'de': 'Haukke-Herrenhaus',
            'en': 'Haukke Manor',
            'fr': 'Le Manoir des Haukke',
            'ja': '名門屋敷 ハウケタ御用邸',
            'ko': '하우케타 별궁',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1041: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '休养胜地布雷福洛克斯野营地',
            'de': 'Brüllvolx\' Langrast',
            'en': 'Brayflox\'s Longstop',
            'fr': 'Le Bivouac de Brayflox',
            'ja': '奪還支援 ブレイフロクスの野営地',
            'ko': '브레이플록스의 야영지',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1042: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '对龙城塞石卫塔',
            'de': 'Steinerne Wacht',
            'en': 'The Stone Vigil',
            'fr': 'Le Vigile de Pierre',
            'ja': '城塞攻略 ストーンヴィジル',
            'ko': '돌방패 경계초소',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 27,
    },
    1043: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '神兵要塞帝国南方堡',
            'de': 'Castrum Meridianum - Außenbereich',
            'en': 'Castrum Meridianum',
            'fr': 'Castrum Meridianum',
            'ja': '外郭攻略 カストルム・メリディアヌム',
            'ko': '카스트룸 메리디아눔',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1044: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '最终决战天幕魔导城',
            'de': 'Castrum Meridianum - Praetorium',
            'en': 'The Praetorium',
            'fr': 'Le Praetorium',
            'ja': '最終決戦 魔導城プラエトリウム',
            'ko': '마도성 프라이토리움',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1045: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '伊弗利特讨伐战',
            'de': 'Das Grab der Lohe',
            'en': 'The Bowl of Embers',
            'fr': 'Le Cratère des tisons',
            'ja': 'イフリート討伐戦',
            'ko': '이프리트 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 25,
    },
    1046: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '泰坦讨伐战',
            'de': 'Der Nabel',
            'en': 'The Navel',
            'fr': 'Le Nombril',
            'ja': 'タイタン討伐戦',
            'ko': '타이탄 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 23,
    },
    1047: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '迦楼罗讨伐战',
            'de': 'Das Tosende Auge',
            'en': 'The Howling Eye',
            'fr': 'Hurlœil',
            'ja': 'ガルーダ討伐戦',
            'ko': '가루다 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 26,
    },
    1048: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '究极神兵破坏作战',
            'de': 'Porta Decumana',
            'en': 'The Porta Decumana',
            'fr': 'Porta Decumana',
            'ja': 'アルテマウェポン破壊作戦',
            'ko': '알테마 웨폰 파괴작전',
        },
        'offsetX': 772,
        'offsetY': 600,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1049: {
        'contentType': 7,
        'exVersion': 0,
        'name': {
            'cn': '里塔提恩强攻战',
            'de': 'Kap Westwind',
            'en': 'Cape Westwind',
            'fr': 'Le Cap Vendouest',
            'ja': 'リットアティン強襲戦',
            'ko': '리트아틴 강습전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1050: {
        'contentType': 2,
        'exVersion': 4,
        'name': {
            'cn': '近东秘宝阿尔扎达尔海底遗迹群',
            'de': 'Alzadaals Vermächtnis',
            'en': 'Alzadaal\'s Legacy',
            'fr': 'Le legs d\'Alzadaal',
            'ja': '近東秘宝 アルザダール海底遺跡群',
            'ko': '알자달 해저 유적',
        },
        'offsetX': 15,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1051: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '涅尔瓦的帝国',
            'de': 'Nervas Reich',
            'en': 'Forlorn Glory',
            'fr': 'Nerva, le patriote',
            'ja': 'ネルウァの帝国',
            'ko': '네르바의 제국',
        },
        'offsetX': -230,
        'offsetY': -250,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    1052: {
        'contentType': 7,
        'exVersion': 0,
        'name': {
            'cn': '拉哈布雷亚讨伐战',
            'de': 'Das Antlitz der Kaltblütigkeit',
            'en': 'Devastation',
            'fr': 'Le Praetorium en flammes',
            'ja': 'アシエン・ラハブレア討伐戦',
            'ko': '아씨엔 라하브레아 토벌전',
        },
        'offsetX': 704,
        'offsetY': -480,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1054: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '灿烂神域阿格莱亚',
            'de': 'Aglaia',
            'en': 'Aglaia',
            'fr': 'Domaine divin - Aglaé',
            'ja': '輝ける神域 アグライア',
            'ko': '찬란한 신역 아글라이아',
        },
        'offsetX': -80,
        'offsetY': -550,
        'sizeFactor': 200,
        'weatherRate': 147,
    },
    1058: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '水晶冲突（角力学校：自定赛）',
            'de': 'Crystalline Conflict: Die Palästra (Schaukampf)',
            'en': 'Crystalline Conflict (Custom Match - The Palaistra)',
            'fr': 'Crystalline Conflict (partie personnalisée - Le Palestre)',
            'ja': 'クリスタルコンフリクト(パライストラ：カスタムマッチ)',
            'ko': '크리스탈라인 컨플릭트(팔라이스트라: 친선 경기)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1059: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '水晶冲突（火山之心：自定赛）',
            'de': 'Crystalline Conflict: Das Herz des Vulkans (Schaukampf)',
            'en': 'Crystalline Conflict (Custom Match - The Volcanic Heart)',
            'fr': 'Crystalline Conflict (partie personnalisée - Le Cœur volcanique)',
            'ja': 'クリスタルコンフリクト(ヴォルカニック・ハート：カスタムマッチ)',
            'ko': '크리스탈라인 컨플릭트(화산심장: 친선 경기)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1060: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '水晶冲突（九霄云上：自定赛）',
            'de': 'Crystalline Conflict: Wolke Sieben (Schaukampf)',
            'en': 'Crystalline Conflict (Custom Match - Cloud Nine)',
            'fr': 'Crystalline Conflict (partie personnalisée - Le Petit Nuage)',
            'ja': 'クリスタルコンフリクト(クラウドナイン：カスタムマッチ)',
            'ko': '크리스탈라인 컨플릭트(절정의 구름: 친선 경기)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1062: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '凛冽洞天披雪大冰壁',
            'de': 'Das Schneekleid',
            'en': 'Snowcloak',
            'fr': 'Manteneige',
            'ja': '氷結潜窟 スノークローク大氷壁',
            'ko': '얼음외투 대빙벽',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 42,
    },
    1063: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '幻龙残骸密约之塔',
            'de': 'Hüter des Sees',
            'en': 'The Keeper of the Lake',
            'fr': 'Le Gardien du lac',
            'ja': '幻龍残骸 黙約の塔',
            'ko': '묵약의 탑',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 74,
    },
    1064: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '天山绝顶索姆阿尔灵峰',
            'de': 'Sohm Al',
            'en': 'Sohm Al',
            'fr': 'Sohm Al',
            'ja': '霊峰踏破 ソーム・アル',
            'ko': '솜 알',
        },
        'offsetX': 185,
        'offsetY': 51,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1065: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '邪龙王座龙巢神殿',
            'de': 'Nest des Drachen',
            'en': 'The Aery',
            'fr': 'L\'Aire',
            'ja': '邪竜血戦 ドラゴンズエアリー',
            'ko': '용의 둥지',
        },
        'offsetX': -40,
        'offsetY': 55,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    1066: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '圣教中枢伊修加德教皇厅',
            'de': 'Erzbasilika',
            'en': 'The Vault',
            'fr': 'La Voûte',
            'ja': '強硬突入 イシュガルド教皇庁',
            'ko': '이슈가르드 교황청',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1067: {
        'contentType': 4,
        'exVersion': 0,
        'name': {
            'cn': '莫古力贤王歼灭战',
            'de': 'Königliche Konfrontation (schwer)',
            'en': 'Thornmarch (Hard)',
            'fr': 'La Lisière de ronces (brutal)',
            'ja': '善王モグル・モグXII世討滅戦',
            'ko': '선왕 모그루 모그 XII세 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 30,
    },
    1068: {
        'contentType': 7,
        'exVersion': 0,
        'name': {
            'cn': '皇都伊修加德保卫战',
            'de': 'Der Schicksalsweg',
            'en': 'The Steps of Faith',
            'fr': 'Le Siège de la sainte Cité d\'Ishgard',
            'ja': '皇都イシュガルド防衛戦',
            'ko': '성도 이슈가르드 방어전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    1069: {
        'contentType': 30,
        'exVersion': 4,
        'name': {
            'cn': '多变迷宫 希拉狄哈水道',
            'de': 'Die Unterstadt von Sil\'dih',
            'en': 'The Sil\'dihn Subterrane',
            'fr': 'Les canalisations sildiennes - Donjon à embranchements',
            'ja': 'ヴァリアントダンジョン シラディハ水道',
            'ko': '변형 던전: 실디하 지하수도',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1070: {
        'contentType': 2,
        'exVersion': 4,
        'name': {
            'cn': '异界孤城特罗亚宫廷',
            'de': 'Der Schwarze Hof von Troia',
            'en': 'The Fell Court of Troia',
            'fr': 'Le Château de Troïa',
            'ja': '異界孤城 トロイアコート',
            'ko': '트로이아 궁정',
        },
        'offsetX': -76,
        'offsetY': -180,
        'sizeFactor': 200,
        'weatherRate': 149,
    },
    1071: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '巴尔巴莉希娅歼灭战',
            'de': 'Prophetie - Barbarizia',
            'en': 'Storm\'s Crown',
            'fr': 'La Toison des tempêtes',
            'ja': 'バルバリシア討滅戦',
            'ko': '바르바리차 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 149,
    },
    1072: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '巴尔巴莉希娅歼殛战',
            'de': 'Eschatos - Barbarizia',
            'en': 'Storm\'s Crown (Extreme)',
            'fr': 'La Toison des tempêtes (extrême)',
            'ja': '極バルバリシア討滅戦',
            'ko': '극 바르바리차 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 149,
    },
    1075: {
        'contentType': 30,
        'exVersion': 4,
        'name': {
            'cn': '异闻迷宫 异闻希拉狄哈水道',
            'de': 'Die kuriose Unterstadt von Sil\'dih',
            'en': 'Another Sil\'dihn Subterrane',
            'fr': 'Les canalisations sildiennes annexes - Donjon alternatif',
            'ja': 'アナザーダンジョン 異聞シラディハ水道',
            'ko': '파생 던전: 번외 실디하 지하수도',
        },
        'offsetX': 335,
        'offsetY': 100,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1076: {
        'contentType': 30,
        'exVersion': 4,
        'name': {
            'cn': '异闻迷宫 零式异闻希拉狄哈水道',
            'de': 'Die kuriose Unterstadt von Sil\'dih (episch)',
            'en': 'Another Sil\'dihn Subterrane (Savage)',
            'fr': 'Les canalisations sildiennes annexes - Donjon alternatif (sadique)',
            'ja': 'アナザーダンジョン 異聞シラディハ水道 零式',
            'ko': '파생 던전: 번외 실디하 지하수도(영웅)',
        },
        'offsetX': 335,
        'offsetY': 100,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1081: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '万魔殿 炼净之狱1',
            'de': 'Abyssos - Fünfter Kreis',
            'en': 'Abyssos: The Fifth Circle',
            'fr': 'Le Purgatoire du Pandæmonium - Cages',
            'ja': '万魔殿パンデモニウム：煉獄編1',
            'ko': '마의 전당 판데모니움: 연옥편 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1082: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '零式万魔殿 炼净之狱1',
            'de': 'Abyssos - Fünfter Kreis (episch)',
            'en': 'Abyssos: The Fifth Circle (Savage)',
            'fr': 'Le Purgatoire du Pandæmonium - Cages (sadique)',
            'ja': '万魔殿パンデモニウム零式：煉獄編1',
            'ko': '마의 전당 판데모니움: 연옥편(영웅) 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1083: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '万魔殿 炼净之狱2',
            'de': 'Abyssos - Sechster Kreis',
            'en': 'Abyssos: The Sixth Circle',
            'fr': 'Le Purgatoire du Pandæmonium - Croisements',
            'ja': '万魔殿パンデモニウム：煉獄編2',
            'ko': '마의 전당 판데모니움: 연옥편 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1084: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '零式万魔殿 炼净之狱2',
            'de': 'Abyssos - Sechster Kreis (episch)',
            'en': 'Abyssos: The Sixth Circle (Savage)',
            'fr': 'Le Purgatoire du Pandæmonium - Croisements (sadique)',
            'ja': '万魔殿パンデモニウム零式：煉獄編2',
            'ko': '마의 전당 판데모니움: 연옥편(영웅) 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1085: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '万魔殿 炼净之狱3',
            'de': 'Abyssos - Siebter Kreis',
            'en': 'Abyssos: The Seventh Circle',
            'fr': 'Le Purgatoire du Pandæmonium - Racines',
            'ja': '万魔殿パンデモニウム：煉獄編3',
            'ko': '마의 전당 판데모니움: 연옥편 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1086: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '零式万魔殿 炼净之狱3',
            'de': 'Abyssos - Siebter Kreis (episch)',
            'en': 'Abyssos: The Seventh Circle (Savage)',
            'fr': 'Le Purgatoire du Pandæmonium - Racines (sadique)',
            'ja': '万魔殿パンデモニウム零式：煉獄編3',
            'ko': '마의 전당 판데모니움: 연옥편(영웅) 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1087: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '万魔殿 炼净之狱4',
            'de': 'Abyssos - Achter Kreis',
            'en': 'Abyssos: The Eighth Circle',
            'fr': 'Le Purgatoire du Pandæmonium - Hérédité',
            'ja': '万魔殿パンデモニウム：煉獄編4',
            'ko': '마의 전당 판데모니움: 연옥편 4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1088: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '零式万魔殿 炼净之狱4',
            'de': 'Abyssos - Achter Kreis (episch)',
            'en': 'Abyssos: The Eighth Circle (Savage)',
            'fr': 'Le Purgatoire du Pandæmonium - Hérédité (sadique)',
            'ja': '万魔殿パンデモニウム零式：煉獄編4',
            'ko': '마의 전당 판데모니움: 연옥편(영웅) 4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1090: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '萨菲洛特幻巧战',
            'de': 'Traumprüfung - Sephirot',
            'en': 'Containment Bay S1T7 (Unreal)',
            'fr': 'Unité de contention S1P7 (irréel)',
            'ja': '幻魔神セフィロト討滅戦',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 66,
    },
    1091: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '失传的力量',
            'de': 'Wo alles seinen Anfang nimmt',
            'en': 'Where Everything Begins',
            'fr': 'Au commencement était Zero',
            'ja': '失われた力',
            'ko': '잃어버린 힘',
        },
        'offsetX': 143,
        'offsetY': -64,
        'sizeFactor': 200,
        'weatherRate': 149,
    },
    1095: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '卢比坎特歼灭战',
            'de': 'Prophetie - Rubicante',
            'en': 'Mount Ordeals',
            'fr': 'Le Mont du Supplice',
            'ja': 'ルビカンテ討滅戦',
            'ko': '루비칸테 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1096: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '卢比坎特歼殛战',
            'de': 'Eschatos - Rubicante',
            'en': 'Mount Ordeals (Extreme)',
            'fr': 'Le Mont du Supplice (extrême)',
            'ja': '極ルビカンテ討滅戦',
            'ko': '극 루비칸테 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1097: {
        'contentType': 2,
        'exVersion': 4,
        'name': {
            'cn': '雪山奥窟冥魂石洞',
            'de': 'Lapis Manalis',
            'en': 'Lapis Manalis',
            'fr': 'Lapis Manalis',
            'ja': '雪山冥洞 ラピス・マナリス',
            'ko': '라피스 마날리스',
        },
        'offsetX': -46,
        'offsetY': 570,
        'sizeFactor': 200,
        'weatherRate': 42,
    },
    1099: {
        'contentType': 21,
        'exVersion': 4,
        'name': {
            'cn': '正统优雷卡 地下1～10层',
            'de': 'Eureka Orthos (Ebenen 1-10)',
            'en': 'Eureka Orthos (Floors 1-10)',
            'fr': 'Eurêka Orthos (sous-sols 1-10)',
            'ja': 'オルト・エウレカ B1～B10',
            'ko': '에우레카 오르토스 B1~B10',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1100: {
        'contentType': 21,
        'exVersion': 4,
        'name': {
            'cn': '正统优雷卡 地下11～20层',
            'de': 'Eureka Orthos (Ebenen 11-20)',
            'en': 'Eureka Orthos (Floors 11-20)',
            'fr': 'Eurêka Orthos (sous-sols 11-20)',
            'ja': 'オルト・エウレカ B11～B20',
            'ko': '에우레카 오르토스 B11~B20',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1101: {
        'contentType': 21,
        'exVersion': 4,
        'name': {
            'cn': '正统优雷卡 地下21～30层',
            'de': 'Eureka Orthos (Ebenen 21-30)',
            'en': 'Eureka Orthos (Floors 21-30)',
            'fr': 'Eurêka Orthos (sous-sols 21-30)',
            'ja': 'オルト・エウレカ B21～B30',
            'ko': '에우레카 오르토스 B21~B30',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1102: {
        'contentType': 21,
        'exVersion': 4,
        'name': {
            'cn': '正统优雷卡 地下31～40层',
            'de': 'Eureka Orthos (Ebenen 31-40)',
            'en': 'Eureka Orthos (Floors 31-40)',
            'fr': 'Eurêka Orthos (sous-sols 31-40)',
            'ja': 'オルト・エウレカ B31～B40',
            'ko': '에우레카 오르토스 B31~B40',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1103: {
        'contentType': 21,
        'exVersion': 4,
        'name': {
            'cn': '正统优雷卡 地下41～50层',
            'de': 'Eureka Orthos (Ebenen 41-50)',
            'en': 'Eureka Orthos (Floors 41-50)',
            'fr': 'Eurêka Orthos (sous-sols 41-50)',
            'ja': 'オルト・エウレカ B41～B50',
            'ko': '에우레카 오르토스 B41~B50',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1104: {
        'contentType': 21,
        'exVersion': 4,
        'name': {
            'cn': '正统优雷卡 地下51～60层',
            'de': 'Eureka Orthos (Ebenen 51-60)',
            'en': 'Eureka Orthos (Floors 51-60)',
            'fr': 'Eurêka Orthos (sous-sols 51-60)',
            'ja': 'オルト・エウレカ B51～B60',
            'ko': '에우레카 오르토스 B51~B60',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1105: {
        'contentType': 21,
        'exVersion': 4,
        'name': {
            'cn': '正统优雷卡 地下61～70层',
            'de': 'Eureka Orthos (Ebenen 61-70)',
            'en': 'Eureka Orthos (Floors 61-70)',
            'fr': 'Eurêka Orthos (sous-sols 61-70)',
            'ja': 'オルト・エウレカ B61～B70',
            'ko': '에우레카 오르토스 B61~B70',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1106: {
        'contentType': 21,
        'exVersion': 4,
        'name': {
            'cn': '正统优雷卡 地下71～80层',
            'de': 'Eureka Orthos (Ebenen 71-80)',
            'en': 'Eureka Orthos (Floors 71-80)',
            'fr': 'Eurêka Orthos (sous-sols 71-80)',
            'ja': 'オルト・エウレカ B71～B80',
            'ko': '에우레카 오르토스 B71~B80',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1107: {
        'contentType': 21,
        'exVersion': 4,
        'name': {
            'cn': '正统优雷卡 地下81～90层',
            'de': 'Eureka Orthos (Ebenen 81-90)',
            'en': 'Eureka Orthos (Floors 81-90)',
            'fr': 'Eurêka Orthos (sous-sols 81-90)',
            'ja': 'オルト・エウレカ B81～B90',
            'ko': '에우레카 오르토스 B81~B90',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1108: {
        'contentType': 21,
        'exVersion': 4,
        'name': {
            'cn': '正统优雷卡 地下91～100层',
            'de': 'Eureka Orthos (Ebenen 91-100)',
            'en': 'Eureka Orthos (Floors 91-100)',
            'fr': 'Eurêka Orthos (sous-sols 91-100)',
            'ja': 'オルト・エウレカ B91～B100',
            'ko': '에우레카 오르토스 B91~B100',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1109: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '学识宝库迦巴勒幻想图书馆',
            'de': 'Große Gubal-Bibliothek',
            'en': 'The Great Gubal Library',
            'fr': 'La Grande bibliothèque de Gubal',
            'ja': '禁書回収 グブラ幻想図書館',
            'ko': '구브라 환상도서관',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1110: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '血战苍穹魔科学研究所',
            'de': 'Ätherochemisches For­schungs­labor',
            'en': 'The Aetherochemical Research Facility',
            'fr': 'Le Laboratoire de magismologie',
            'ja': '蒼天聖戦 魔科学研究所',
            'ko': '마과학 연구소',
        },
        'offsetX': -18,
        'offsetY': 149,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1111: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '星海空间颠倒塔',
            'de': 'Antiturm',
            'en': 'The Antitower',
            'fr': 'L\'Antitour',
            'ja': '星海観測 逆さの塔',
            'ko': '거꾸로 선 탑',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1112: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '天龙宫殿忆罪宫',
            'de': 'Sohr Khai',
            'en': 'Sohr Khai',
            'fr': 'Sohr Khai',
            'ja': '天竜宮殿 ソール・カイ',
            'ko': '소르 카이',
        },
        'offsetX': 370,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1113: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '险峻峡谷塞尔法特尔溪谷',
            'de': 'Xelphatol',
            'en': 'Xelphatol',
            'fr': 'Xelphatol',
            'ja': '峻厳渓谷 ゼルファトル',
            'ko': '젤파톨',
        },
        'offsetX': -148,
        'offsetY': 35,
        'sizeFactor': 200,
        'weatherRate': 40,
    },
    1114: {
        'contentType': 2,
        'exVersion': 1,
        'name': {
            'cn': '坚牢铁壁巴埃萨长城',
            'de': 'Baelsar-Wall',
            'en': 'Baelsar\'s Wall',
            'fr': 'La Muraille de Baelsar',
            'ja': '巨大防壁 バエサルの長城',
            'ko': '바일사르 장성',
        },
        'offsetX': 182,
        'offsetY': 32,
        'sizeFactor': 200,
        'weatherRate': 40,
    },
    1115: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '充满活力的父子',
            'de': 'Väterliche Liebe',
            'en': 'Generational Bonding',
            'fr': 'Tel gentilhomme, tel gentilhomme',
            'ja': 'はつらつとした親子',
            'ko': '은밀한 음모',
        },
        'offsetX': -230,
        'offsetY': -250,
        'sizeFactor': 200,
        'weatherRate': 28,
    },
    1116: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '机关大殿',
            'de': 'Die Mechanische Menagerie',
            'en': 'The Clockwork Castletown',
            'fr': 'Le Traquenard oriental',
            'ja': '東方絡繰御殿',
            'ko': '동방 꼭두각시 어전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1117: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '水晶冲突（机关大殿：自定赛）',
            'de': 'Crystalline Conflict: Die Mechanische Menagerie (Schaukampf)',
            'en': 'Crystalline Conflict (Custom Match - The Clockwork Castletown)',
            'fr': 'Crys. Conflict (partie perso. - Le Traquenard oriental)',
            'ja': 'クリスタルコンフリクト(東方絡繰御殿：カスタムマッチ)',
            'ko': '크리스탈라인 컨플릭트(동방 꼭두각시 어전: 친선 경기)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1118: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '喜悦神域欧芙洛绪涅',
            'de': 'Euphrosyne',
            'en': 'Euphrosyne',
            'fr': 'Domaine divin - Euphrosyne',
            'ja': '喜びの神域 エウプロシュネ',
            'ko': '환희의 신역 에우프로시네',
        },
        'offsetX': 0,
        'offsetY': 480,
        'sizeFactor': 200,
        'weatherRate': 147,
    },
    1120: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '未料想过的交易',
            'de': 'Der Wert einer Buuds',
            'en': 'An Unforeseen Bargain',
            'fr': 'Pour une bouchée de pain',
            'ja': 'パンひとつと引き換えに',
            'ko': '빵 하나와 바꾸어',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 58,
    },
    1121: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '索菲娅幻巧战',
            'de': 'Traumprüfung - Sophia',
            'en': 'Containment Bay P1T6 (Unreal)',
            'fr': 'Unité de contention P1P6 (irréel)',
            'ja': '幻女神ソフィア討滅戦',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 69,
    },
    1122: {
        'contentType': 28,
        'exVersion': 4,
        'name': {
            'cn': '欧米茄绝境验证战',
            'de': 'Omega (fatal)',
            'en': 'The Omega Protocol (Ultimate)',
            'fr': 'Le Protocole Oméga (fatal)',
            'ja': '絶オメガ検証戦',
            'ko': '절 오메가 검증전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 150,
    },
    1123: {
        'contentType': 9,
        'exVersion': 4,
        'name': {
            'cn': '厄尔庇斯育体宝殿',
            'de': 'Gymnasion Agonon',
            'en': 'The Shifting Gymnasion Agonon',
            'fr': 'Elpis Gymnasion',
            'ja': '宝物庫 エルピス・ギュムナシオン祭殿',
            'ko': '보물고 엘피스 김나시온 제전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1126: {
        'contentType': 2,
        'exVersion': 4,
        'name': {
            'cn': '间歇灵泉哈姆岛',
            'de': 'Ätherborn',
            'en': 'The Aetherfont',
            'fr': 'L\'île de Haam',
            'ja': '星霊間欠 ハーム島',
            'ko': '함 섬',
        },
        'offsetX': 368,
        'offsetY': -277,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1127: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'de': 'Achte auf Attackenmarkierungen!',
            'en': 'React to Attack Markers',
            'fr': 'Réagir à des marquages',
            'ja': 'マーカーが出る攻撃に対処しよう！',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1128: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'de': 'Achte auf Geländemarkierungen!',
            'en': 'React to Floor Markers',
            'fr': 'Réagir à des indications au sol',
            'ja': '地面に予兆が出る攻撃に対処しよう！',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1129: {
        'contentType': 20,
        'exVersion': 0,
        'name': {
            'de': 'Stelle dich allerlei Angriffsmanövern!',
            'en': 'React to Advanced Visual Indicators',
            'fr': 'Réagir à des mécaniques variées',
            'ja': 'さまざまな攻撃に対処しよう！',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1136: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '阿修罗歼灭战',
            'de': 'Prophetie - Asura',
            'en': 'The Gilded Araya',
            'fr': 'Le temple doré d\'Araya',
            'ja': 'アスラ討滅戦',
            'ko': '아수라 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 114,
    },
    1137: {
        'contentType': 30,
        'exVersion': 4,
        'name': {
            'cn': '多变迷宫 六根山',
            'de': 'Der Rokkon',
            'en': 'Mount Rokkon',
            'fr': 'Le mont Rokkon - Donjon à embranchements',
            'ja': 'ヴァリアントダンジョン 六根山',
            'ko': '변형 던전: 육근산',
        },
        'offsetX': -145,
        'offsetY': -820,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1138: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '赤土红沙',
            'de': 'Die Roten Sande',
            'en': 'The Red Sands',
            'fr': 'Les Sables sanglants',
            'ja': 'レッド・サンズ',
            'ko': '붉은 사막',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1139: {
        'contentType': 6,
        'exVersion': 0,
        'name': {
            'cn': '水晶冲突（赤土红沙：自定赛）',
            'de': 'Crystalline Conflict: Die Roten Sande (Schaukampf)',
            'en': 'Crystalline Conflict (Custom Match - The Red Sands)',
            'fr': 'Crystalline Conflict (partie personnalisée - Les Sables sanglants)',
            'ja': 'クリスタルコンフリクト(レッド・サンズ：カスタムマッチ)',
            'ko': '크리스탈라인 컨플릭트(붉은 사막: 친선 경기)',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1140: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '高贝扎歼灭战',
            'de': 'Prophetie - Golbez',
            'en': 'The Voidcast Dais',
            'fr': 'La Chaire de l\'Exilée',
            'ja': 'ゴルベーザ討滅戦',
            'ko': '골베자 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 149,
    },
    1141: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '高贝扎歼殛战',
            'de': 'Eschatos - Golbez',
            'en': 'The Voidcast Dais (Extreme)',
            'fr': 'La Chaire de l\'Exilée (extrême)',
            'ja': '極ゴルベーザ討滅戦',
            'ko': '극 골베자 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 149,
    },
    1142: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '漂流海域妖歌海',
            'de': 'Sirenen-See',
            'en': 'The Sirensong Sea',
            'fr': 'La Mer du Chant des sirènes',
            'ja': '漂流海域 セイレーン海',
            'ko': '세이렌 해',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 36,
    },
    1143: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '试炼行路巴儿达木霸道',
            'de': 'Bardams Probe',
            'en': 'Bardam\'s Mettle',
            'fr': 'La Force de Bardam',
            'ja': '伝統試練 バルダム覇道',
            'ko': '바르담 패도',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1144: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '解放决战多玛王城',
            'de': 'Burg Doma',
            'en': 'Doma Castle',
            'fr': 'Le Château de Doma',
            'ja': '解放決戦 ドマ城',
            'ko': '도마 성',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1145: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '巨炮要塞帝国白山堡',
            'de': 'Castrum Abania',
            'en': 'Castrum Abania',
            'fr': 'Castrum Abania',
            'ja': '巨砲要塞 カストルム・アバニア',
            'ko': '카스트룸 아바니아',
        },
        'offsetX': 72,
        'offsetY': -186,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1146: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '鏖战红莲阿拉米格',
            'de': 'Ala Mhigo',
            'en': 'Ala Mhigo',
            'fr': 'Ala Mhigo',
            'ja': '紅蓮決戦 アラミゴ',
            'ko': '알라미고',
        },
        'offsetX': 292,
        'offsetY': -163,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1147: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '万魔殿 荒天之狱1',
            'de': 'Anabaseios - Neunter Kreis',
            'en': 'Anabaseios: The Ninth Circle',
            'fr': 'Le Paradis du Pandæmonium - Métempsycose',
            'ja': '万魔殿パンデモニウム：天獄編1',
            'ko': '마의 전당 판데모니움: 천옥편 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1148: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '零式万魔殿 荒天之狱1',
            'de': 'Anabaseios - Neunter Kreis (episch)',
            'en': 'Anabaseios: The Ninth Circle (Savage)',
            'fr': 'Le Paradis du Pandæmonium - Métempsycose (sadique)',
            'ja': '万魔殿パンデモニウム零式：天獄編1',
            'ko': '마의 전당 판데모니움: 천옥편(영웅) 1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1149: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '万魔殿 荒天之狱2',
            'de': 'Anabaseios - Zehnter Kreis',
            'en': 'Anabaseios: The Tenth Circle',
            'fr': 'Le Paradis du Pandæmonium - Monochrome',
            'ja': '万魔殿パンデモニウム：天獄編2',
            'ko': '마의 전당 판데모니움: 천옥편 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1150: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '零式万魔殿 荒天之狱2',
            'de': 'Anabaseios - Zehnter Kreis (episch)',
            'en': 'Anabaseios: The Tenth Circle (Savage)',
            'fr': 'Le Paradis du Pandæmonium - Monochrome (sadique)',
            'ja': '万魔殿パンデモニウム零式：天獄編2',
            'ko': '마의 전당 판데모니움: 천옥편(영웅) 2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1151: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '万魔殿 荒天之狱3',
            'de': 'Anabaseios - Elfter Kreis',
            'en': 'Anabaseios: The Eleventh Circle',
            'fr': 'Le Paradis du Pandæmonium - Tribunal',
            'ja': '万魔殿パンデモニウム：天獄編3',
            'ko': '마의 전당 판데모니움: 천옥편 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1152: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '零式万魔殿 荒天之狱3',
            'de': 'Anabaseios - Elfter Kreis (episch)',
            'en': 'Anabaseios: The Eleventh Circle (Savage)',
            'fr': 'Le Paradis du Pandæmonium - Tribunal (sadique)',
            'ja': '万魔殿パンデモニウム零式：天獄編3',
            'ko': '마의 전당 판데모니움: 천옥편(영웅) 3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1153: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '万魔殿 荒天之狱4',
            'de': 'Anabaseios - Zwölfter Kreis',
            'en': 'Anabaseios: The Twelfth Circle',
            'fr': 'Le Paradis du Pandæmonium - Apothéose',
            'ja': '万魔殿パンデモニウム：天獄編4',
            'ko': '마의 전당 판데모니움: 천옥편 4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1154: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '零式万魔殿 荒天之狱4',
            'de': 'Anabaseios - Zwölfter Kreis (episch)',
            'en': 'Anabaseios: The Twelfth Circle (Savage)',
            'fr': 'Le Paradis du Pandæmonium - Apothéose (sadique)',
            'ja': '万魔殿パンデモニウム零式：天獄編4',
            'ko': '마의 전당 판데모니움: 천옥편(영웅) 4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 145,
    },
    1155: {
        'contentType': 30,
        'exVersion': 4,
        'name': {
            'cn': '异闻迷宫 异闻六根山',
            'de': 'Der kuriose Rokkon',
            'en': 'Another Mount Rokkon',
            'fr': 'Le mont Rokkon annexe - Donjon alternatif',
            'ja': 'アナザーダンジョン 異聞六根山',
            'ko': '파생 던전: 번외 육근산',
        },
        'offsetX': 0,
        'offsetY': 40,
        'sizeFactor': 200,
        'weatherRate': 74,
    },
    1156: {
        'contentType': 30,
        'exVersion': 4,
        'name': {
            'cn': '异闻迷宫 零式异闻六根山',
            'de': 'Der kuriose Rokkon (episch)',
            'en': 'Another Mount Rokkon (Savage)',
            'fr': 'Le mont Rokkon annexe - Donjon alternatif (sadique)',
            'ja': 'アナザーダンジョン 異聞六根山 零式',
            'ko': '파생 던전: 번외 육근산(영웅)',
        },
        'offsetX': 0,
        'offsetY': 40,
        'sizeFactor': 200,
        'weatherRate': 74,
    },
    1157: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '祖尔宛幻巧战',
            'de': 'Traumprüfung - Zurvan',
            'en': 'Containment Bay Z1T9 (Unreal)',
            'fr': 'Unité de contention Z1P9 (irréel)',
            'ja': '幻鬼神ズルワーン討滅戦',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 75,
    },
    1164: {
        'contentType': 2,
        'exVersion': 4,
        'name': {
            'cn': '异界深渊月面地下溪谷',
            'de': 'Monduntergrund',
            'en': 'The Lunar Subterrane',
            'fr': 'Le Souterrain lunaire',
            'ja': '深淵潜行 月の地下渓谷',
            'ko': '달의 지하계곡',
        },
        'offsetX': 440,
        'offsetY': 130,
        'sizeFactor': 200,
        'weatherRate': 149,
    },
    1165: {
        'contentType': 19,
        'exVersion': 0,
        'name': {
            'cn': '金碟巨豆中心',
            'de': 'Stolperville',
            'en': 'Blunderville',
            'fr': 'Blunderville',
            'ja': 'ブランダーヴィル',
            'ko': '블런더빌',
        },
        'offsetX': -200,
        'offsetY': -133,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1166: {
        'contentType': 7,
        'exVersion': 0,
        'name': {
            'cn': '纵使前路狱火焰毒',
            'de': 'Der Pfad der Flammen',
            'en': 'Memory of Embers',
            'fr': 'Flammes primordiales',
            'ja': '炎影の旅路',
            'ko': '염영의 여로',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 155,
    },
    1167: {
        'contentType': 2,
        'exVersion': 5,
        'name': {
            'cn': '丛林竞流生息河岸',
            'de': 'Ihuykatumu',
            'en': 'Ihuykatumu',
            'fr': 'La Remontée de l\'Ihuykatumu',
            'ja': '濁流遡上 イフイカ・トゥム',
            'ko': '이후이카 투무',
        },
        'offsetX': -44,
        'offsetY': -88,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1168: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '泽罗姆斯歼灭战',
            'de': 'Prophetie - Zeromus',
            'en': 'The Abyssal Fracture',
            'fr': 'La Fracture abyssale',
            'ja': 'ゼロムス討滅戦',
            'ko': '제로무스 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 149,
    },
    1169: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '泽罗姆斯歼殛战',
            'de': 'Eschatos - Zeromus',
            'en': 'The Abyssal Fracture (Extreme)',
            'fr': 'La Fracture abyssale (extrême)',
            'ja': '極ゼロムス討滅戦',
            'ko': '극 제로무스 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 149,
    },
    1172: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '沉没神殿斯卡拉遗迹',
            'de': 'Die versunkene Stadt Skalla',
            'en': 'The Drowned City of Skalla',
            'fr': 'La Cité engloutie de Skalla',
            'ja': '水没遺構 スカラ',
            'ko': '스칼라 유적',
        },
        'offsetX': 185,
        'offsetY': 5,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1173: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '死亡大地终末焦土',
            'de': 'Das Kargland',
            'en': 'The Burn',
            'fr': 'L\'Escarre',
            'ja': '永久焦土 ザ・バーン',
            'ko': '영구 초토지대',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 97,
    },
    1174: {
        'contentType': 2,
        'exVersion': 2,
        'name': {
            'cn': '国境防线基姆利特暗区',
            'de': 'Die Ghimlyt-Finsternis',
            'en': 'The Ghimlyt Dark',
            'fr': 'Les Ténèbres de Ghimlyt',
            'ja': '境界戦線 ギムリトダーク',
            'ko': '김리트 황야',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1175: {
        'contentType': 4,
        'exVersion': 4,
        'name': {
            'cn': '圆桌骑士幻巧战',
            'de': 'Traumprüfung - Singularitäts-Reaktor',
            'en': 'The Singularity Reactor (Unreal)',
            'fr': 'Le Réacteur de singularité (irréel)',
            'ja': '幻ナイツ・オブ・ラウンド討滅戦',
            'ko': '환 나이츠 오브 라운드 토벌전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 56,
    },
    1176: {
        'contentType': 30,
        'exVersion': 4,
        'name': {
            'cn': '多变迷宫 阿罗阿罗岛',
            'de': 'Aloalo',
            'en': 'Aloalo Island',
            'fr': 'L\'île d\'Aloalo - Donjon à embranchements',
            'ja': 'ヴァリアントダンジョン アロアロ島',
            'ko': '변형 던전: 알로알로 섬',
        },
        'offsetX': 0,
        'offsetY': -785,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1177: {
        'contentType': 7,
        'exVersion': 4,
        'name': {
            'cn': '那双眼中映出的是',
            'de': 'Die Jagd ist eröffnet',
            'en': 'The Game Is Afoot',
            'fr': 'Par-delà l\'horizon',
            'ja': 'その瞳が見据えるもの',
            'ko': '그 눈동자가 바라보는 것',
        },
        'offsetX': 368,
        'offsetY': -277,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1178: {
        'contentType': 5,
        'exVersion': 4,
        'name': {
            'cn': '荣华神域塔利亚',
            'de': 'Thaleia',
            'en': 'Thaleia',
            'fr': 'Domaine divin - Thalie',
            'ja': '華めく神域 タレイア',
            'ko': '번영의 신역 탈레이아',
        },
        'offsetX': 800,
        'offsetY': 783,
        'sizeFactor': 200,
        'weatherRate': 147,
    },
    1179: {
        'contentType': 30,
        'exVersion': 4,
        'name': {
            'cn': '异闻迷宫 异闻阿罗阿罗岛',
            'de': 'Kurioses Aloalo',
            'en': 'Another Aloalo Island',
            'fr': 'L\'île d\'Aloalo annexe - Donjon alternatif',
            'ja': 'アナザーダンジョン 異聞アロアロ島',
            'ko': '파생 던전: 번외 알로알로 섬',
        },
        'offsetX': 0,
        'offsetY': -60,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1180: {
        'contentType': 30,
        'exVersion': 4,
        'name': {
            'cn': '异闻迷宫 零式异闻阿罗阿罗岛',
            'de': 'Kurioses Aloalo (episch)',
            'en': 'Another Aloalo Island (Savage)',
            'fr': 'L\'île d\'Aloalo annexe - Donjon alternatif (sadique)',
            'ja': 'アナザーダンジョン 異聞アロアロ島 零式',
            'ko': '파생 던전: 번외 알로알로 섬(영웅)',
        },
        'offsetX': 0,
        'offsetY': -60,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1185: {
        'exVersion': 5,
        'name': {
            'cn': '图莱尤拉',
            'de': 'Tuliyollal',
            'en': 'Tuliyollal',
            'fr': 'Tuliyollal',
            'ja': 'トライヨラ',
            'ko': '툴라이욜라',
        },
        'offsetX': 50,
        'offsetY': -70,
        'sizeFactor': 180,
        'weatherRate': 159,
    },
    1186: {
        'exVersion': 5,
        'name': {
            'cn': '九号解决方案',
            'de': 'Lösung Neun',
            'en': 'Solution Nine',
            'fr': 'Solution Neuf',
            'ja': 'ソリューション・ナイン',
            'ko': '솔루션 나인',
        },
        'offsetX': 0,
        'offsetY': 90,
        'sizeFactor': 180,
        'weatherRate': 163,
    },
    1187: {
        'exVersion': 5,
        'name': {
            'cn': '奥阔帕恰山',
            'de': 'Urqopacha',
            'en': 'Urqopacha',
            'fr': 'Urqopacha',
            'ja': 'オルコ・パチャ',
            'ko': '오르코 파차',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 160,
    },
    1188: {
        'exVersion': 5,
        'name': {
            'cn': '克扎玛乌卡湿地',
            'de': 'Kozama\'uka',
            'en': 'Kozama\'uka',
            'fr': 'Kozama\'uka',
            'ja': 'コザマル・カ',
            'ko': '코자말루 카',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 161,
    },
    1189: {
        'exVersion': 5,
        'name': {
            'cn': '亚克特尔树海',
            'de': 'Yak T\'el',
            'en': 'Yak T\'el',
            'fr': 'Yak T\'el',
            'ja': 'ヤクテル樹海',
            'ko': '야크텔 밀림',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 162,
    },
    1190: {
        'exVersion': 5,
        'name': {
            'cn': '夏劳尼荒野',
            'de': 'Shaaloani',
            'en': 'Shaaloani',
            'fr': 'Shaaloani',
            'ja': 'シャーローニ荒野',
            'ko': '샬로니 황야',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 164,
    },
    1191: {
        'exVersion': 5,
        'name': {
            'cn': '遗产之地',
            'de': 'Ewiges Erbe',
            'en': 'Heritage Found',
            'fr': 'L\'Hoirie recouvrée',
            'ja': 'ヘリテージファウンド',
            'ko': '헤리티지 파운드',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 165,
    },
    1192: {
        'exVersion': 5,
        'name': {
            'cn': '活着的记忆',
            'de': 'Lebende Erinnerung',
            'en': 'Living Memory',
            'fr': 'La Mémoire vivante',
            'ja': 'リビング・メモリー',
            'ko': '리빙 메모리',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 166,
    },
    1193: {
        'contentType': 2,
        'exVersion': 5,
        'name': {
            'cn': '通天绝壁沃刻佐莫山',
            'de': 'Worqor Zormor',
            'en': 'Worqor Zormor',
            'fr': 'Worqor Zormor',
            'ja': '山嶺登頂 ウォーコー・ゾーモー',
            'ko': '워코 조모',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1194: {
        'contentType': 2,
        'exVersion': 5,
        'name': {
            'cn': '神圣禁地深空天坑',
            'de': 'Himmelstiefer Cenote',
            'en': 'The Skydeep Cenote',
            'fr': 'Le cénote des Cieux infinis',
            'ja': '遺産踏査 天深きセノーテ',
            'ko': '하늘심연 세노테',
        },
        'offsetX': 0,
        'offsetY': 144,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1195: {
        'contentType': 4,
        'exVersion': 5,
        'name': {
            'cn': '艳翼蛇鸟歼灭战',
            'de': 'Zel Tajaal - Valigarmanda',
            'en': 'Worqor Lar Dor',
            'fr': 'Worqor Lar Dor',
            'ja': 'ヴァリガルマンダ討滅戦',
            'ko': '발리가르만다 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1196: {
        'contentType': 4,
        'exVersion': 5,
        'name': {
            'cn': '艳翼蛇鸟歼殛战',
            'de': 'Gok Tajaal - Valigarmanda',
            'en': 'Worqor Lar Dor (Extreme)',
            'fr': 'Worqor Lar Dor (extrême)',
            'ja': '極ヴァリガルマンダ討滅戦',
            'ko': '극 발리가르만다 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1198: {
        'contentType': 2,
        'exVersion': 5,
        'name': {
            'cn': '前哨基地先锋营',
            'de': 'Der Außenposten',
            'en': 'Vanguard',
            'fr': 'L\'Avant-garde',
            'ja': '外征前哨 ヴァンガード',
            'ko': '뱅가드',
        },
        'offsetX': 0,
        'offsetY': -20,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1199: {
        'contentType': 2,
        'exVersion': 5,
        'name': {
            'cn': '忆中金曦亚历山德里亚',
            'de': 'Alexandria',
            'en': 'Alexandria',
            'fr': 'Alexandrie',
            'ja': '記憶幻想 アレクサンドリア',
            'ko': '알렉산드리아',
        },
        'offsetX': 29,
        'offsetY': -95,
        'sizeFactor': 200,
        'weatherRate': 157,
    },
    1200: {
        'contentType': 4,
        'exVersion': 5,
        'name': {
            'cn': '佐拉加歼灭战',
            'de': 'Zel Tajaal - Zoraal Ja',
            'en': 'Everkeep',
            'fr': 'Le Pinacle de l\'Éternité',
            'ja': 'ゾラージャ討滅戦',
            'ko': '조라쟈 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 158,
    },
    1201: {
        'contentType': 4,
        'exVersion': 5,
        'name': {
            'cn': '佐拉加歼殛战',
            'de': 'Gok Tajaal - Zoraal Ja',
            'en': 'Everkeep (Extreme)',
            'fr': 'Le Pinacle de l\'Éternité (extrême)',
            'ja': '極ゾラージャ討滅戦',
            'ko': '극 조라쟈 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 158,
    },
    1202: {
        'contentType': 4,
        'exVersion': 5,
        'name': {
            'cn': '永恒女王歼灭战',
            'de': 'Zel Tajaal - Ewige Königin',
            'en': 'The Interphos',
            'fr': 'Interphos',
            'ja': 'エターナルクイーン討滅戦',
            'ko': '이터널 퀸 토벌전',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 157,
    },
    1203: {
        'contentType': 2,
        'exVersion': 5,
        'name': {
            'cn': '荒野秘境仙人刺谷',
            'de': 'Kaktorsenke',
            'en': 'Tender Valley',
            'fr': 'La Vallée des Pampas',
            'ja': '荒野秘境 サボテンダーバレー',
            'ko': '사보텐더 계곡',
        },
        'offsetX': 130,
        'offsetY': -348,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1204: {
        'contentType': 2,
        'exVersion': 5,
        'name': {
            'cn': '噩梦乐园迷途鬼区',
            'de': 'Mahrlingen-Promenade',
            'en': 'The Strayborough Deadwalk',
            'fr': 'Le Parc-aux-Errants',
            'ja': '悪夢遊園 ストレイバロー',
            'ko': '헤매는 성',
        },
        'offsetX': 0,
        'offsetY': -150,
        'sizeFactor': 200,
        'weatherRate': 150,
    },
    1208: {
        'contentType': 2,
        'exVersion': 5,
        'name': {
            'cn': '魂魄工厂创生设施',
            'de': 'Origenik',
            'en': 'Origenics',
            'fr': 'L\'Origenèse',
            'ja': '魂魄工廠 オリジェニクス',
            'ko': '오리제닉스',
        },
        'offsetX': -30,
        'offsetY': -63,
        'sizeFactor': 200,
        'weatherRate': 156,
    },
    1209: {
        'contentType': 9,
        'exVersion': 5,
        'name': {
            'cn': '加加财富天坑',
            'de': 'Cenote Ja Ja Gural',
            'en': 'Cenote Ja Ja Gural',
            'fr': 'Cénote Ja Ja Gural',
            'ja': '宝物庫 セノーテ・ジャジャグラル',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1210: {
        'contentType': 7,
        'exVersion': 5,
        'name': {
            'cn': '一位国王，一位父亲',
            'de': 'Des Vaters viele Sorgen',
            'en': 'A Father First',
            'fr': 'L\'Aurarque et le père',
            'ja': '王として、父として',
            'ko': '왕으로서, 아버지로서',
        },
        'offsetX': 0,
        'offsetY': -19,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1211: {
        'contentType': 7,
        'exVersion': 5,
        'name': {
            'cn': '为守护笑容而战',
            'de': 'Mit scharfer Axt und leichtem Lächeln',
            'en': 'Taking a Stand',
            'fr': 'Préserver la paix',
            'ja': '笑顔を護るための戦い',
            'ko': '행복을 지키기 위한 싸움',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1212: {
        'contentType': 7,
        'exVersion': 5,
        'name': {
            'cn': '友之试炼',
            'de': 'Von Schuld und Sühne',
            'en': 'The Feat of the Brotherhood',
            'fr': 'L\'épreuve de l\'amitié',
            'ja': '友の試練',
            'ko': '친구의 시련',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1213: {
        'contentType': 7,
        'exVersion': 5,
        'name': {
            'cn': '守护者还是毁灭者',
            'de': 'Schützer des Volkes, Schlächter des Volkes',
            'en': 'The Protector and the Destroyer',
            'fr': 'Protecteurs et destructeurs',
            'ja': '護る者、壊す者',
            'ko': '지키는 자, 파괴하는 자',
        },
        'offsetX': 0,
        'offsetY': 90,
        'sizeFactor': 180,
        'weatherRate': 0,
    },
    1214: {
        'contentType': 7,
        'exVersion': 5,
        'name': {
            'cn': '不论酣睡还是无眠',
            'de': 'Neue Bande der Freund­schaft',
            'en': 'Dreams of a New Day',
            'fr': 'Rêves éveillés',
            'ja': '寝ても覚めても',
            'ko': '잠이 들어도, 잠에서 깨어나도',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 95,
        'weatherRate': 0,
    },
    1215: {
        'contentType': 7,
        'exVersion': 5,
        'name': {
            'cn': '剧毒与康复的巅峰对决',
            'de': 'Heilkunst gegen Hexerei',
            'en': 'An Antidote for Anarchy',
            'fr': 'Les deux faces du scorpion',
            'ja': '毒と癒やしの頂上決戦',
            'ko': '독과 치유의 결전',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1216: {
        'contentType': 7,
        'exVersion': 5,
        'name': {
            'cn': '无可指摘的猎人',
            'de': 'Krönender Abschuss',
            'en': 'A Hunter True',
            'fr': 'Chasseuse à lunettes... chasseuse honnête',
            'ja': '一端の狩人',
            'ko': '어엿한 사냥꾼',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1217: {
        'contentType': 7,
        'exVersion': 5,
        'name': {
            'cn': '打倒！沙尔托菲特盗贼团！',
            'de': 'Der mächtigste Schild',
            'en': 'The Mightiest Shield',
            'fr': 'Mauvais cru pour Chalteaufite',
            'ja': '打倒！ シャルトフィット盗賊団',
            'ko': '타도! 샬토피트 도적단',
        },
        'offsetX': -250,
        'offsetY': 128,
        'sizeFactor': 200,
        'weatherRate': 36,
    },
    1218: {
        'contentType': 7,
        'exVersion': 5,
        'name': {
            'cn': '祭器创造的假象',
            'de': 'Ein Mythos in Trümmern',
            'en': 'Heroes and Pretenders',
            'fr': 'Le château de cartes s\'effondre',
            'ja': '祭器と作られた虚像',
            'ko': '제기로 만든 허상',
        },
        'offsetX': -693,
        'offsetY': -46,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1225: {
        'contentType': 5,
        'exVersion': 5,
        'name': {
            'cn': '阿卡狄亚登天斗技场 轻量级1',
            'de': 'Arkadion - Halbschwergewicht R1',
            'en': 'AAC Light-heavyweight M1',
            'fr': 'Poids mi-lourds CCA - match 1',
            'ja': '至天の座アルカディア：ライトヘビー級1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1226: {
        'contentType': 5,
        'exVersion': 5,
        'name': {
            'cn': '阿卡狄亚零式登天斗技场 轻量级1',
            'de': 'Arkadion - Halbschwergewicht R1 (episch)',
            'en': 'AAC Light-heavyweight M1 (Savage)',
            'fr': 'Poids mi-lourds CCA - match 1 (sadique)',
            'ja': '至天の座アルカディア零式：ライトヘビー級1',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1227: {
        'contentType': 5,
        'exVersion': 5,
        'name': {
            'cn': '阿卡狄亚登天斗技场 轻量级2',
            'de': 'Arkadion - Halbschwergewicht R2',
            'en': 'AAC Light-heavyweight M2',
            'fr': 'Poids mi-lourds CCA - match 2',
            'ja': '至天の座アルカディア：ライトヘビー級2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1228: {
        'contentType': 5,
        'exVersion': 5,
        'name': {
            'cn': '阿卡狄亚零式登天斗技场 轻量级2',
            'de': 'Arkadion - Halbschwergewicht R2 (episch)',
            'en': 'AAC Light-heavyweight M2 (Savage)',
            'fr': 'Poids mi-lourds CCA - match 2 (sadique)',
            'ja': '至天の座アルカディア零式：ライトヘビー級2',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1229: {
        'contentType': 5,
        'exVersion': 5,
        'name': {
            'cn': '阿卡狄亚登天斗技场 轻量级3',
            'de': 'Arkadion - Halbschwergewicht R3',
            'en': 'AAC Light-heavyweight M3',
            'fr': 'Poids mi-lourds CCA - match 3',
            'ja': '至天の座アルカディア：ライトヘビー級3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1230: {
        'contentType': 5,
        'exVersion': 5,
        'name': {
            'cn': '阿卡狄亚零式登天斗技场 轻量级3',
            'de': 'Arkadion - Halbschwergewicht R3 (episch)',
            'en': 'AAC Light-heavyweight M3 (Savage)',
            'fr': 'Poids mi-lourds CCA - match 3 (sadique)',
            'ja': '至天の座アルカディア零式：ライトヘビー級3',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1231: {
        'contentType': 5,
        'exVersion': 5,
        'name': {
            'cn': '阿卡狄亚登天斗技场 轻量级4',
            'de': 'Arkadion - Halbschwergewicht R4',
            'en': 'AAC Light-heavyweight M4',
            'fr': 'Poids mi-lourds CCA - match 4',
            'ja': '至天の座アルカディア：ライトヘビー級4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1232: {
        'contentType': 5,
        'exVersion': 5,
        'name': {
            'cn': '阿卡狄亚零式登天斗技场 轻量级4',
            'de': 'Arkadion - Halbschwergewicht R4 (episch)',
            'en': 'AAC Light-heavyweight M4 (Savage)',
            'fr': 'Poids mi-lourds CCA - match 4 (sadique)',
            'ja': '至天の座アルカディア零式：ライトヘビー級4',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1233: {
        'contentType': 7,
        'exVersion': 5,
        'name': {
            'cn': '旅行画家的森都旅程',
            'de': 'Nächtliche Ruhestörung',
            'en': 'Mind over Manor',
            'fr': 'Tapage nocturne',
            'ja': '旅する画家は森都を征く',
            'ko': '떠돌이 화가는 숲의 도시로',
        },
        'offsetX': 32,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1234: {
        'contentType': 7,
        'exVersion': 5,
        'name': {
            'cn': '旅行画家的幻想旅程',
            'de': 'Begegnungen und Abschiede',
            'en': 'Somewhere Only She Knows',
            'fr': 'L\'œuvre de la maturité',
            'ja': '旅する画家は幻想を征く',
            'ko': '떠돌이 화가는 환상 속으로',
        },
        'offsetX': 0,
        'offsetY': 286,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1235: {
        'contentType': 7,
        'exVersion': 5,
        'name': {
            'cn': '蝰蛇剑士的使命',
            'de': 'Einführung in die Viperologie',
            'en': 'Fangs of the Viper',
            'fr': 'Le devoir des rôdeurs vipère',
            'ja': 'ヴァイパーの使命',
            'ko': '바이퍼의 사명',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1236: {
        'contentType': 7,
        'exVersion': 5,
        'name': {
            'cn': '图拉尔威爪猎手',
            'de': 'Der Wille der Natur',
            'en': 'Vengeance of the Viper',
            'fr': 'Le fléau des Tural vidraal',
            'ja': 'トラルヴィドラールを狩る者',
            'ko': '투랄비드랄을 사냥하는 자',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1238: {
        'contentType': 28,
        'exVersion': 5,
        'name': {
            'de': 'Eine zweite Zukunft (fatal)',
            'en': 'Futures Rewritten (Ultimate)',
            'fr': 'Avenirs réécrits (fatal)',
            'ja': '絶もうひとつの未来',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 0,
    },
    1239: {
        'contentType': 4,
        'exVersion': 5,
        'name': {
            'de': 'Traumprüfung - Byakko',
            'en': 'The Jade Stoa (Unreal)',
            'fr': 'La Clairière de Jade (irréel)',
            'ja': '幻白虎征魂戦',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 400,
        'weatherRate': 93,
    },
    1242: {
        'contentType': 2,
        'exVersion': 5,
        'name': {
            'de': 'Forschungsstation Yuweyawata',
            'en': 'Yuweyawata Field Station',
            'fr': 'Le centre de recherche de Yuweyawata',
            'ja': '廃地討究 ユウェヤーワータ',
        },
        'offsetX': -35,
        'offsetY': -398,
        'sizeFactor': 200,
        'weatherRate': 86,
    },
    1243: {
        'contentType': 4,
        'exVersion': 5,
        'name': {
            'de': 'Gok Tajaal - Ewige Königin',
            'en': 'The Minstrel’s Ballad: Sphene\'s Burden',
            'fr': 'Interphos (extrême)',
            'ja': '極エターナルクイーン討滅戦',
        },
        'offsetX': -100,
        'offsetY': -100,
        'sizeFactor': 400,
        'weatherRate': 157,
    },
    1244: {
        'contentType': 7,
        'exVersion': 5,
        'name': {
            'de': 'Ein Land, eine Familie',
            'en': 'The Warmth of Family',
            'fr': 'La famille de l\'Aurarque',
            'ja': '王の家族',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 100,
        'weatherRate': 0,
    },
    1245: {
        'contentType': 2,
        'exVersion': 0,
        'name': {
            'cn': '魔兽领域日影地修炼所',
            'de': 'Halatali',
            'en': 'Halatali',
            'fr': 'Halatali',
            'ja': '魔獣領域 ハラタリ修練所',
            'ko': '할라탈리 수련장',
        },
        'offsetX': 0,
        'offsetY': 0,
        'sizeFactor': 200,
        'weatherRate': 0,
    },
    1248: {
        'contentType': 5,
        'exVersion': 5,
        'name': {
            'de': 'Jeuno: Die erste Etappe',
            'en': 'Jeuno: The First Walk',
            'fr': 'Jeuno - La première perambulation',
            'ja': 'ジュノ：ザ・ファーストウォーク',
        },
        'offsetX': -800,
        'offsetY': -595,
        'sizeFactor': 200,
        'weatherRate': 150,
    },
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (data);
//# sourceMappingURL=zone_info.js.map

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";

// EXTERNAL MODULE: ./node_modules/cactbot/resources/user_config.js
var user_config = __webpack_require__(380);
;// CONCATENATED MODULE: ./src/buff_options.ts

const defaultUserConfig = {
  Scale: 125,
  BigBuffNoticeTTSOn: true,
  DotNoticeLessThanSecond: 7,
  DotNoticeTTSOn: true,
  DotNoticeTTS: "续DoT",
  // 提醒语音

  TTSGoringBlade: false,
  // 骑士-沥血剑
  TTSSurgingTempest: true,
  // 战士-红斩
  TTSDia: true,
  // 白魔-天辉
  TTSBiolysis: true,
  // 学者-蛊毒法
  TTSCombustIII: true,
  // 占星-焚灼
  TTSEukrasianDosisIii: true,
  // 贤者-均衡注药
  TTSDemolish: false,
  // 武僧-破碎拳
  TTSChaoticSpring: false,
  // 龙骑-樱花
  TTSHiganbana: true,
  // 武士-彼岸花
  TTSDeathsDesign: true,
  // 镰刀-死亡之影
  TTSStormbite: true,
  // 诗人-狂风蚀箭
  TTSThunderIii: true // 黑魔-暴雷
};
const defaultJobsNonConfigOptions = {
  JustBuffTracker: false,
  LowerOpacityOutOfCombat: true,
  OpacityOutOfCombat: 0.5,
  PlayCountdownSound: true,
  CountdownSoundVolume: 0.3,
  HideWellFedAboveSeconds: 15 * 60,
  ShowMPTickerOutOfCombat: false,
  MidHealthThresholdPercent: 0.8,
  LowHealthThresholdPercent: 0.2,
  BigBuffShowCooldownSeconds: 20,
  Scale: 125,
  // 缩放
  PhysicalFontSize: 20,
  MagicFontSize: 20,
  BigBuffIconWidth: 32,
  BigBuffIconHeight: 20,
  BigBuffBarHeight: 20,
  BigBuffTextHeight: 0,
  BigBuffBorderSize: 0,
  BigBuffBarMaxWidth: 250,
  // 30秒团辅进度条最大宽度
  BigBuffNoticeTTSOn: true,
  DotIconWidth: 32,
  DotIconHeight: 25,
  DotBarHeight: 5,
  DotBorderSize: 1,
  DotNoticeLessThanSecond: 7,
  // <0 取消提醒, >0 剩余n秒时提醒
  DotNoticeTTSOn: true,
  DotNoticeTTS: "续DoT",
  // 提醒语音

  GpAlarmPoint: 0,
  GpAlarmSoundVolume: 0.8,
  NotifyExpiredProcsInCombat: 5,
  NotifyExpiredProcsInCombatSound: 'threshold',
  CompactView: false,
  TTSGoringBlade: false,
  // 骑士-沥血剑
  TTSSurgingTempest: true,
  // 战士-红斩
  TTSDia: true,
  // 白魔-天辉
  TTSBiolysis: true,
  // 学者-蛊毒法
  TTSCombustIII: true,
  // 占星-焚灼
  TTSEukrasianDosisIii: true,
  // 贤者-均衡注药
  TTSDemolish: false,
  // 武僧-破碎拳
  TTSChaoticSpring: false,
  // 龙骑-樱花
  TTSHiganbana: true,
  // 武士-彼岸花
  TTSDeathsDesign: true,
  // 镰刀-死亡之影
  TTSStormbite: true,
  // 诗人-狂风蚀箭
  TTSThunderIii: true // 黑魔-暴雷
};
// See user/jobs-example.js for documentation.
const defaultJobsConfigOptions = {
  ShowHPNumber: ['PLD', 'WAR', 'DRK', 'GNB', 'WHM', 'SCH', 'AST', 'SGE', 'BLU'],
  ShowMPNumber: ['PLD', 'DRK', 'WHM', 'SCH', 'AST', 'SGE', 'BLM', 'BLU'],
  ShowMPTicker: ['BLM'],
  PerBuffOptions: {
    // This is noisy since it's more or less permanently on you.
    // Players are unlikely to make different decisions based on this.
    standardFinish: {
      hide: true
    }
  },
  FarThresholdOffence: 24,
  // cannot cast more spell before Requiescat combo.
  PldMediumMPThreshold: 5399,
  // cannot complete Requiescat combo.
  PldLowMPThreshold: 3599,
  // Only one MP consuming abilities cast allowed.
  DrkMediumMPThreshold: 5999,
  // cannot cast MP consuming abilities.
  DrkLowMPThreshold: 2999,
  // One more fire IV and then despair.
  BlmMediumMPThreshold: 3999,
  // Should cast despair.
  BlmLowMPThreshold: 2399
};
const Options = {
  ...user_config/* default */.A.getDefaultBaseOptions(),
  ...defaultJobsNonConfigOptions,
  ...defaultJobsConfigOptions
};
/* harmony default export */ const buff_options = (Options);
// EXTERNAL MODULE: ./node_modules/eventemitter3/index.js
var eventemitter3 = __webpack_require__(228);
var eventemitter3_default = /*#__PURE__*/__webpack_require__.n(eventemitter3);
// EXTERNAL MODULE: ./node_modules/cactbot/resources/netlog_defs.js
var netlog_defs = __webpack_require__(130);
// EXTERNAL MODULE: ./node_modules/cactbot/resources/overlay_plugin_api.js
var overlay_plugin_api = __webpack_require__(181);
// EXTERNAL MODULE: ./node_modules/cactbot/resources/zone_info.js
var zone_info = __webpack_require__(53);
// EXTERNAL MODULE: ./node_modules/cactbot/resources/netregexes.js
var netregexes = __webpack_require__(702);
// EXTERNAL MODULE: ./node_modules/cactbot/resources/not_reached.js
var not_reached = __webpack_require__(174);
;// CONCATENATED MODULE: ./node_modules/cactbot/resources/timerbar.js

class TimerBar extends HTMLElement {
    rootElement;
    foregroundElement;
    backgroundElement;
    leftTextElement;
    centerTextElement;
    rightTextElement;
    _duration;
    _start;
    _width;
    _height;
    _bg;
    _fg;
    _towardRight;
    _fill;
    _leftText;
    _centerText;
    _rightText;
    _hideAfter;
    _loop;
    _connected;
    _hideTimer;
    static get observedAttributes() {
        return [
            'duration',
            'value',
            'elapsed',
            'hideafter',
            'lefttext',
            'centertext',
            'righttext',
            'width',
            'height',
            'bg',
            'fg',
            'stylefill',
            'toward',
            'loop',
        ];
    }
    /** create an instance of TimerBar with attributes */
    static create(o) {
        if (!window.customElements.get('timer-bar'))
            window.customElements.define('timer-bar', TimerBar);
        const element = document.createElement('timer-bar');
        if (!o)
            return element;
        if (typeof o.duration === 'number')
            element.duration = o.duration;
        if (typeof o.value === 'number')
            element.value = o.value;
        if (typeof o.elapsed === 'number')
            element.elapsed = o.elapsed;
        if (typeof o.hideafter === 'number')
            element.hideafter = o.hideafter;
        if (typeof o.lefttext === 'string')
            element.lefttext = o.lefttext;
        if (typeof o.centertext === 'string')
            element.centertext = o.centertext;
        if (typeof o.righttext === 'string')
            element.righttext = o.righttext;
        if (typeof o.width === 'string')
            element.width = o.width;
        if (typeof o.height === 'string')
            element.height = o.height;
        if (typeof o.bg === 'string')
            element.bg = o.bg;
        if (typeof o.fg === 'string')
            element.fg = o.fg;
        if (typeof o.stylefill === 'string')
            element.stylefill = o.stylefill;
        if (typeof o.toward === 'string')
            element.toward = o.toward;
        if (typeof o.loop === 'boolean')
            element.loop = o.loop;
        return element;
    }
    // Background color.
    set bg(c) {
        if (c === null)
            this.removeAttribute('bg');
        else
            this.setAttribute('bg', c);
    }
    get bg() {
        return this.getAttribute('bg');
    }
    // Foreground color.
    set fg(c) {
        if (c === null)
            this.removeAttribute('fg');
        else
            this.setAttribute('fg', c);
    }
    get fg() {
        return this.getAttribute('fg');
    }
    // The width of the bar.
    set width(w) {
        if (w === null)
            this.removeAttribute('width');
        else
            this.setAttribute('width', w);
    }
    get width() {
        return this.getAttribute('width');
    }
    // The height of the bar.
    set height(w) {
        if (w === null)
            this.removeAttribute('height');
        else
            this.setAttribute('height', w);
    }
    get height() {
        return this.getAttribute('height');
    }
    // The total length of time to count down.
    set duration(s) {
        if (s === null)
            this.removeAttribute('duration');
        else
            this.setAttribute('duration', s.toString());
    }
    get duration() {
        const s = this.getAttribute('duration');
        if (s === null)
            return null;
        return parseFloat(s);
    }
    // The length remaining in the count down.
    set value(s) {
        this.setAttribute('value', s.toString());
    }
    get value() {
        if (!this._start)
            return this._duration;
        const elapsedMs = Date.now() - this._start;
        return Math.max(0, this._duration - elapsedMs / 1000);
    }
    // The elapsed time.
    set elapsed(s) {
        this.setAttribute('elapsed', s.toString());
    }
    get elapsed() {
        if (!this._start)
            return 0;
        return (Date.now() - this._start) / 1000;
    }
    // If "right" then animates left-to-right (the default). If "left"
    // then animates right-to-left.
    set toward(t) {
        if (t === null)
            this.removeAttribute('toward');
        else
            this.setAttribute('toward', t);
    }
    get toward() {
        return this.getAttribute('toward');
    }
    // If "fill" then the progress goes empty-to-full, if "empty" then the
    // progress bar starts full and goes to empty.
    set stylefill(s) {
        if (s === null)
            this.removeAttribute('stylefill');
        else
            this.setAttribute('stylefill', s);
    }
    get stylefill() {
        return this.getAttribute('stylefill');
    }
    // When the bar reaches 0, it is hidden after this many seconds. If null
    // then it is not hidden.
    set hideafter(h) {
        if (h === null)
            this.removeAttribute('hideafter');
        else
            this.setAttribute('hideafter', h.toString());
    }
    get hideafter() {
        const h = this.getAttribute('hideafter');
        if (h === null)
            return null;
        return parseInt(h);
    }
    // Chooses what should be shown in the text field in each area of
    // the bar. Can be one of:
    // empty - nothing is shown.
    // "remain" - shows the remaining time.
    // "duration" - shows the remaining and total duration time
    //              of the bar.
    // "percent" - shows the percentage of remaining time to
    //             the duration.
    // "elapsed"   - shows the elapsed time
    // anything else - the given text is shown literally.
    set lefttext(p) {
        if (p === null)
            this.removeAttribute('lefttext');
        else
            this.setAttribute('lefttext', p);
    }
    get lefttext() {
        return this.getAttribute('lefttext');
    }
    set righttext(p) {
        if (p === null)
            this.removeAttribute('righttext');
        else
            this.setAttribute('righttext', p);
    }
    get righttext() {
        return this.getAttribute('righttext');
    }
    set centertext(p) {
        if (p === null)
            this.removeAttribute('centertext');
        else
            this.setAttribute('centertext', p);
    }
    get centertext() {
        return this.getAttribute('centertext');
    }
    // If this attribute is present, the timer will loop forever.
    set loop(l) {
        if (l)
            this.setAttribute('loop', '');
        else
            this.removeAttribute('loop');
    }
    get loop() {
        return this.hasAttribute('loop');
    }
    // This would be used with window.customElements.
    constructor() {
        super();
        const root = this.attachShadow({ mode: 'open' });
        this.init(root);
        this._connected = false;
        // Default values.
        this._start = 0;
        this._duration = 0;
        this._width = '100%';
        this._height = '100%';
        this._bg = 'black';
        this._fg = 'yellow';
        this._towardRight = false;
        this._fill = false;
        this._leftText = '';
        this._centerText = '';
        this._rightText = '';
        this._hideAfter = -1;
        this._loop = false;
        this._hideTimer = 0;
        this.rootElement = this.shadowRoot?.getElementById('root');
        this.foregroundElement = this.shadowRoot?.getElementById('fg');
        this.backgroundElement = this.shadowRoot?.getElementById('bg');
        this.leftTextElement = this.shadowRoot?.getElementById('lefttext');
        this.centerTextElement = this.shadowRoot?.getElementById('centertext');
        this.rightTextElement = this.shadowRoot?.getElementById('righttext');
    }
    init(root) {
        root.innerHTML = `
      <style>
        .timerbar-root {
          position: relative;
          border: 1px solid black;
          box-sizing: border-box;
        }
        .timerbar-bg {
          position: absolute;
          width: 100%;
          height: 100%;
          opacity: 0.8;
        }
        .timerbar-fg {
          position: absolute;
          width: 100%;
          height: 100%;
          opacity: 1.0;
        }
        .text {
          position: absolute;
          font-family: arial;
          font-weight: bold;
          color: white;
          text-shadow: -1px 0 3px black, 0 1px 3px black, 1px 0 3px black, 0 -1px 3px black;
          will-change: content;
        }
        .text-container {
          position: absolute;
          left: 0px;
          top: calc(50% - 1.2ex);
          width: 100%;
          height: 100%;
          overflow: hidden;
        }
        .timerbar-lefttext {
          position: relative;
          text-align: left;
          padding: 0px 0.4em 0px 0.4em;
        }
        .timerbar-centertext {
          position: relative;
          text-align: center;
          padding: 0px 0.4em 0px 0.4em;
        }
        .timerbar-righttext {
          position: relative;
          text-align: right;
          padding: 0px 0.4em 0px 0.4em;
        }
        :host-context(.just-a-number) .timerbar-root {
          border: none;
        }
        :host-context(.just-a-number) .timerbar-bg {
          display: none;
        }
        :host-context(.just-a-number) .timerbar-fg {
          display: none;
        }
        /* Korean better visibility CSS */
        :lang(ko) .text-container {
          top: calc(50% - 1.5ex);
          height: calc(100% + 0.3ex);
        }
        :lang(ko) .timerbar-righttext {
          top: 0.3ex;
        }
      </style>
      <div id="root" class="timerbar-root" part="timerbar-root">
        <div id="bg" class="timerbar-bg" part="timerbar-bg"></div>
        <div id="fg" class="timerbar-fg" part="timerbar-fg"></div>
        <div class="text-container" part="text-container">
          <div id="lefttext" class="text timerbar-lefttext" part="text timerbar-lefttext"></div>
        </div>
        <div class="text-container" part="text-container">
          <div id="centertext" class="text timerbar-centertext" part="text timerbar-centertext"></div>
        </div>
        <div class="text-container" part="text-container">
          <div id="righttext" class="text timerbar-righttext" part="text timerbar-righttext"></div>
        </div>
      </div>
    `;
    }
    connectedCallback() {
        this._connected = true;
        this.layout();
        this.updateText();
        if (!this._start)
            this.setvalue(this._duration);
        else
            this.advance();
    }
    disconnectedCallback() {
        this._connected = false;
    }
    attributeChangedCallback(name, _oldValue, newValue) {
        if (name === 'duration') {
            this._duration = Math.max(parseFloat(newValue), 0);
            this.setvalue(this._duration);
        }
        else if (name === 'value') {
            this.setvalue(Math.max(parseFloat(newValue), 0));
        }
        else if (name === 'elapsed') {
            this.setvalue(this._duration - Math.max(parseFloat(newValue), 0));
        }
        else if (name === 'width') {
            this._width = newValue;
            this.layout();
        }
        else if (name === 'height') {
            this._height = newValue;
            this.layout();
        }
        else if (name === 'bg') {
            this._bg = newValue;
            this.layout();
        }
        else if (name === 'fg') {
            this._fg = newValue;
            this.layout();
        }
        else if (name === 'stylefill') {
            this._fill = newValue === 'fill';
            this.layout();
        }
        else if (name === 'toward') {
            this._towardRight = newValue === 'right';
            this.layout();
        }
        else if (name === 'lefttext') {
            const update = newValue !== this._leftText && this._connected;
            this._leftText = newValue;
            if (update)
                this.updateText();
        }
        else if (name === 'centertext') {
            const update = newValue !== this._centerText && this._connected;
            this._centerText = newValue;
            if (update)
                this.updateText();
        }
        else if (name === 'righttext') {
            const update = newValue !== this._rightText && this._connected;
            this._rightText = newValue;
            if (update)
                this.updateText();
        }
        else if (name === 'hideafter') {
            this._hideAfter = Math.max(this.hideafter ?? 0, 0);
            if (this.value === 0) {
                if (this._hideAfter >= 0)
                    this.hide();
                else
                    this.show();
            }
        }
        else if (name === 'loop') {
            this._loop = newValue !== null;
        }
        if (this._connected)
            this.draw();
    }
    layout() {
        if (!this._connected)
            return;
        this.backgroundElement.style.background = this._bg;
        this.foregroundElement.style.background = this._fg;
        this.rootElement.style.width = this._width;
        this.rootElement.style.height = this._height;
        // To start full and animate to empty, we animate backwards and flip
        // the direction.
        if (this._towardRight !== this._fill) {
            this.foregroundElement.style.left = '';
            this.foregroundElement.style.right = '0px';
            this.foregroundElement.style.transformOrigin = 'right center';
        }
        else {
            this.foregroundElement.style.left = '0px';
            this.foregroundElement.style.right = '';
            this.foregroundElement.style.transformOrigin = 'left center';
        }
    }
    updateText() {
        const varyingTexts = ['elapsed', 'duration', 'percent', 'remain'];
        // These values are filled in during draw() when the values change.
        if (!varyingTexts.includes(this._leftText)) {
            // Otherwise the value is fixed so it can be set here.
            this.leftTextElement.innerHTML = this._leftText;
        }
        if (!varyingTexts.includes(this._centerText))
            this.centerTextElement.innerHTML = this._centerText;
        if (!varyingTexts.includes(this._rightText))
            this.rightTextElement.innerHTML = this._rightText;
    }
    draw() {
        const elapsedSec = (Date.now() - this._start) / 1000;
        const remainSec = Math.max(0, this._duration - elapsedSec);
        let percent = this._duration <= 0 ? 0 : remainSec / this._duration;
        // Keep it between 0 and 1.
        percent = Math.min(1, Math.max(0, percent));
        const displayRemain = remainSec ? remainSec.toFixed(1) : '';
        const displayElapsed = elapsedSec.toFixed(1);
        if (this._fill)
            percent = 1.0 - percent;
        this.foregroundElement.style.transform = `scaleX(${percent.toFixed(3)})`;
        if (this._leftText !== '') {
            if (this._leftText === 'remain')
                this.leftTextElement.innerText = displayRemain;
            else if (this._leftText === 'duration')
                this.leftTextElement.innerText = `${displayRemain} / ${this._duration}`;
            else if (this._leftText === 'percent')
                this.leftTextElement.innerText = `${(percent * 100).toFixed(1)} %`;
            else if (this._leftText === 'elapsed')
                this.leftTextElement.innerText = displayElapsed;
        }
        if (this._centerText !== '') {
            if (this._centerText === 'remain')
                this.centerTextElement.innerText = displayRemain;
            else if (this._centerText === 'duration')
                this.centerTextElement.innerText = `${displayRemain} / ${this._duration}`;
            else if (this._centerText === 'percent')
                this.centerTextElement.innerText = `${(percent * 100).toFixed(1)} %`;
            else if (this._centerText === 'elapsed')
                this.centerTextElement.innerText = displayElapsed;
        }
        if (this._rightText !== '') {
            if (this._rightText === 'remain')
                this.rightTextElement.innerText = displayRemain;
            else if (this._rightText === 'duration')
                this.rightTextElement.innerText = `${displayRemain} / ${this._duration}`;
            else if (this._rightText === 'percent')
                this.rightTextElement.innerText = `${(percent * 100).toFixed(1)} %`;
            else if (this._rightText === 'elapsed')
                this.rightTextElement.innerText = displayElapsed;
        }
    }
    // Apply all styles from an object where keys are CSS properties
    applyStyles(styles) {
        const s = Object.keys(styles).map((k) => {
            return `${k}:${styles?.[k] ?? ''};`;
        }).join('');
        const left = this.shadowRoot?.getElementById('lefttext');
        const center = this.shadowRoot?.getElementById('centertext');
        const right = this.shadowRoot?.getElementById('righttext');
        if (!left || !center || !right)
            throw new not_reached/* UnreachableCode */.O();
        left.style.cssText += s;
        center.style.cssText += s;
        right.style.cssText += s;
    }
    setvalue(remainSec) {
        const elapsedSec = Math.max(0, this._duration - remainSec);
        this._start = Date.now() - elapsedSec * 1000;
        if (!this._connected)
            return;
        this.show();
        clearTimeout(this._hideTimer ?? 0);
        this._hideTimer = null;
        this.advance();
    }
    advance() {
        // If the element has been disconnected from the DOM, stop requesting animation frames
        if (!this._connected)
            return;
        const elapsedSec = (Date.now() - this._start) / 1000;
        if (elapsedSec >= this._duration) {
            // Timer completed
            if (this._loop && this._duration > 0) {
                // Sets the remaining time to include any extra elapsed seconds past the duration
                this.setvalue(this._duration + (this._duration - elapsedSec) % this._duration);
                return;
            }
            // Sets the attribute to 0 so users can see the counter is done, and
            // if they set the same duration again it will count.
            this._duration = 0;
            if (this._hideAfter > 0)
                this._hideTimer = window.setTimeout(this.hide.bind(this), this._hideAfter * 1000);
            else if (this._hideAfter === 0)
                this.hide();
        }
        else {
            // Timer not completed, request another animation frame
            window.requestAnimationFrame(this.advance.bind(this));
        }
        this.draw();
    }
    show() {
        if (this._connected)
            this.rootElement.style.display = 'block';
    }
    hide() {
        if (this._connected)
            this.rootElement.style.display = 'none';
    }
}
window.customElements.define('timer-bar', TimerBar);
//# sourceMappingURL=timerbar.js.map
;// CONCATENATED MODULE: ./node_modules/cactbot/resources/timericon.js
class TimerIcon extends HTMLElement {
    rootElement;
    borderBackgroundElement;
    borderForegroundElement;
    iconElement;
    textElement;
    kBackgroundOpacity;
    kOuterBorderSize;
    kAnimateMs;
    _value;
    _duration;
    _width;
    _height;
    _borderBg;
    _borderFg;
    _scale;
    _hideAfter;
    _icon;
    _zoom;
    _text;
    _textColor;
    _colorBorderSize;
    _connected;
    _timer;
    _hideTimer;
    startTimeMs;
    static get observedAttributes() {
        return [
            'icon',
            'zoom',
            'duration',
            'width',
            'height',
            'bordercolor',
            'bordersize',
            'text',
            'textcolor',
        ];
    }
    /** create an instance of TimerIcon with attributes */
    static create(o) {
        if (!window.customElements.get('timer-icon'))
            window.customElements.define('timer-icon', TimerIcon);
        const element = document.createElement('timer-icon');
        if (!o)
            return element;
        if (typeof o.icon === 'string')
            element.icon = o.icon;
        if (typeof o.zoom === 'number')
            element.zoom = o.zoom;
        if (typeof o.duration === 'number')
            element.duration = o.duration;
        if (typeof o.width === 'string')
            element.width = o.width;
        if (typeof o.height === 'string')
            element.height = o.height;
        if (typeof o.bordercolor === 'string')
            element.bordercolor = o.bordercolor;
        if (typeof o.bordersize === 'string')
            element.bordersize = o.bordersize;
        if (typeof o.text === 'string')
            element.text = o.text;
        if (typeof o.textcolor === 'string')
            element.textcolor = o.textcolor;
        return element;
    }
    // All visual dimensions are scaled by this.
    set scale(s) {
        if (s === null)
            this.removeAttribute('scale');
        else
            this.setAttribute('scale', s.toString());
    }
    get scale() {
        const s = this.getAttribute('scale');
        if (s === null)
            return null;
        return parseFloat(s);
    }
    // Border color.
    set bordercolor(c) {
        if (c === null)
            this.removeAttribute('bordercolor');
        else
            this.setAttribute('bordercolor', c);
    }
    get bordercolor() {
        return this.getAttribute('bordercolor');
    }
    // Border size for the inner colored border.
    set bordersize(c) {
        if (c === null)
            this.removeAttribute('bordersize');
        else
            this.setAttribute('bordersize', c);
    }
    get bordersize() {
        return this.getAttribute('bordersize');
    }
    // The width of the icon, in pixels (before |scale|).
    set width(w) {
        if (w === null)
            this.removeAttribute('width');
        else
            this.setAttribute('width', w);
    }
    get width() {
        return this.getAttribute('width');
    }
    // The height of the icon, in pixels (before |scale|).
    set height(h) {
        if (h === null)
            this.removeAttribute('height');
        else
            this.setAttribute('height', h);
    }
    get height() {
        return this.getAttribute('height');
    }
    // The length of time to count down.
    set duration(s) {
        if (s === null)
            this.removeAttribute('duration');
        else
            this.setAttribute('duration', s.toString());
    }
    get duration() {
        const s = this.getAttribute('duration');
        if (s === null)
            return null;
        return parseFloat(s);
    }
    // When the timer reaches 0, it is hidden after this many seconds. If null
    // then it is not hidden.
    set hideafter(h) {
        if (h === null)
            this.removeAttribute('hideafter');
        else
            this.setAttribute('hideafter', h.toString());
    }
    get hideafter() {
        const s = this.getAttribute('hideafter');
        if (s === null)
            return null;
        return parseFloat(s);
    }
    // Sets the path to the image to show in the icon.
    set icon(p) {
        if (p === null)
            this.removeAttribute('icon');
        else
            this.setAttribute('icon', p);
    }
    get icon() {
        return this.getAttribute('icon');
    }
    // Sets the number of pixels to zoom the icon. The image will be
    // grown by this amount and cropped to the widget.
    set zoom(p) {
        if (p === null)
            this.removeAttribute('zoom');
        else
            this.setAttribute('zoom', p.toString());
    }
    get zoom() {
        const s = this.getAttribute('zoom');
        if (s === null)
            return null;
        return parseFloat(s);
    }
    // Sets what text should be shown in the icon. If empty, no text.
    // If 'remain', the number of seconds left, if 'elapsed', the number
    // of seconds active. If 'percent', the percentage of time remaining.
    // Otherwise, the literal text is shown.
    set text(p) {
        if (p === null)
            this.removeAttribute('text');
        else
            this.setAttribute('text', p);
    }
    get text() {
        return this.getAttribute('text');
    }
    set textcolor(p) {
        if (p === null)
            this.removeAttribute('textcolor');
        else
            this.setAttribute('textcolor', p);
    }
    get textcolor() {
        return this.getAttribute('textcolor');
    }
    // This would be used with window.customElements.
    constructor() {
        super();
        const root = this.attachShadow({ mode: 'open' });
        this.init(root);
        this._connected = false;
        this.rootElement = this.shadowRoot?.getElementById('root');
        this.borderBackgroundElement = this.shadowRoot?.getElementById('border-bg');
        this.borderForegroundElement = this.shadowRoot?.getElementById('border-fg');
        this.iconElement = this.shadowRoot?.getElementById('icon');
        this.textElement = this.shadowRoot?.getElementById('text');
        // Constants.
        this.kBackgroundOpacity = 0.8;
        this.kOuterBorderSize = 1;
        this.kAnimateMs = 100;
        // Default values.
        this._value = 0;
        this._duration = 0;
        this._width = 64;
        this._height = 64;
        this._borderBg = 'black';
        this._borderFg = 'grey';
        this._scale = 1;
        this._hideAfter = -1;
        this._icon = '';
        this._zoom = 20;
        this._text = 'remain';
        this._textColor = 'white';
        this._colorBorderSize = 2;
        this.startTimeMs = 0;
        this._timer = 0;
        this._hideTimer = 0;
        if (this.duration !== null)
            this._duration = Math.max(this.duration, 0);
        if (this.width !== null)
            this._width = Math.max(parseInt(this.width), 1);
        if (this.height !== null)
            this._height = Math.max(parseInt(this.height), 1);
        if (this.bordercolor !== null)
            this._borderFg = this.bordercolor;
        if (this.bordersize !== null)
            this._colorBorderSize = Math.max(parseInt(this.bordersize), 0);
        if (this.scale !== null)
            this._scale = Math.max(this.scale, 0.01);
        if (this.hideafter !== null)
            this._hideAfter = Math.max(this.hideafter, 0);
        if (this.icon !== null)
            this._icon = this.icon;
        if (this.zoom !== null)
            this._zoom = Math.max(this.zoom, 0);
        if (this.text !== null)
            this._text = this.text;
        if (this.textcolor !== null)
            this._textColor = this.textcolor;
    }
    init(root) {
        root.innerHTML = `
      <style>
        .text {
          position: absolute;
          font-family: arial;
          text-shadow: -1px 0 3px black, 0 1px 3px black, 1px 0 3px black, 0 -1px 3px black;
          will-change: content;
        }
        #border-bg {
          position: absolute;
        }
        #border-fg {
          position: absolute;
        }
        #icon {
          position: absolute;
          will-change: content;
        }
        #text {
          position: absolute;
          overflow: hidden;
          word-break: break-all;
        }
      </style>
      <div id="root" style="position: relative">
        <div id="border-bg"></div>
        <div id="border-fg"></div>
        <div id="icon"></div>
        <div id="text" class="text"></div>
      </div>
    `;
    }
    connectedCallback() {
        this._connected = true;
        this.layout();
        this.reset();
    }
    disconnectedCallback() {
        this._connected = false;
    }
    attributeChangedCallback(name, _oldValue, newValue) {
        if (name === 'duration') {
            this._duration = Math.max(parseFloat(newValue), 0);
            this.reset();
        }
        else if (name === 'width') {
            this._width = Math.max(parseInt(newValue), 1);
            this.layout();
        }
        else if (name === 'height') {
            this._height = Math.max(parseInt(newValue), 1);
            this.layout();
        }
        else if (name === 'bordercolor') {
            this._borderFg = newValue;
            this.layout();
        }
        else if (name === 'bordersize') {
            this._colorBorderSize = Math.max(parseInt(newValue), 0);
            this.layout();
        }
        else if (name === 'icon') {
            this._icon = newValue;
            this.layout();
        }
        else if (name === 'zoom') {
            this._zoom = Math.max(parseInt(newValue), 0);
            this.layout();
        }
        else if (name === 'text') {
            this._text = newValue;
        }
        else if (name === 'textcolor') {
            this._textColor = newValue;
        }
        if (this._connected)
            this.draw();
    }
    layout() {
        if (!this._connected)
            return;
        const borderBackgroundStyle = this.borderBackgroundElement.style;
        const borderForegroundStyle = this.borderForegroundElement.style;
        const iconStyle = this.iconElement.style;
        const textStyle = this.textElement.style;
        borderBackgroundStyle.backgroundColor = this._borderBg;
        borderBackgroundStyle.opacity = this.kBackgroundOpacity.toString();
        borderBackgroundStyle.width = (this._width * this._scale).toString();
        borderBackgroundStyle.height = (this._height * this._scale).toString();
        const borderPadding = this.kOuterBorderSize * 2 + this._colorBorderSize * 2;
        borderForegroundStyle.width = ((this._width - borderPadding) * this._scale).toString();
        borderForegroundStyle.height = ((this._height - borderPadding) * this._scale).toString();
        borderForegroundStyle.borderWidth = (this._colorBorderSize * this._scale).toString();
        borderForegroundStyle.borderColor = this._borderFg;
        borderForegroundStyle.borderStyle = 'solid';
        borderForegroundStyle.left = (this.kOuterBorderSize * this._scale).toString();
        borderForegroundStyle.top = (this.kOuterBorderSize * this._scale).toString();
        const iconLeft = (this.kOuterBorderSize * 2 + this._colorBorderSize) * this._scale;
        const iconTop = (this.kOuterBorderSize * 2 + this._colorBorderSize) * this._scale;
        const iconPadding = this.kOuterBorderSize * 4 + this._colorBorderSize * 2;
        const iconWidth = (this._width - iconPadding) * this._scale;
        const iconHeight = (this._height - iconPadding) * this._scale;
        const textHeight = Math.ceil(Math.min(iconWidth, iconHeight) / 1.8);
        iconStyle.width = iconWidth.toString();
        iconStyle.height = iconHeight.toString();
        iconStyle.left = iconLeft.toString();
        iconStyle.top = iconTop.toString();
        iconStyle.backgroundImage = `url('${this._icon}')`;
        iconStyle.backgroundSize = `${Math.min(iconWidth, iconHeight) + this._zoom * this._scale}px`;
        iconStyle.backgroundPosition = 'center center';
        textStyle.top = (iconTop + (iconHeight - textHeight) / 2).toString();
        textStyle.left = iconLeft.toString();
        textStyle.width = iconWidth.toString();
        // Other languages' character can be higher, +5 to make them display completely.
        textStyle.height = (textHeight + 5).toString();
        textStyle.fontSize = textHeight.toString();
        textStyle.textAlign = 'center';
        textStyle.fontWeight = 'bold';
        textStyle.color = this._textColor;
    }
    draw() {
        if (this._text === 'remain') {
            const intRemain = Math.ceil(this._value);
            if (intRemain > 0)
                this.textElement.innerText = intRemain.toString();
            else
                this.textElement.innerText = '';
        }
        else if (this._text === 'percent') {
            let percent = this._duration <= 0 ? 1 : this._value / this._duration;
            // Keep it between 0 and 1.
            percent = Math.min(1, Math.max(0, percent));
            this.textElement.innerText = (percent * 100).toFixed(0);
        }
        else if (this._text === 'elapsed') {
            const intelapsed = (this._duration - this._value).toFixed(0);
            this.textElement.innerText = intelapsed;
        }
        else {
            this.textElement.innerHTML = this._text;
        }
    }
    reset() {
        if (!this._connected)
            return;
        this.startTimeMs = Date.now();
        this.rootElement.style.display = 'block';
        clearTimeout(this._hideTimer ?? 0);
        this._hideTimer = null;
        clearTimeout(this._timer ?? 0);
        this._timer = null;
        this._value = this._duration;
        this.advance();
    }
    advance() {
        this._value = this._duration + (this.startTimeMs - Date.now()) / 1000;
        if (this._value <= 0) {
            this._value = 0;
            if (this._hideAfter >= 0) {
                this._hideTimer = window.setTimeout(() => {
                    this.rootElement.style.display = 'none';
                }, this._hideAfter);
            }
        }
        else {
            this._timer = window.setTimeout(() => {
                this.advance();
            }, this.kAnimateMs);
        }
        this.draw();
    }
}
window.customElements.define('timer-icon', TimerIcon);
//# sourceMappingURL=timericon.js.map
;// CONCATENATED MODULE: ./node_modules/cactbot/ui/raidboss/common_replacement.js
// TODO: maybe this should be structured identically to a timelineReplace section.
// The seal key is kind of a hack because we use it in a lot of different
// contexts and need to correctly grab the name of the zone that is sealed.
// These are some various lookbehinds for those different contexts:
// Regexes for a parsed ACT log line
const parsedLB = '00:0839::';
// Regexes for a network log line
const networkLB = '00\\|[^|]*\\|0839\\|\\|';
// Regex for a regex for a network log line.  <_<
const netRegexLB = '\\\\\\|0839\\\\\\|\\[\\^\\|\\]\\*\\\\\\|';
// A bare parameter (e.g. `X will be sealed off` via `netRegex: { line: 'X will be sealed off' },`)
const paramLB = '^';
// It's awkward to refer to these string keys, so name them as replaceSync[keys.sealKey].
const syncKeys = {
    // Seal is trying to match these types of lines, and is more complicated because it's
    // trying to also capture the area name:
    //   parsed log lines: 00:0839::Something will be sealed off
    //   network log lines: 00|timestamp|0839||Something will be sealed off
    //   NetRegexes: ^^00\|[^|]*\|0839\|[^|]*\|Something will be sealed off.*?\|
    seal: `(?<=${parsedLB}|${networkLB}|${netRegexLB}|${paramLB})([^|:]*) will be sealed off(?: in (?:[0-9]+ seconds)?)?`,
    unseal: 'is no longer sealed',
    engage: 'Engage!',
};
const textKeys = {
    // Match directions in replaceText
    // eg: `(N)`, `(SW)`, `(NE/NW)`, etc.
    E: '(?<= \\(|\\/)E(?=\\)|\\/)',
    N: '(?<= \\(|\\/)N(?=\\)|\\/)',
    S: '(?<= \\(|\\/)S(?=\\)|\\/)',
    W: '(?<= \\(|\\/)W(?=\\)|\\/)',
    NE: '(?<= \\(|\\/)NE(?=\\)|\\/)',
    NW: '(?<= \\(|\\/)NW(?=\\)|\\/)',
    SE: '(?<= \\(|\\/)SE(?=\\)|\\/)',
    SW: '(?<= \\(|\\/)SW(?=\\)|\\/)',
    // Match Roles in replaceText
    // eg: `(Tank)`, `(Healer)`, `(DPS)`, etc
    Tank: '(?<= \\(|\\/)Tanks?(?=\\)|\\/)',
    Healer: '(?<= \\(|\\/)Healers?(?=\\)|\\/)',
    DPS: '(?<= \\(|\\/)DPS(?=\\)|\\/)',
    // Match `--1--` style text.
    Number: '--(\\s*\\d+\\s*)--',
};
const common_replacement_commonReplacement = {
    replaceSync: {
        [syncKeys.seal]: {
            en: '$1 will be sealed off',
            de: 'Noch 15 Sekunden, bis sich (?:(?:der|die|das) )?(?:Zugang zu(?:[rm]| den)? )?$1 schließt',
            fr: 'Fermeture d(?:e|u|es) (?:l\'|la |les? )?$1 dans',
            ja: '$1の封鎖まであと',
            cn: '距$1被封锁还有',
            ko: '15초 후에 $1[이가] 봉쇄됩니다',
        },
        [syncKeys.unseal]: {
            en: 'is no longer sealed',
            de: 'öffnet sich (?:wieder|erneut)',
            fr: 'Ouverture ',
            ja: 'の封鎖が解かれた',
            cn: '的封锁解除了',
            ko: '의 봉쇄가 해제되었습니다',
        },
        [syncKeys.engage]: {
            en: 'Engage!',
            de: 'Start!',
            fr: 'À l\'attaque',
            ja: '戦闘開始！',
            cn: '战斗开始！',
            ko: '전투 시작!',
        },
    },
    replaceText: {
        '--adds spawn--': {
            de: '--Adds erscheinen--',
            fr: '--Apparition d\'adds--',
            ja: '--雑魚出現--',
            cn: '--小怪出现--',
            ko: '--쫄 소환--',
        },
        '--adds targetable--': {
            de: '--Adds anvisierbar--',
            fr: '--Adds ciblables--',
            ja: '--雑魚ターゲット可能--',
            cn: '--小怪可选中--',
            ko: '--쫄 타겟 가능--',
        },
        '--center--': {
            de: '--Mitte--',
            fr: '--Centre--',
            ja: '--センター--',
            cn: '--中央--',
            ko: '--중앙--',
        },
        '\\(center\\)': {
            de: '(Mitte)',
            fr: '(Centre)',
            ja: '(センター)',
            cn: '(中央)',
            ko: '(중앙)',
        },
        '--clones appear--': {
            de: '--Klone erscheinen--',
            fr: '--Apparition des clones--',
            ja: '--幻影出現--',
            cn: '--幻影出现--',
            ko: '--분신 소환--',
        },
        '--corner--': {
            de: '--Ecke--',
            fr: '--Coin--',
            ja: '--コーナー--',
            cn: '--角落--',
            ko: '--구석--',
        },
        '--dps burn--': {
            de: '--DPS burn--',
            fr: '--Burn dps--',
            ja: '--火力出せ--',
            cn: '--转火--',
            ko: '--딜 체크--',
        },
        '--east--': {
            de: '--Osten--',
            fr: '--Est--',
            ja: '--東--',
            cn: '--东--',
            ko: '--동쪽--',
        },
        '\\(east\\)': {
            de: '(Osten)',
            fr: '(Est)',
            ja: '(東)',
            cn: '(东)',
            ko: '(동쪽)',
        },
        'Enrage': {
            de: 'Finalangriff',
            fr: 'Enrage',
            ja: '時間切れ',
            cn: '狂暴',
            ko: '전멸기',
        },
        '--frozen--': {
            de: '--eingefroren--',
            fr: '--Gelé--',
            ja: '--凍結--',
            cn: '--冻结--',
            ko: '--빙결--',
        },
        '--in--': {
            de: '--Rein--',
            fr: '--Intérieur--',
            ja: '--中--',
            cn: '--内--',
            ko: '--안--',
        },
        '\\(In\\)': {
            de: '(Rein)',
            fr: '(Intérieur)',
            ja: '(中)',
            cn: '(内)',
            ko: '(안)',
        },
        '\\(inner\\)': {
            de: '(innen)',
            fr: '(intérieur)',
            ja: '(中)',
            cn: '(内)',
            ko: '(안)',
        },
        '--jump--': {
            de: '--Sprung--',
            fr: '--Saut--',
            ja: '--ジャンプ--',
            cn: '--跳--',
            ko: '--점프--',
        },
        '--knockback--': {
            de: '--Rückstoß--',
            fr: '--Poussée--',
            ja: '--ノックバック--',
            cn: '--击退--',
            ko: '--넉백--',
        },
        '--middle--': {
            de: '--Mitte--',
            fr: '--Milieu--',
            ja: '--中央--',
            cn: '--中间--',
            ko: '--중앙--',
        },
        '\\(middle\\)': {
            de: '(Mitte)',
            fr: '(Milieu)',
            ja: '(中央)',
            cn: '(中间)',
            ko: '(중앙)',
        },
        '--north--': {
            de: '--Norden--',
            fr: '--Nord--',
            ja: '--北--',
            cn: '--北--',
            ko: '--북쪽--',
        },
        '\\(north\\)': {
            de: '(Norden)',
            fr: '(Nord)',
            ja: '(北)',
            cn: '(北)',
            ko: '(북쪽)',
        },
        '--northeast--': {
            de: '--Nordosten--',
            fr: '--Nord-Est--',
            ja: '--北東--',
            cn: '--东北--',
            ko: '--북동--',
        },
        '--northwest--': {
            de: '--Nordwesten--',
            fr: '--Nord-Ouest--',
            ja: '--北西--',
            cn: '--西北--',
            ko: '--북서--',
        },
        '--out--': {
            de: '--Raus--',
            fr: '--Extérieur--',
            ja: '--外--',
            cn: '--外--',
            ko: '--밖--',
        },
        '\\(Out\\)': {
            de: '(Raus)',
            fr: '(Extérieur)',
            ja: '(外)',
            cn: '(外)',
            ko: '(밖)',
        },
        '\\(outer\\)': {
            de: '(außen)',
            fr: '(extérieur)',
            ja: '(外)',
            cn: '(外)',
            ko: '(밖)',
        },
        '\\(outside\\)': {
            de: '(Draußen)',
            fr: '(À l\'extérieur)',
            ja: '(外)',
            cn: '(外面)',
            ko: '(바깥)',
        },
        '--rotate--': {
            de: '--rotieren--',
            fr: '--rotation--',
            ja: '--回転--',
            cn: '--旋转--',
            ko: '--회전--',
        },
        '--south--': {
            de: '--Süden--',
            fr: '--Sud--',
            ja: '--南--',
            cn: '--南--',
            ko: '--남쪽--',
        },
        '\\(south\\)': {
            de: '(Süden)',
            fr: '(Sud)',
            ja: '(南)',
            cn: '(南)',
            ko: '(남쪽)',
        },
        '--southeast--': {
            de: '--Südosten--',
            fr: '--Sud-Est--',
            ja: '--南東--',
            cn: '--东南--',
            ko: '--남동--',
        },
        '--southwest--': {
            de: '--Südwesten--',
            fr: '--Sud-Ouest--',
            ja: '--南西--',
            cn: '--西南--',
            ko: '--남서--',
        },
        '--split--': {
            de: '--teilen--',
            fr: '--division--',
            ja: '--分裂--',
            cn: '--分裂--',
            ko: '--분열--',
        },
        '--stun--': {
            de: '--Betäubung--',
            fr: '--Étourdissement--',
            ja: '--スタン--',
            cn: '--击晕--',
            ko: '--기절--',
        },
        '--sync--': {
            de: '--synchronisation--',
            fr: '--synchronisation--',
            ja: '--シンク--',
            cn: '--同步化--',
            ko: '--동기화--',
        },
        '--([0-9]+x )?targetable--': {
            de: '--$1anvisierbar--',
            fr: '--$1ciblable--',
            ja: '--$1ターゲット可能--',
            cn: '--$1可选中--',
            ko: '--$1타겟 가능--',
        },
        '--teleport--': {
            de: '--teleportation--',
            fr: '--téléportation--',
            ja: '--テレポート--',
            cn: '--传送--',
            ko: '--순간 이동--',
        },
        '--untargetable--': {
            de: '--nich anvisierbar--',
            fr: '--non ciblable--',
            ja: '--ターゲット不可--',
            cn: '--无法选中--',
            ko: '--타겟 불가능--',
        },
        '--west--': {
            de: '--Westen--',
            fr: '--Ouest--',
            ja: '--西--',
            cn: '--西--',
            ko: '--서쪽--',
        },
        [textKeys.E]: {
            de: 'O',
            fr: 'E',
            ja: '東',
            cn: '东',
            ko: '동',
        },
        [textKeys.N]: {
            de: 'N',
            fr: 'N',
            ja: '北',
            cn: '北',
            ko: '북',
        },
        [textKeys.S]: {
            de: 'S',
            fr: 'S',
            ja: '南',
            cn: '南',
            ko: '남',
        },
        [textKeys.W]: {
            de: 'W',
            fr: 'O',
            ja: '西',
            cn: '西',
            ko: '서',
        },
        [textKeys.NE]: {
            de: 'NO',
            fr: 'NE',
            ja: '北東',
            cn: '东北',
            ko: '북동',
        },
        [textKeys.NW]: {
            de: 'NW',
            fr: 'NO',
            ja: '北西',
            cn: '西北',
            ko: '북서',
        },
        [textKeys.SE]: {
            de: 'SO',
            fr: 'SE',
            ja: '南東',
            cn: '东南',
            ko: '남동',
        },
        [textKeys.SW]: {
            de: 'SW',
            fr: 'SO',
            ja: '南西',
            cn: '西南',
            ko: '남서',
        },
        [textKeys.Tank]: {
            de: 'Tank',
            fr: 'Tank',
            ja: 'タンク',
            cn: '坦克',
            ko: '탱커',
        },
        [textKeys.Healer]: {
            de: 'Heiler',
            fr: 'Healer',
            ja: 'ヒーラー',
            cn: '治疗',
            ko: '힐러',
        },
        [textKeys.DPS]: {
            de: 'DPS',
            fr: 'DPS',
            ja: 'DPS',
            cn: 'DPS',
            ko: '딜러',
        },
        [textKeys.Number]: {
            de: '--$1--',
            fr: '--$1--',
            ja: '--$1--',
            cn: '--$1--',
            ko: '--$1--',
        },
    },
};
// Keys into commonReplacement objects that represent "partial" translations,
// in the sense that even if it applies, there still needs to be another
// translation for it to be complete.  These keys should be exactly the same
// as the keys from the commonReplacement block above.  These are used for
// timeline regexes only.
const common_replacement_partialCommonTimelineReplacementKeys = [
    // Because the zone name needs to be translated here, this is partial.
    syncKeys.seal,
    // Directions
    textKeys.E,
    textKeys.N,
    textKeys.S,
    textKeys.W,
    textKeys.NE,
    textKeys.NW,
    textKeys.SE,
    textKeys.SW,
    // Roles
    textKeys.Tank,
    textKeys.Healer,
    textKeys.DPS,
];
// Same as the timeline version above, but only for trigger regexes.
const common_replacement_partialCommonTriggerReplacementKeys = [
    // Because the zone name needs to be translated here, this is partial.
    syncKeys.seal,
];
//# sourceMappingURL=common_replacement.js.map
// EXTERNAL MODULE: ./node_modules/cactbot/resources/regexes.js
var regexes = __webpack_require__(605);
;// CONCATENATED MODULE: ./node_modules/cactbot/resources/translations.js



// Fill in LocaleRegex so that things like LocaleRegex.countdownStart.de is a valid regex.
const localeLines = {
    countdownStart: {
        en: 'Battle commencing in (?<time>\\y{Float}) seconds! \\((?<player>.*?)\\)',
        de: 'Noch (?<time>\\y{Float}) Sekunden bis Kampfbeginn! \\((?<player>.*?)\\)',
        fr: 'Début du combat dans (?<time>\\y{Float}) secondes[ ]?! \\((?<player>.*?)\\)',
        ja: '戦闘開始まで(?<time>\\y{Float})秒！ （(?<player>.*?)）',
        cn: '距离战斗开始还有(?<time>\\y{Float})秒！ （(?<player>.*?)）',
        ko: '전투 시작 (?<time>\\y{Float})초 전! \\((?<player>.*?)\\)',
    },
    countdownEngage: {
        en: 'Engage!',
        de: 'Start!',
        fr: 'À l\'attaque[ ]?!',
        ja: '戦闘開始！',
        cn: '战斗开始！',
        ko: '전투 시작!',
    },
    countdownCancel: {
        en: 'Countdown canceled by (?<player>\\y{Name})',
        de: '(?<player>\\y{Name}) hat den Countdown abgebrochen',
        fr: 'Le compte à rebours a été interrompu par (?<player>\\y{Name})[ ]?\\.',
        ja: '(?<player>\\y{Name})により、戦闘開始カウントがキャンセルされました。',
        cn: '(?<player>\\y{Name})取消了战斗开始倒计时。',
        ko: '(?<player>\\y{Name}) 님이 초읽기를 취소했습니다\\.',
    },
    areaSeal: {
        en: '(?<area>.*?) will be sealed off in (?<time>\\y{Float}) seconds!',
        de: 'Noch (?<time>\\y{Float}) Sekunden, bis sich (?<area>.*?) schließt',
        fr: 'Fermeture (?<area>.*?) dans (?<time>\\y{Float}) secondes[ ]?\\.',
        ja: '(?<area>.*?)の封鎖まであと(?<time>\\y{Float})秒',
        cn: '距(?<area>.*?)被封锁还有(?<time>\\y{Float})秒',
        ko: '(?<time>\\y{Float})초 후에 (?<area>.*?)(이|가) 봉쇄됩니다\\.',
    },
    areaUnseal: {
        en: '(?<area>.*?) is no longer sealed.',
        de: '(?<area>.*?) öffnet sich erneut.',
        fr: 'Ouverture (?<area>.*?)[ ]?!',
        ja: '(?<area>.*?)の封鎖が解かれた……',
        cn: '(?<area>.*?)的封锁解除了',
        ko: '(?<area>.*?)의 봉쇄가 해제되었습니다\\.',
    },
    // Recipe name always start with \ue0bb
    // HQ icon is \ue03c
    craftingStart: {
        en: 'You begin synthesizing (?<count>(an?|\\d+) )?\ue0bb(?<recipe>.*)\\.',
        de: 'Du hast begonnen, durch Synthese (?<count>(ein(e|es|em|er)?|\\d+) )?\ue0bb(?<recipe>.*) herzustellen\\.',
        fr: 'Vous commencez à fabriquer (?<count>(une?|\\d+) )?\ue0bb(?<recipe>.*)\\.',
        ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)(×(?<count>\\d+))?の製作を開始した。',
        cn: '(?<player>\\y{Name})开始制作“\ue0bb(?<recipe>.*)”(×(?<count>\\d+))?。',
        ko: '\ue0bb(?<recipe>.*)(×(?<count>\\d+)개)? 제작을 시작합니다\\.',
    },
    trialCraftingStart: {
        en: 'You begin trial synthesis of \ue0bb(?<recipe>.*)\\.',
        de: 'Du hast mit der Testsynthese von \ue0bb(?<recipe>.*) begonnen\\.',
        fr: 'Vous commencez une synthèse d\'essai pour une? \ue0bb(?<recipe>.*)\\.',
        ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習を開始した。',
        cn: '(?<player>\\y{Name})开始练习制作\ue0bb(?<recipe>.*)。',
        ko: '\ue0bb(?<recipe>.*) 제작 연습을 시작합니다\\.',
    },
    craftingFinish: {
        en: 'You synthesize (?<count>(an?|\\d+) )?\ue0bb(?<recipe>.*)(\ue03c)?\\.',
        de: 'Du hast erfolgreich (?<count>(ein(e|es|em|er)?|\\d+) )?(?<recipe>.*)(\ue03c)? hergestellt\\.',
        fr: 'Vous fabriquez (?<count>(une?|\\d+) )?\ue0bb(?<recipe>.*)(\ue03c)?\\.',
        ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)(\ue03c)?(×(?<count>\\d+))?を完成させた！',
        cn: '(?<player>\\y{Name})制作“\ue0bb(?<recipe>.*)(\ue03c)?”(×(?<count>\\d+))?成功！',
        ko: '(?<player>\\y{Name}) 님이 \ue0bb(?<recipe>.*)(\ue03c)?(×(?<count>\\d+)개)?(을|를) 완성했습니다!',
    },
    trialCraftingFinish: {
        en: 'Your trial synthesis of \ue0bb(?<recipe>.*) proved a success!',
        de: 'Die Testsynthese von \ue0bb(?<recipe>.*) war erfolgreich!',
        fr: 'Votre synthèse d\'essai pour fabriquer \ue0bb(?<recipe>.*) a été couronnée de succès!',
        ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習に成功した！',
        cn: '(?<player>\\y{Name})练习制作\ue0bb(?<recipe>.*)成功了！',
        ko: '\ue0bb(?<recipe>.*) 제작 연습에 성공했습니다!',
    },
    craftingFail: {
        en: 'Your synthesis fails!',
        de: 'Deine Synthese ist fehlgeschlagen!',
        fr: 'La synthèse échoue\\.{3}',
        ja: '(?<player>\\y{Name})は製作に失敗した……',
        cn: '(?<player>\\y{Name})制作失败了……',
        ko: '제작에 실패했습니다……\\.',
    },
    trialCraftingFail: {
        en: 'Your trial synthesis of \ue0bb(?<recipe>.*) failed\\.{3}',
        de: 'Die Testsynthese von \ue0bb(?<recipe>.*) ist fehlgeschlagen\\.{3}',
        fr: 'Votre synthèse d\'essai pour fabriquer \ue0bb(?<recipe>.*) s\'est soldée par un échec\\.{3}',
        ja: '(?<player>\\y{Name})は\ue0bb(?<recipe>.*)の製作練習に失敗した……',
        cn: '(?<player>\\y{Name})练习制作\ue0bb(?<recipe>.*)失败了……',
        ko: '\ue0bb(?<recipe>.*) 제작 연습에 실패했습니다……\\.',
    },
    craftingCancel: {
        en: 'You cancel the synthesis\\.',
        de: 'Du hast die Synthese abgebrochen\\.',
        fr: 'La synthèse est annulée\\.',
        ja: '(?<player>\\y{Name})は製作を中止した。',
        cn: '(?<player>\\y{Name})中止了制作作业。',
        ko: '제작을 중지했습니다\\.',
    },
    trialCraftingCancel: {
        en: 'You abandoned trial synthesis\\.',
        de: 'Testsynthese abgebrochen\\.',
        fr: 'Vous avez interrompu la synthèse d\'essai\\.',
        ja: '(?<player>\\y{Name})は製作練習を中止した。',
        cn: '(?<player>\\y{Name})停止了练习。',
        ko: '제작 연습을 중지했습니다\\.',
    },
};
class RegexSet {
    regexes;
    netRegexes;
    get localeRegex() {
        if (this.regexes)
            return this.regexes;
        this.regexes = this.buildLocaleRegexes(localeLines, (s) => regexes/* default */.A.gameLog({ line: `${s}.*?` }));
        return this.regexes;
    }
    get localeNetRegex() {
        if (this.netRegexes)
            return this.netRegexes;
        this.netRegexes = this.buildLocaleRegexes(localeLines, (s) => netregexes/* default */.Ay.gameLog({ line: `${s}[^|]*?` }));
        return this.netRegexes;
    }
    buildLocaleRegexes(locales, builder) {
        return Object.fromEntries(Object
            .entries(locales)
            .map(([key, lines]) => [key, this.buildLocaleRegex(lines, builder)]));
    }
    buildLocaleRegex(lines, builder) {
        const regexEn = builder(lines.en);
        return {
            en: regexEn,
            de: lines.de !== undefined ? builder(lines.de) : regexEn,
            fr: lines.fr !== undefined ? builder(lines.fr) : regexEn,
            ja: lines.ja !== undefined ? builder(lines.ja) : regexEn,
            cn: lines.cn !== undefined ? builder(lines.cn) : regexEn,
            ko: lines.ko !== undefined ? builder(lines.ko) : regexEn,
        };
    }
}
const regexSet = new RegexSet();
const LocaleRegex = regexSet.localeRegex;
const LocaleNetRegex = regexSet.localeNetRegex;
// Translate a trigger or timeline regex (replaceSync) or timeline text (replaceText),
// returning the text and whether or not it can be considered "translated".
// Note, this won't catch anything that needs multiple translations, but will catch
// anything from common translations that are partial (e.g. a seal regex needs
// a zone name to be considered a full translation.
const translateWithReplacements = (text, replaceKey, replaceLang, replacements) => {
    // Special cases for empty and "not empty".
    if (text === '' || text === '[^:]+' || text === '[^|]+')
        return { text: text, wasTranslated: true };
    // All regex replacements are always global.
    const isGlobal = replaceKey === 'replaceSync';
    let wasTranslated = false;
    for (const r of replacements ?? []) {
        if (r.locale && r.locale !== replaceLang)
            continue;
        const reps = r[replaceKey];
        if (!reps)
            continue;
        for (const [key, value] of Object.entries(reps)) {
            const regex = isGlobal ? Regexes.parseGlobal(key) : Regexes.parse(key);
            if (text.match(regex))
                wasTranslated = true;
            text = text.replace(regex, value);
        }
    }
    // Common Replacements
    const replacement = commonReplacement[replaceKey];
    for (const [key, value] of Object.entries(replacement ?? {})) {
        const repl = value[replaceLang];
        if (repl === undefined)
            continue;
        const regex = isGlobal ? Regexes.parseGlobal(key) : Regexes.parse(key);
        const partialKeys = replaceKey === 'replaceSync'
            ? partialCommonTriggerReplacementKeys
            : partialCommonTimelineReplacementKeys;
        if (text.match(regex)) {
            // Consider any partial translations as "not found" (e.g. a seal
            // message that still needs the zone name to be translated to be
            // considered fully translated).
            let isPartial = false;
            for (const partialKey of partialKeys) {
                if (Regexes.parseGlobal(partialKey).test(key)) {
                    isPartial = true;
                    break;
                }
            }
            if (!isPartial)
                wasTranslated = true;
        }
        text = text.replace(regex, repl);
    }
    return { text, wasTranslated };
};
// Translates a timeline or trigger regex for a given language.
const translateRegex = (text, replaceLang, replacements) => {
    if (typeof text === 'string')
        return translateWithReplacements(text, 'replaceSync', replaceLang, replacements).text;
    return translateWithReplacements(text.source, 'replaceSync', replaceLang, replacements).text;
};
// Translates a timeline text for a given language.
const translateText = (text, replaceLang, replacements) => translateWithReplacements(text, 'replaceText', replaceLang, replacements).text;
const translateRegexBuildParam = (params, replaceLang, replacements) => {
    return translateRegexBuildParamAnon(params, replaceLang, replacements);
};
const translateRegexBuildParamAnon = (anonParams, replaceLang, replacements) => {
    let missingFields = undefined;
    let wasTranslated = true;
    // TODO: it's probably ok that this isn't a deep copy because we don't
    // modify string[] directly, but it probably should be anyway.
    const params = { ...anonParams };
    for (const key of keysThatRequireTranslation) {
        const value = anonParams[key];
        if (typeof value === 'boolean' || value === undefined)
            continue;
        // TODO: ideally, it'd be nice to assign directly back to params[key] instead of
        // cheating and assigning back through anonParams.  The reason this is mostly
        // ok is that if params[key] is a string it only gets assigned a string,
        // and if it is a string[] it only gets assigned a string[], so the type can't
        // change.  It might be possible to assign to params[key] if we make
        // timestamp a string | string[]?
        if (typeof value === 'string') {
            const result = translateWithReplacements(value, 'replaceSync', replaceLang, replacements);
            params[key] = result.text;
            wasTranslated = wasTranslated && result.wasTranslated;
            if (!result.wasTranslated)
                (missingFields ??= []).push(key);
        }
        else {
            params[key] = value.map((x) => {
                if (typeof x !== 'string')
                    return x;
                const result = translateWithReplacements(x, 'replaceSync', replaceLang, replacements);
                wasTranslated = wasTranslated && result.wasTranslated;
                if (!result.wasTranslated)
                    (missingFields ??= []).push(key);
                return result.text;
            });
        }
    }
    return { params, wasTranslated, missingFields };
};
//# sourceMappingURL=translations.js.map
// EXTERNAL MODULE: ./node_modules/cactbot/resources/util.js
var util = __webpack_require__(268);
// EXTERNAL MODULE: ./node_modules/cactbot/resources/content_type.js
var content_type = __webpack_require__(946);
;// CONCATENATED MODULE: ./src/constants.ts

const constants_kMeleeWithMpJobs = (/* unused pure expression or super */ null && (['PLD', 'DRK']));
const kMPNormalRate = 0.06;
const kMPCombatRate = 0.02;
const kMPUI1Rate = 0.30;
const kMPUI2Rate = 0.45;
const kMPUI3Rate = 0.60;
const kMPTickInterval = 3.0;
const kComboDelay = 30;
const kComboDelay5x = 15;
const kWellFedContentTypes = [content_type/* default */.A.Dungeons, content_type/* default */.A.Trials, content_type/* default */.A.Raids, content_type/* default */.A.UltimateRaids];
const kAbility = {
  // LB
  ShieldWall: 'C5',
  // T LB1
  Stronghold: 'C6',
  // T LB2
  LastBastion: 'C7',
  // PLD LB3
  LandWaker: '1090',
  // WAR LB3
  DarkForce: '1091',
  // DRK LB3
  GunmetalSoul: '42D1',
  // GNB LB3
  HealingWind: 'CE',
  // H LB1
  BreathoftheEarth: 'CF',
  // H LB2
  PulseofLife: 'D0',
  // WHM LB3
  AngelFeathers: '1097',
  // SCH LB3
  AstralStasis: '1098',
  // AST LB3
  Braver: 'C8',
  // meleeDPS LB1
  Bladedance: 'C9',
  // meleeDPS LB2
  FinalHeaven: 'CA',
  // MNK LB3
  Chimatsuri: '1093',
  // NIN LB3
  DragonsongDive: '1092',
  // DRG LB3
  DoomoftheLiving: '1EB5',
  // SAM LB3
  BigShot: '108E',
  // rangeDPS LB1
  Desperado: '108F',
  // rangeDPS LB2
  SagittariusArrow: '1094',
  // BRD LB3
  SatelliteBeam: '1095',
  // MCH LB3
  CrimsonLotus: '42D2',
  // DNC LB3
  Skyshard: 'CB',
  // magicDPS LB1
  Starstorm: 'CC',
  // magicDPS LB2
  Meteor: 'CD',
  // BLM LB3
  Teraflare: '1096',
  // SMN LB3
  VermilionScourge: '1EB6',
  // RDM LB3
  // PLD
  FastBlade: '09',
  RiotBlade: '0F',
  GoringBlade: 'DD2',
  RoyalAuthority: 'DD3',
  RageOfHalone: '15',
  TotalEclipse: '1CD5',
  Prominence: '4049',
  ShieldLob: '18',
  ShieldBash: '10',
  Requiescat: '1CD7',
  Imperator: '9039',
  HolySpirit: '1CD8',
  HolyCircle: '404A',
  Confiteor: '404B',
  Clemency: 'DD5',
  FightOrFlight: '14',
  SpiritsWithin: '1D',
  Expiacion: '6493',
  BladeofFaith: '6494',
  BladeofTruth: '6495',
  BladeOfValor: '6496',
  Atonement: '404C',
  CircleOfScorn: '17',
  // WAR
  HeavySwing: '1F',
  Maim: '25',
  StormsEye: '2D',
  StormsPath: '2A',
  Overpower: '29',
  MythrilTempest: '404E',
  Tomahawk: '2E',
  Berserk: '26',
  InnerRelease: '1CDD',
  Upheaval: '1CDB',
  Orogeny: '6498',
  // DRK
  HardSlash: 'E21',
  SyphonStrike: 'E27',
  Souleater: 'E30',
  Unleash: 'E25',
  StalwartSoul: '4054',
  Unmend: 'E28',
  CarveAndSpit: 'E3B',
  Plunge: 'E38',
  AbyssalDrain: 'E39',
  TheBlackestNight: '1CE1',
  BloodWeapon: 'E29',
  Delirium: '1CDE',
  LivingShadow: '4058',
  SaltedEarth: 'E37',
  // GNB
  KeenEdge: '3F09',
  BrutalShell: '3F0B',
  SolidBarrel: '3F11',
  GnashingFang: '3F12',
  SavageClaw: '3F13',
  WickedTalon: '3F16',
  DemonSlice: '3F0D',
  DemonSlaughter: '3F15',
  LightningShot: '3F0F',
  Bloodfest: '3F24',
  NoMercy: '3F0A',
  ReignOfBeasts: '9049',
  NobleBlood: '904A',
  LionHeart: '904B',
  // WHM
  Aero: '79',
  Aero2: '84',
  Dia: '4094',
  Assize: 'DF3',
  PresenceOfMind: '88',
  // SCH
  Bio: '45C8',
  Bio2: '45C9',
  Biolysis: '409C',
  Adloquium: 'B9',
  ChainStratagem: '1D0C',
  Aetherflow: 'A6',
  // AST
  Combust: 'E0F',
  Combust2: 'E18',
  Combust3: '40AA',
  AspectedBenefic: 'E0B',
  AspectedHelios: 'E11',
  Draw: 'E06',
  MinorArcana: '1D13',
  Divination: '40A8',
  AstralDraw: '9099',
  UmbralDraw: '909A',
  // SGE
  Rhizomata: '5EF5',
  Phlegma: '5EE1',
  Phlegma2: '5EF3',
  Phlegma3: '5EF9',
  // MNK
  DragonKick: '4A',
  TwinSnakes: '3D',
  Demolish: '42',
  Bootshine: '35',
  FourPointFury: '4059',
  Brotherhood: '1CE4',
  PerfectBalance: '45',
  RiddleOfFire: '1CE3',
  RiddleOfWind: '64A6',
  // DRG
  TrueThrust: '4B',
  RaidenThrust: '405F',
  VorpalThrust: '4E',
  FullThrust: '54',
  Disembowel: '57',
  ChaosThrust: '58',
  FangAndClaw: 'DE2',
  WheelingThrust: 'DE4',
  DoomSpike: '56',
  SonicThrust: '1CE5',
  CoerthanTorment: '405D',
  PiercingTalon: '5A',
  HighJump: '405E',
  Jump: '5C',
  LanceCharge: '55',
  DragonSight: '1CE6',
  BattleLitany: 'DE5',
  DraconianFury: '64AA',
  Drakesbane: '9058',
  ChaoticSpring: '64AC',
  HeavensThrust: '64AB',
  SpiralBlow: '905B',
  LanceBarrage: '905A',
  Geirskogul: 'DE3',
  // NIN
  SpinningEdge: '8C0',
  GustSlash: '8C2',
  AeolianEdge: '8CF',
  ArmorCrush: 'DEB',
  DeathBlossom: '8CE',
  HakkeMujinsatsu: '4068',
  ThrowingDagger: '8C7',
  TrickAttack: '8D2',
  RabbitMedium: '8E0',
  Bunshin: '406D',
  Hide: '8C5',
  Mug: '8C8',
  Dokumori: '905D',
  KunaisBane: '905E',
  // SAM
  Hakaze: '1D35',
  Jinpu: '1D36',
  Shifu: '1D37',
  Gekko: '1D39',
  Kasha: '1D3A',
  Yukikaze: '1D38',
  Fuga: '1D3B',
  Mangetsu: '1D3C',
  Oka: '1D3D',
  Enpi: '1D3E',
  MeikyoShisui: '1D4B',
  KaeshiHiganbana: '4064',
  KaeshiGoken: '4065',
  KaeshiSetsugekka: '4066',
  HissatsuGuren: '1D48',
  HissatsuSenei: '4061',
  Fuko: '64B4',
  Gyofu: '9063',
  Ikishoten: '4062',
  // RPR
  Slice: '5F35',
  WaxingSlice: '5F36',
  InfernalSlice: '5F37',
  SpinningScythe: '5F38',
  NightmareScythe: '5F39',
  Gluttony: '5F49',
  SoulSlice: '5F3C',
  SoulScythe: '5F3D',
  ArcaneCircle: '5F55',
  // VPR
  SteelFangs: '872E',
  DreadFangs: '872F',
  HuntersSting: '8730',
  SwiftskinsSting: '8731',
  FlankstingStrike: '8732',
  FlanksbaneFang: '8733',
  HindstingStrike: '8734',
  HindsbaneFang: '8735',
  SteelMaw: '8736',
  DreadMaw: '8737',
  HuntersBite: '8738',
  SwiftskinsBite: '8739',
  JaggedMaw: '873A',
  BloodiedMaw: '873B',
  Vicewinder: '873C',
  Vicepit: '873F',
  // BRD
  BattleVoice: '76',
  MagesBallad: '72',
  ArmysPaeon: '74',
  theWanderersMinuet: 'DE7',
  EmpyrealArrow: 'DE6',
  RadiantFinale: '64B9',
  // MCH
  SplitShot: 'B32',
  SlugShot: 'B34',
  CleanShot: 'B39',
  HeatedSplitShot: '1CF3',
  HeatedSlugShot: '1CF4',
  HeatedCleanShot: '1CF5',
  SpreadShot: 'B36',
  Drill: '4072',
  Bioblaster: '4073',
  HotShot: 'B38',
  AirAnchor: '4074',
  WildFire: 'B3E',
  HeatBlast: '1CF2',
  AutoCrossbow: '4071',
  ChainSaw: '64BC',
  Scattergun: '64BA',
  // DNC
  Cascade: '3E75',
  Fountain: '3E76',
  Windmill: '3E79',
  Bladeshower: '3E7A',
  QuadrupleTechnicalFinish: '3F44',
  TripleTechnicalFinish: '3F43',
  DoubleTechnicalFinish: '3F42',
  SingleTechnicalFinish: '3F41',
  TechnicalFinish: '3E84',
  StandardStep: '3E7D',
  TechnicalStep: '3E7E',
  Flourish: '3E8D',
  FinishingMove: '9078',
  // BLM
  Thunder1: '90',
  Thunder2: '1D17',
  Thunder3: '99',
  Thunder4: '1CFC',
  Manafont: '9E',
  HighThunder1: '907A',
  HighThunder2: '907B',
  // SMN
  EnergyDrain: '407C',
  EnergySiphon: '407E',
  SearingLight60: '64F2',
  SearingLight: '64F2',
  // 64C9
  Aethercharge: '64C8',
  DreadwyrmTrance: 'DFD',
  SummonBahamut: '1D03',
  SummonPhoenix: '64E7',
  SummonSolarBahamut: '9080',
  // RDM
  Verstone: '1D57',
  Verfire: '1D56',
  Veraero: '1D53',
  Verthunder: '1D51',
  Verholy: '1D66',
  Verflare: '1D65',
  Jolt2: '1D64',
  Jolt: '1D4F',
  Impact: '1D62',
  Scatter: '1D55',
  Verthunder2: '408C',
  Veraero2: '408D',
  Vercure: '1D5A',
  Verraise: '1D63',
  Riposte: '1D50',
  Zwerchhau: '1D58',
  Redoublement: '1D5C',
  Moulinet: '1D59',
  Reprise: '4091',
  EnchantedRiposte: '1D67',
  EnchantedZwerchhau: '1D68',
  EnchantedRedoublement: '1D69',
  EnchantedMoulinet: '1D6A',
  EnchantedReprise: '4090',
  Embolden: '1D60',
  Manafication: '1D61',
  Fleche: '1D5D',
  ContreSixte: '1D5F',
  // PCT
  PomMuse: '876E',
  WingedMuse: '876F',
  ClawedMuse: '8770',
  FangedMuse: '8771',
  StrikingMuse: '8772',
  StarryMuse: '8773',
  // BLU
  SongOfTorment: '2C7A',
  OffGuard: '2C93',
  PeculiarLight: '2C9D',
  AetherialSpark: '5AF1',
  Nightbloom: '5AFA',
  // Role Action
  LucidDreaming: '1D8A'
};

// Combo actions for every jobs, this would apply to ComboTracker when
// it is initialized, for determining whether the current action is in combo.
// For upgradable skill actions, use array to represent the combo action chain.
// (Can also be used on only last skill different combo)
// For example, PLD's Fast Blade -> Riot Blade -> Royal Authority / Rage of Halone
// combo chain would be represented as
// ['Fast Blade', 'Riot Blade', ['Royal Authority', 'Rage of Halone']].
const kComboActions = [
// PLD
[kAbility.FastBlade, kAbility.RiotBlade, [kAbility.RoyalAuthority, kAbility.RageOfHalone]], [kAbility.TotalEclipse, kAbility.Prominence],
// WAR
[kAbility.HeavySwing, kAbility.Maim, [kAbility.StormsEye, kAbility.StormsPath]], [kAbility.Overpower, kAbility.MythrilTempest],
// DRK
[kAbility.HardSlash, kAbility.SyphonStrike, kAbility.Souleater], [kAbility.Unleash, kAbility.StalwartSoul],
// GNB
[kAbility.KeenEdge, kAbility.BrutalShell, kAbility.SolidBarrel], [kAbility.DemonSlice, kAbility.DemonSlaughter],
// DRG
[[kAbility.TrueThrust, kAbility.RaidenThrust], [kAbility.Disembowel, kAbility.SpiralBlow], [kAbility.ChaosThrust, kAbility.ChaoticSpring], kAbility.WheelingThrust, kAbility.Drakesbane], [[kAbility.TrueThrust, kAbility.RaidenThrust], [kAbility.VorpalThrust, kAbility.LanceBarrage], [kAbility.FullThrust, kAbility.HeavensThrust], kAbility.FangAndClaw, kAbility.Drakesbane], [[kAbility.DoomSpike, kAbility.DraconianFury], kAbility.SonicThrust, kAbility.CoerthanTorment],
// NIN
[kAbility.SpinningEdge, kAbility.GustSlash, [kAbility.AeolianEdge, kAbility.ArmorCrush]], [kAbility.DeathBlossom, kAbility.HakkeMujinsatsu],
// SAM
[[kAbility.Hakaze, kAbility.Gyofu], kAbility.Jinpu, kAbility.Gekko], [[kAbility.Hakaze, kAbility.Gyofu], kAbility.Shifu, kAbility.Kasha], [[kAbility.Hakaze, kAbility.Gyofu], kAbility.Yukikaze], [[kAbility.Fuga, kAbility.Fuko], [kAbility.Mangetsu, kAbility.Oka]],
// RPR
[kAbility.Slice, kAbility.WaxingSlice, kAbility.InfernalSlice], [kAbility.SpinningScythe, kAbility.NightmareScythe],
// MCH
[[kAbility.SplitShot, kAbility.HeatedSplitShot], [kAbility.SlugShot, kAbility.HeatedSlugShot], [kAbility.CleanShot, kAbility.HeatedCleanShot]],
// DNC
[kAbility.Cascade, kAbility.Fountain], [kAbility.Windmill, kAbility.Bladeshower]];

// Full skill names of abilities that break combos.
// TODO: it's sad to have to duplicate combo abilities here to catch out-of-order usage.
const kComboBreakers = [
// PLD
kAbility.FastBlade, kAbility.RiotBlade, kAbility.RageOfHalone, kAbility.RoyalAuthority, kAbility.TotalEclipse, kAbility.Prominence, kAbility.ShieldBash,
// WAR
kAbility.HeavySwing, kAbility.Maim, kAbility.StormsEye, kAbility.StormsPath, kAbility.Overpower, kAbility.MythrilTempest,
// DRK
kAbility.HardSlash, kAbility.SyphonStrike, kAbility.Souleater, kAbility.Unleash, kAbility.StalwartSoul,
// GNB
kAbility.KeenEdge, kAbility.BrutalShell, kAbility.SolidBarrel, kAbility.DemonSlice, kAbility.DemonSlaughter,
// DRG
kAbility.TrueThrust, kAbility.RaidenThrust, kAbility.VorpalThrust, kAbility.LanceBarrage, kAbility.FullThrust, kAbility.HeavensThrust, kAbility.Disembowel, kAbility.SpiralBlow, kAbility.ChaosThrust, kAbility.ChaoticSpring, kAbility.WheelingThrust, kAbility.FangAndClaw, kAbility.Drakesbane, kAbility.DoomSpike, kAbility.DraconianFury, kAbility.SonicThrust, kAbility.CoerthanTorment,
// NIN
kAbility.SpinningEdge, kAbility.GustSlash, kAbility.AeolianEdge, kAbility.ArmorCrush, kAbility.DeathBlossom, kAbility.HakkeMujinsatsu,
// SAM
kAbility.Hakaze, kAbility.Gyofu, kAbility.Jinpu, kAbility.Gekko, kAbility.Shifu, kAbility.Kasha, kAbility.Yukikaze, kAbility.Fuga, kAbility.Mangetsu, kAbility.Oka, kAbility.MeikyoShisui, kAbility.Fuko,
// RPR
kAbility.Slice, kAbility.WaxingSlice, kAbility.InfernalSlice, kAbility.SpinningScythe, kAbility.NightmareScythe,
// MCH
kAbility.SplitShot, kAbility.SlugShot, kAbility.CleanShot, kAbility.HeatedSplitShot, kAbility.HeatedSlugShot, kAbility.HeatedCleanShot, kAbility.SpreadShot, kAbility.Scattergun,
// DNC
kAbility.Cascade, kAbility.Fountain, kAbility.Windmill, kAbility.Bladeshower];
const kComboBreakers630 = [...kComboBreakers];
const kComboBreakers620 = [...kComboBreakers630];

// (level = index) [Sub, Div]
// Reference: https://www.akhmorning.com/allagan-studies/modifiers/levelmods/
const kLevelMod = [[0, 0], [56, 56], [57, 57], [60, 60], [62, 62], [65, 65], [68, 68], [70, 70], [73, 73], [76, 76], [78, 78], [82, 82], [85, 85], [89, 89], [93, 93], [96, 96], [100, 100], [104, 104], [109, 109], [113, 113], [116, 116], [122, 122], [127, 127], [133, 133], [138, 138], [144, 144], [150, 150], [155, 155], [162, 162], [168, 168], [173, 173], [181, 181], [188, 188], [194, 194], [202, 202], [209, 209], [215, 215], [223, 223], [229, 229], [236, 236], [244, 244], [253, 253], [263, 263], [272, 272], [283, 283], [292, 292], [302, 302], [311, 311], [322, 322], [331, 331], [341, 341],
// lv50
[342, 366], [344, 392], [345, 418], [346, 444], [347, 470], [349, 496], [350, 522], [351, 548], [352, 574], [354, 600],
// lv60
[355, 630], [356, 660], [357, 690], [358, 720], [359, 750], [360, 780], [361, 810], [362, 840], [363, 870], [364, 900],
// lv70
[365, 940], [366, 980], [367, 1020], [368, 1060], [370, 1100], [372, 1140], [374, 1180], [376, 1220], [378, 1260], [380, 1300],
// lv80
[382, 1360], [384, 1420], [386, 1480], [388, 1540], [390, 1600], [392, 1660], [394, 1720], [396, 1780], [398, 1840], [400, 1900],
// lv90
[402, 1988], [404, 2076], [406, 2164], [408, 2252], [410, 2340], [412, 2428], [414, 2516], [416, 2604], [418, 2692], [420, 2780] // lv100
];
;// CONCATENATED MODULE: ./src/utils.ts








const getLocaleRegex = (locale, regexes) => regexes[locale] ?? regexes['en'];
class RegexesHolder {
  constructor(lang, playerName) {
    this.StatsRegex = netregexes/* default */.Ay.statChange();
    this.YouGainEffectRegex = netregexes/* default */.Ay.gainsEffect({
      target: playerName
    });
    this.YouLoseEffectRegex = netregexes/* default */.Ay.losesEffect({
      target: playerName
    });
    this.YouUseAbilityRegex = netregexes/* default */.Ay.ability({
      source: playerName
    });
    this.AnybodyAbilityRegex = netregexes/* default */.Ay.ability();
    this.MobGainsEffectRegex = netregexes/* default */.Ay.gainsEffect({
      targetId: '4.{7}'
    });
    this.MobLosesEffectRegex = netregexes/* default */.Ay.losesEffect({
      targetId: '4.{7}'
    });
    this.MobGainsEffectFromYouRegex = netregexes/* default */.Ay.gainsEffect({
      targetId: '4.{7}',
      source: playerName
    });
    this.MobLosesEffectFromYouRegex = netregexes/* default */.Ay.losesEffect({
      targetId: '4.{7}',
      source: playerName
    });
    // use of GP Potion
    this.cordialRegex = /20(017FD|F5A3D|F844F|0420F|0317D)/;
    const getCurrentRegex = getLocaleRegex.bind(this, lang);
    this.countdownStartRegex = getCurrentRegex(LocaleNetRegex.countdownStart);
    this.countdownCancelRegex = getCurrentRegex(LocaleNetRegex.countdownCancel);
    this.craftingStartRegexes = [LocaleNetRegex.craftingStart, LocaleNetRegex.trialCraftingStart].map(getCurrentRegex);
    this.craftingFinishRegexes = [LocaleNetRegex.craftingFinish, LocaleNetRegex.trialCraftingFinish].map(getCurrentRegex);
    this.craftingStopRegexes = [LocaleNetRegex.craftingFail, LocaleNetRegex.craftingCancel, LocaleNetRegex.trialCraftingFail, LocaleNetRegex.trialCraftingCancel].map(getCurrentRegex);
  }
}
const isPhysicalJob = job => util/* default */.A.isTankJob(job) || util/* default */.A.isMeleeDpsJob(job) || util/* default */.A.isRangedDpsJob(job);
const doesJobNeedMPBar = job => Util.isCasterDpsJob(job) || Util.isHealerJob(job) || kMeleeWithMpJobs.includes(job);

/** compute greased lightning stacks by player's level */
const getLightningStacksByLevel = level => level < 20 ? 1 : level < 40 ? 2 : level < 76 ? 3 : 4;
// Source: http://theoryjerks.akhmorning.com/guide/speed/
const calcGCDFromStat = (player, stat, ffxivVersion, actionDelay = 2500) => {
  let type1Buffs = 0;
  let type2Buffs = 0;
  if (player.job === 'BLM') {
    type1Buffs += player.speedBuffs.circleOfPower ? 15 : 0;
  } else if (player.job === 'WHM') {
    type1Buffs += player.speedBuffs.presenceOfMind ? 20 : 0;
  } else if (player.job === 'SAM') {
    if (player.speedBuffs.fuka) {
      if (player.level > 77) type1Buffs += 13;else type1Buffs += 10;
    }
  } else if (player.job === 'VPR') {
    // FIXME: not sure whether it is type1
    type1Buffs += player.speedBuffs.swiftscaled ? 15 : 0;
  }
  if (player.job === 'NIN') {
    if (ffxivVersion < 700) type2Buffs += player.speedBuffs.huton ? 15 : 0;else type2Buffs += player.level >= 45 ? 15 : 0;
  } else if (player.job === 'MNK') {
    type2Buffs += 5 * getLightningStacksByLevel(player.level);
  } else if (player.job === 'BRD') {
    type2Buffs += 4 * player.speedBuffs.paeonStacks;
    switch (player.speedBuffs.museStacks) {
      case 1:
        type2Buffs += 1;
        break;
      case 2:
        type2Buffs += 2;
        break;
      case 3:
        type2Buffs += 4;
        break;
      case 4:
        type2Buffs += 12;
        break;
    }
  }
  // TODO: this probably isn't useful to track
  const astralUmbralMod = 100;

  // If stats haven't been updated, use a reasonable default value.
  let gcdMs = actionDelay;
  if (stat !== 0 && player.level > 0) {
    const mod = kLevelMod[player.level];
    if (!mod) throw new not_reached/* UnreachableCode */.O();
    gcdMs = Math.floor(1000 - Math.floor(130 * (stat - mod[0]) / mod[1])) * actionDelay / 1000;
  }
  const a = (100 - type1Buffs) / 100;
  const b = (100 - type2Buffs) / 100;
  const gcdC = Math.floor(Math.floor(a * b * gcdMs / 10) * astralUmbralMod / 100);
  return gcdC / 100;
};
const computeBackgroundColorFrom = (element, classList) => {
  const div = document.createElement('div');
  classList.split('.').forEach(item => {
    div.classList.add(item);
  });
  element.appendChild(div);
  const color = window.getComputedStyle(div).backgroundColor;
  element.removeChild(div);
  return color;
};
const findCountBuff = (dom, tname) => {
  let tgs = dom.rootElement.getElementsByClassName('buffs');
  for (let i = 0; i < tgs.length; i++) {
    // @ts-ignore
    if (tgs[i].getAttribute('buffs-name') == tname) {
      return tgs[i];
    }
  }
  return null;
};
const updateCountBuff = (dom, physical, magic) => {
  if (!dom) {
    return;
  }
  if (physical) {
    dom.setAttribute('buffs-incr-physical', physical.toString()); // 作用物理
  }
  if (magic) {
    dom.setAttribute('buffs-incr-magic', magic.toString()); // 作用魔法
  }
};

// 计算buff, 展示剩余多少时间刷buff是值得
const buffsCalculation = dom => {
  let tgs = dom.rootElement.getElementsByClassName('buffs');
  let toip = 0; // 自己的物理增伤 (换算成攻击) (1 + a)(1 + b) = 1 + a + b + ab
  let toim = 0; // 自己的魔法增伤 (换算成攻击)
  let tbip = 0; // 对boss的物理增伤
  let tbim = 0; // 对boss的魔法增伤

  for (let i = 0; i < tgs.length; i++) {
    // @ts-ignore
    let bio = tgs[i].getAttribute('buffs-target'); // 作用自己
    // @ts-ignore
    let bipStr = tgs[i].getAttribute('buffs-incr-physical'); // 作用物理
    // @ts-ignore
    let bimStr = tgs[i].getAttribute('buffs-incr-magic'); // 作用魔法

    if (bio === undefined || bipStr === undefined || bimStr === undefined) {
      continue;
    }
    let bip = Number(bipStr);
    let bim = Number(bimStr);
    if (bio === 'you') {
      // 作用自己, 乘法公式
      if (bip > 0) {
        if (toip <= 0) {
          toip = bip;
        } else {
          toip = toip + bip + toip * bip / 100;
        }
      }
      if (bim > 0) {
        if (toim <= 0) {
          toim = bim;
        } else {
          toim = toim + bim + toim * bim / 100;
        }
      }
    } else {
      // 对boss增伤
      if (bip > 0) {
        tbip += bip;
      }
      if (bim > 0) {
        tbim += bim;
      }
    }
  }
  let showip = Math.floor((toip + tbip) * 10) / 10;
  let showim = Math.floor((toim + tbim) * 10) / 10;
  let statp = document.getElementById('damage-up-physical');
  if (statp != null) {
    statp.setAttribute('value', showip.toString());
    if (showip <= 0) {
      statp.innerText = '';
    } else {
      statp.innerText = '物: ' + showip + '%';
    }
  }
  let statm = document.getElementById('damage-up-magic');
  if (statm != null) {
    statm.setAttribute('value', showim.toString());
    if (showim <= 0) {
      statm.innerText = '';
    } else {
      statm.innerText = '魔: ' + showim + '%';
    }
  }

  // 诗人计算秒数
  // if (job === 'BRD' && options.TextBrdSec === true) {
  //   let statSec = document.getElementById('jobs-stat-buff-sec');
  //   if (Number(showip) > 0) {
  //     statSec.innerText = Math.floor((30 * 900 * (Number(showip) / 100)) / ((1 + (Number(showip) / 100)) * (240 - 100))) + 's';
  //   } else {
  //     statSec.innerText = '';
  //   }
  // }
};
const makeAuraDotTimerIcon = (name, seconds, opacity, iconWidth, iconHeight, iconText, barHeight, textHeight, textColor, borderSize, borderColor, barColor, auraIcon, info) => {
  const div = document.createElement('div');
  div.style.opacity = opacity.toString();
  div.className = 'dots';
  const icon = TimerIcon.create({
    width: iconWidth.toString(),
    height: iconHeight.toString(),
    bordersize: borderSize.toString(),
    textcolor: textColor
  });
  div.appendChild(icon);
  const barDiv = document.createElement('div');
  barDiv.style.position = 'relative';
  barDiv.style.top = iconHeight.toString();
  div.appendChild(barDiv);
  if (seconds >= 0) {
    const bar = TimerBar.create();
    bar.width = iconWidth.toString();
    bar.height = barHeight.toString();
    bar.fg = barColor;
    bar.duration = seconds;
    barDiv.appendChild(bar);
  }

  // 根据物理计算还是魔法计算
  if (info.attackType === 'physical') {
    const statp = document.getElementById('damage-up-physical');
    if (statp != null) {
      const v = statp?.getAttribute('value');
      if (v !== undefined && Number(v) > 0) {
        icon.text = v;
      }
    }
  }
  if (info.attackType === 'magic') {
    const statm = document.getElementById('damage-up-magic');
    if (statm != null) {
      const v = statm?.getAttribute('value');
      if (v !== undefined && Number(v) > 0) {
        icon.text = v;
      }
    }
  }
  icon.bordercolor = borderColor;
  icon.icon = auraIcon;
  return div;
};
const makeAuraTimerIcon = (name, seconds, opacity, iconWidth, iconHeight, iconText, barHeight, textHeight, textColor, borderSize, borderColor, barColor, barWidth, auraIcon, info) => {
  const div = document.createElement('div');
  div.style.opacity = opacity.toString();
  div.className = 'buffs';
  // 设置buff详细信息
  div.setAttribute('buffs-name', name);
  let target = info.target != null ? info.target : 'you';
  let physical = info.physicalUp != null ? info.physicalUp : 0;
  let magic = info.magicUp != null ? info.magicUp : 0;
  div.setAttribute('buffs-target', target); // 作用自己
  div.setAttribute('buffs-incr-physical', physical.toString()); // 作用物理
  div.setAttribute('buffs-incr-magic', magic.toString()); // 作用魔法

  const icon = TimerIcon.create({
    width: iconWidth.toString(),
    height: iconHeight.toString(),
    bordersize: borderSize.toString(),
    textcolor: textColor
  });
  div.appendChild(icon);
  const barDiv = document.createElement('div');
  barDiv.style.position = 'absolute'; //绝对位置
  barDiv.style.left = iconWidth.toString(); // 图标位置
  barDiv.style.fontSize = '50%'; // 字体大小
  div.appendChild(barDiv);
  if (seconds >= 0) {
    const bar = TimerBar.create();
    bar.width = barWidth.toString(); // 动态长度
    bar.height = barHeight.toString();
    bar.fg = barColor;
    bar.duration = seconds;
    bar.lefttext = 'remain';
    barDiv.appendChild(bar);
  }
  if (textHeight > 0) {
    const text = document.createElement('div');
    text.classList.add('text');
    text.style.width = iconWidth.toString();
    text.style.height = textHeight.toString();
    text.style.overflow = 'hidden';
    text.style.fontSize = (textHeight - 1).toString();
    text.style.whiteSpace = 'pre';
    text.style.position = 'relative';
    text.style.top = iconHeight.toString();
    text.style.fontFamily = 'arial';
    text.style.fontWeight = 'bold';
    text.style.color = textColor;
    text.style.textShadow = '-1px 0 3px black, 0 1px 3px black, 1px 0 3px black, 0 -1px 3px black';
    text.style.paddingBottom = (textHeight / 4).toString();
    text.innerText = name;
    div.appendChild(text);
  }
  if (iconText) icon.text = iconText;
  icon.bordercolor = borderColor;
  icon.icon = auraIcon;
  // icon.duration = seconds;

  return div;
};
const normalizeLogLine = (line, fields) => {
  return new Proxy({}, {
    get(_target, property) {
      if (typeof property === 'string' && property in fields) {
        const looseFields = fields;
        const fieldKey = looseFields[property];
        if (fieldKey) return line[fieldKey];
      }
    }
  });
};
const isPvPZone = zoneId => {
  return false;
  // const zoneInfo = ZoneInfo[zoneId];
  // if (!zoneInfo)
  //   return false;
  // if (zoneInfo.contentType === ContentType.Pvp || zoneId === ZoneId.WolvesDenPier)
  //   return true;
  // return false;
};
const getQueryVariable = variable => {
  const query = window.location.search.substring(1);
  for (const v of query.split("&")) {
    const pair = v.split("=");
    if (pair[0] == variable) {
      return pair[1] ? pair[1] : '';
    }
  }
  return '';
};
const configNameSpace = "buffsConfig";
const loadConfig = () => {
  const c = localStorage.getItem(configNameSpace);
  if (c) return JSON.parse(c);
  return defaultUserConfig;
};
const setConfig = obj => {
  localStorage.setItem(configNameSpace, JSON.stringify(obj));
};
const showDuration = o => {
  o.timerbox.duration = o.duration;
  o.timerbox.threshold = o.duration;
  o.timerbox.fg = computeBackgroundColorFrom(o.timerbox, o.activecolor);
  o.tid = window.setTimeout(() => {
    o.timerbox.duration = o.cooldown - o.duration;
    o.timerbox.threshold = o.threshold;
    o.timerbox.fg = computeBackgroundColorFrom(o.timerbox, o.deactivecolor);
  }, o.duration * 1000);
  return o.tid;
};
;// CONCATENATED MODULE: ./src/event_emitter.ts





class JobsEventEmitter extends (eventemitter3_default()) {
  constructor() {
    super();
  }
  registerOverlayListeners() {
    (0,overlay_plugin_api/* addOverlayListener */.M9)('onPlayerChangedEvent', ev => {
      this.emit('player', ev);
    });

    // addOverlayListener('EnmityTargetData', (ev) => {
    //   this.processEnmityTargetData(ev);
    // });

    // addOverlayListener('onPartyWipe', () => {
    //   this.emit('battle/wipe');
    // });

    // addOverlayListener('onInCombatChangedEvent', (ev) => {
    //   this.emit('battle/in-combat', {
    //     game: ev.detail.inGameCombat,
    //     act: ev.detail.inACTCombat,
    //   });
    // });

    (0,overlay_plugin_api/* addOverlayListener */.M9)('ChangeZone', ev => {
      this.emit('zone/change', ev.zoneID, ev.zoneName, zone_info/* default */.A[ev.zoneID]);
    });
    (0,overlay_plugin_api/* addOverlayListener */.M9)('LogLine', ev => {
      this.processLogLine(ev);
    });
    (0,overlay_plugin_api/* addOverlayListener */.M9)('PartyChanged', e => {
      this.emit('party', e.party ?? []);
    });
  }
  processLogLine(ev) {
    const type = ev.line[netlog_defs/* default */.A.None.fields.type];
    this.emit('log', ev.line, ev.rawLine);
    switch (type) {
      case netlog_defs/* default */.A.GameLog.type:
        this.emit('log/game', normalizeLogLine(ev.line, netlog_defs/* default */.A.GameLog.fields), ev.line, ev.rawLine);
        break;
      case netlog_defs/* default */.A.GainsEffect.type:
        {
          const matches = normalizeLogLine(ev.line, netlog_defs/* default */.A.GainsEffect.fields);
          if (matches.effectId !== undefined) this.emit('effect/gain', matches.effectId, matches);
          break;
        }
      case netlog_defs/* default */.A.LosesEffect.type:
        {
          const matches = normalizeLogLine(ev.line, netlog_defs/* default */.A.LosesEffect.fields);
          if (matches.effectId !== undefined) this.emit('effect/lose', matches.effectId, matches);
          break;
        }
      case netlog_defs/* default */.A.NetworkDoT.type:
        {
          const matches = normalizeLogLine(ev.line, netlog_defs/* default */.A.NetworkDoT.fields);
          const damage = parseInt(matches.damage ?? '0', 16); // damage is in hex
          if (matches.which === 'DoT') this.emit('tick/dot', damage, matches);else if (matches.which === 'HoT') this.emit('tick/hot', damage, matches);
          break;
        }
      case netlog_defs/* default */.A.ActorControl.type:
        {
          const matches = normalizeLogLine(ev.line, netlog_defs/* default */.A.ActorControl.fields);
          if (matches.command === '40000010' || matches.command === '4000000F') this.emit('battle/wipe');
          break;
        }
      default:
        break;
    }
  }
  processEnmityTargetData({
    Target: target
  }) {
    if (target !== null) {
      this.emit('battle/target', {
        name: target.Name,
        distance: parseFloat(target.Distance),
        effectiveDistance: parseFloat(target.EffectiveDistance)
      });
    } else {
      this.emit('battle/target');
    }
  }
}
// EXTERNAL MODULE: ./node_modules/lodash/lodash.js
var lodash = __webpack_require__(543);
;// CONCATENATED MODULE: ./src/combo_tracker.ts


/**
 * Track combos that the current player uses.
 *
 * Emit `combo` event for each combo/comboBreakers skill
 * - when cast in combo, skill => its HexID
 * - when cast out of combo/cast comboBreakers, skill => undefined
 */
class ComboTracker extends eventemitter3.EventEmitter {
  constructor({
    comboBreakers,
    player,
    comboDelayMs
  }) {
    super();
    this.player = player;
    this.comboDelayMs = comboDelayMs;
    this.comboTimer = undefined;
    this.comboBreakers = comboBreakers;
    // A tree of nodes.
    this.startMap = {}; // {} key => { id: str, next: { key => node } }
    this.considerNext = this.startMap;
    this.isFinalSkill = false;

    // register events
    this.player.on('action/you', (id, matches) => this.HandleAbility(id, matches));
    this.player.on('hp', ({
      hp
    }) => {
      if (hp === 0) this.AbortCombo();
    });
    // Combos are job specific.
    this.player.on('job', () => this.AbortCombo());
  }
  AddCombo(skillList) {
    let nextMap = this.startMap;
    skillList.forEach(id => {
      const node = {
        id: id,
        next: {}
      };
      let nextEntry = nextMap[id];
      if (!nextEntry) nextEntry = nextMap[id] = node;
      nextMap = nextEntry.next;
    });
  }
  HandleAbility(id, matches) {
    if (matches.targetIndex !== '0') return;
    if (id in this.considerNext && matches.targetId !== 'E0000000') {
      this.StateTransition(id, this.considerNext[id]);
      return;
    }
    if (this.comboBreakers.includes(id)) this.AbortCombo(id);
  }
  StateTransition(id, nextState) {
    window.clearTimeout(this.comboTimer);
    this.comboTimer = undefined;
    this.isFinalSkill = (nextState && Object.keys(nextState.next).length === 0) ?? false;
    if (!nextState || this.isFinalSkill) {
      this.considerNext = this.startMap;
    } else {
      this.considerNext = Object.assign({}, this.startMap, nextState?.next);
      this.comboTimer = window.setTimeout(() => {
        this.AbortCombo();
      }, this.comboDelayMs);
    }

    // If not aborting, then this is a valid combo skill.
    this.emit('combo', nextState ? id : undefined, this);
  }
  AbortCombo(id) {
    this.StateTransition(id);
  }
  static setup(ffxivVersion, player) {
    let breakers;
    if (ffxivVersion < 630) breakers = kComboBreakers620;else if (ffxivVersion < 640) breakers = kComboBreakers630;else breakers = kComboBreakers;
    const comboTracker = new ComboTracker({
      player: player,
      comboBreakers: breakers,
      comboDelayMs: kComboDelay * 1000
    });
    const normalise = raw => {
      const queue = [...raw];
      const result = [];
      while (queue.length) {
        const item = queue.shift();
        if (typeof item === 'undefined') continue;
        if (item?.every(i => typeof i === 'string')) {
          result.push(item);
          continue;
        }
        const idx = item.findIndex(i => Array.isArray(i));
        const arr = item[idx];
        for (const i of arr) {
          const copy = [...item];
          copy[idx] = i;
          queue.push(copy);
        }
      }
      return result;
    };
    const normalised = normalise(kComboActions);
    for (const skillList of normalised) {
      comboTracker.AddCombo(skillList);
    }
    return comboTracker;
  }
}
;// CONCATENATED MODULE: ./src/player.ts





/** Player data */
class PlayerBase {
  /** player id in hex, upper case */

  constructor(ffxivVersion) {
    this.ffxivVersion = ffxivVersion;
    // basic info
    this.id = 0;
    this.idHex = '';
    this.name = '';
    this.level = 0;
    this.job = 'NONE';
    this.hp = 0;
    this.maxHp = 0;
    this.shield = 0;
    this.mp = 0;
    this.maxMp = 0;
    this.cp = 0;
    this.maxCp = 0;
    this.gp = 0;
    this.maxGp = 0;
    this.pos = {
      x: 0,
      y: 0,
      z: 0
    };
    this.rotation = 0;
    this.speedBuffs = {
      presenceOfMind: false,
      fuka: false,
      huton: false,
      paeonStacks: 0,
      museStacks: 0,
      circleOfPower: false,
      swiftscaled: false
    };
    this.stats = {
      attackMagicPotency: 0,
      attackPower: 0,
      criticalHit: 0,
      determination: 0,
      dexterity: 0,
      directHit: 0,
      healMagicPotency: 0,
      intelligence: 0,
      mind: 0,
      piety: 0,
      skillSpeed: 0,
      spellSpeed: 0,
      strength: 0,
      tenacity: 0,
      vitality: 0
    };
  }
  get gcdSkill() {
    return calcGCDFromStat(this, this.stats.skillSpeed, this.ffxivVersion);
  }
  get gcdSpell() {
    return calcGCDFromStat(this, this.stats.spellSpeed, this.ffxivVersion);
  }

  /** compute cooldown based on the current player's stat data */
  getActionCooldown(originalCd, type) {
    let speed = 0;
    if (type === 'skill') speed = this.stats.skillSpeed;else if (type === 'spell') speed = this.stats.spellSpeed;else throw new Error(`Invalid type: ${type}`);
    return calcGCDFromStat(this, speed, this.ffxivVersion, originalCd);
  }
}
class Player extends PlayerBase {
  constructor(jobsEmitter, partyTracker, ffxivVersion) {
    super(ffxivVersion);
    this.ee = new (eventemitter3_default())();
    this.jobsEmitter = jobsEmitter;
    this.partyTracker = partyTracker;

    // setup combo tracker
    this.combo = ComboTracker.setup(this.ffxivVersion, this);

    // setup event emitter
    this.jobsEmitter.on('player', ev => this.processPlayerChangedEvent(ev));
    this.jobsEmitter.on('log', line => this.processLogLines(line));
  }
  onCombo(callback) {
    const wrapper = (id, combo) => {
      callback(id, combo);
    };
    this.combo.on('combo', wrapper);
    this.once('job', () => this.combo.off('combo', wrapper));
  }
  onMobGainsEffectFromYou(callback) {
    const wrapper = (id, matches) => {
      if (
      // check if target is a mob, whose id starts with "4"
      matches.targetId?.startsWith('4') && matches.sourceId?.toUpperCase() === this.idHex) callback(id, matches);
    };
    this.on('effect/gain', wrapper);
    this.once('job', () => this.off('effect/gain', wrapper));
  }
  onMobLosesEffectFromYou(callback) {
    const wrapper = (id, matches) => {
      if (
      // check if target is a mob, whose id starts with "4"
      matches.targetId?.startsWith('4') && matches.sourceId?.toUpperCase() === this.idHex) callback(id, matches);
    };
    this.on('effect/lose', wrapper);
    this.once('job', () => this.off('effect/lose', wrapper));
  }
  onYouGainEffect(callback) {
    const wrapper = (id, matches) => {
      callback(id, matches);
    };
    this.on('effect/gain/you', wrapper);
    this.once('job', () => this.off('effect/gain/you', wrapper));
  }
  onYouLoseEffect(callback) {
    const wrapper = (id, matches) => {
      callback(id, matches);
    };
    this.on('effect/lose/you', wrapper);
    this.once('job', () => this.off('effect/lose/you', wrapper));
  }
  onStatChange(job, callback) {
    const wrapper = (_stat, gcd) => {
      if (this.job === job) callback(gcd);
    };
    this.on('stat', wrapper);
    // unregister when player change their job
    this.once('job', () => this.off('stat', wrapper));
  }
  onUseAbility(callback) {
    const wrapper = (id, matches) => {
      callback(id, matches);
    };
    this.on('action/you', wrapper);
    this.once('job', () => this.off('action/you', wrapper));
  }
  onZoneChange(callback) {
    const wrapper = (id, name, info) => {
      callback(id, name, info);
    };
    this.ee.on('zone/change', wrapper);
    this.once('job', () => this.ee.off('zone/change', wrapper));
  }
  onJobDetailUpdate(job, callback) {
    const wrapper = (_job, jobDetail) => {
      // This prevents having separate onXXXJobDetailUpdate function which take explicit callbacks
      // so that the lookup into jobFuncs can be statically typed.  Honestly, JobDetail is already
      // obnoxious enough to use in TypeScript that we probably need to rethink how it is delivered.
      callback(jobDetail);
    };
    this.on('job-detail', wrapper);
    this.once('job', newJob => {
      if (job !== newJob) this.off('job-detail', wrapper);
    });
  }
  processPlayerChangedEvent({
    detail: data
  }) {
    this.id = data.id;
    this.idHex = data.id.toString(16).toUpperCase();
    this.name = data.name;

    // always update stuffs when player changed their jobs
    const prevJob = this.job;
    if (prevJob !== data.job) {
      this.job = data.job;
      this.emit('job', data.job);

      // Because the `PlayerStat` log line is always emitted before
      // the `onPlayerChangedEvent` event, and we have job components
      // that relies on the stat data when initializing, so we need to
      // manually emit the stat data here.
      this.emit('stat', this.stats, {
        gcdSkill: this.gcdSkill,
        gcdSpell: this.gcdSpell
      });
    }

    // update level
    if (this.level !== data.level) {
      const prevLevel = this.level;
      this.level = data.level;
      this.emit('level', data.level, prevLevel);
    }

    // update hp
    if (prevJob !== data.job || this.hp !== data.currentHP || this.maxHp !== data.maxHP || this.shield !== data.currentShield) {
      const prevHp = this.hp;
      const prevShield = this.shield;
      this.hp = data.currentHP;
      this.maxHp = data.maxHP;
      this.shield = data.currentShield;
      this.emit('hp', {
        hp: data.currentHP,
        maxHp: data.maxHP,
        prevHp: prevHp,
        shield: data.currentShield,
        prevShield: prevShield
      });
    }

    // update mp
    if (prevJob !== data.job || this.mp !== data.currentMP || this.maxMp !== data.maxMP) {
      const prevMp = this.mp;
      this.mp = data.currentMP;
      this.maxMp = data.maxMP;
      this.emit('mp', {
        mp: data.currentMP,
        maxMp: data.maxMP,
        prevMp: prevMp
      });
    }

    // update cp
    if (prevJob !== data.job || this.cp !== data.currentCP || this.maxCp !== data.maxCP) {
      const prevCp = this.cp;
      this.cp = data.currentCP;
      this.maxCp = data.maxCP;
      this.emit('cp', {
        cp: data.currentCP,
        maxCp: data.maxCP,
        prevCp: prevCp
      });
    }

    // update gp
    if (prevJob !== data.job || this.gp !== data.currentGP || this.maxGp !== data.maxGP) {
      const prevGp = this.gp;
      this.gp = data.currentGP;
      this.maxGp = data.maxGP;
      this.emit('gp', {
        gp: data.currentGP,
        maxGp: data.maxGP,
        prevGp: prevGp
      });
    }
    if (this.pos.x !== data.pos.x || this.pos.y !== data.pos.y || this.pos.z !== data.pos.z || this.rotation !== data.rotation) {
      this.pos = data.pos;
      this.rotation = data.rotation;
      this.emit('pos', data.pos, data.rotation);
    }

    // update job details if there are
    if (data.jobDetail && !(0,lodash.isEqual)(this.jobDetail, data.jobDetail)) {
      this.jobDetail = data.jobDetail;
      this.emit('job-detail', data.job, data.jobDetail);
    }
    this.emit('player', this);
  }
  processPlayerStatsLogLine(line) {
    const matches = normalizeLogLine(line, netlog_defs/* default */.A.PlayerStats.fields);
    const stat = {
      attackMagicPotency: parseInt(matches.attackMagicPotency ?? '0', 10),
      attackPower: parseInt(matches.attackPower ?? '0', 10),
      criticalHit: parseInt(matches.criticalHit ?? '0', 10),
      determination: parseInt(matches.determination ?? '0', 10),
      dexterity: parseInt(matches.dexterity ?? '0', 10),
      directHit: parseInt(matches.directHit ?? '0', 10),
      healMagicPotency: parseInt(matches.healMagicPotency ?? '0', 10),
      intelligence: parseInt(matches.intelligence ?? '0', 10),
      mind: parseInt(matches.mind ?? '0', 10),
      piety: parseInt(matches.piety ?? '0', 10),
      skillSpeed: parseInt(matches.skillSpeed ?? '0', 10),
      spellSpeed: parseInt(matches.spellSpeed ?? '0', 10),
      strength: parseInt(matches.strength ?? '0', 10),
      tenacity: parseInt(matches.tenacity ?? '0', 10),
      vitality: parseInt(matches.vitality ?? '0', 10)
    };
    this.stats = stat;
    this.emit('stat', stat, this);
  }
  processLogLines(line) {
    const type = line[netlog_defs/* default */.A.None.fields.type];
    switch (type) {
      case netlog_defs/* default */.A.PlayerStats.type:
        {
          this.processPlayerStatsLogLine(line);
          break;
        }
      case netlog_defs/* default */.A.GainsEffect.type:
        {
          const matches = normalizeLogLine(line, netlog_defs/* default */.A.GainsEffect.fields);
          const effectId = matches.effectId?.toUpperCase();
          if (effectId === undefined) break;
          if (matches.targetId?.toUpperCase() === this.idHex) this.emit('effect/gain/you', effectId, matches);
          this.emit('effect/gain', effectId, matches);
          break;
        }
      case netlog_defs/* default */.A.LosesEffect.type:
        {
          const matches = normalizeLogLine(line, netlog_defs/* default */.A.LosesEffect.fields);
          const effectId = matches.effectId?.toUpperCase();
          if (effectId === undefined) break;
          if (matches.targetId?.toUpperCase() === this.idHex) this.emit('effect/lose/you', effectId, matches);
          this.emit('effect/lose', effectId, matches);
          break;
        }
      case netlog_defs/* default */.A.Ability.type:
      case netlog_defs/* default */.A.NetworkAOEAbility.type:
        {
          const matches = normalizeLogLine(line, netlog_defs/* default */.A.Ability.fields);
          const sourceId = matches.sourceId?.toUpperCase();
          const id = matches.id;
          if (id === undefined) break;
          this.emit('action', id, matches);
          if (sourceId === undefined) break;
          if (sourceId === this.idHex) this.emit('action/you', id, matches);else if (this.partyTracker.inParty(matches.source ?? '')) this.emit('action/party', id, matches);else if (sourceId.startsWith('1'))
            // starts with '1' is a player
            this.emit('action/other', id, matches);
          break;
        }
    }
  }
  on(event, listener, context) {
    this.ee.on(event, listener, context);
    return this;
  }
  once(event, listener, context) {
    this.ee.once(event, listener, context);
    return this;
  }
  off(event, listener, context) {
    this.ee.off(event, listener, context);
    return this;
  }
  emit(event, ...args) {
    return this.ee.emit(event, ...args);
  }
}
;// CONCATENATED MODULE: ./node_modules/cactbot/resources/party.js

const emptyRoleToPartyNames = () => {
    return {
        tank: [],
        healer: [],
        dps: [],
        crafter: [],
        gatherer: [],
        none: [],
    };
};
const roleLocalized = {
    tank: {
        en: 'tank',
        de: 'Verteidiger',
        fr: 'Tank',
        ja: 'タンク',
        cn: '坦克',
        ko: '탱커',
    },
    healer: {
        en: 'healer',
        de: 'Heiler',
        fr: 'Soigneur',
        ja: 'ヒーラー',
        cn: '治疗',
        ko: '힐러',
    },
    dps: {
        en: 'dps',
        de: 'DPS',
        fr: 'DPS',
        ja: 'DPS',
        cn: '输出',
        ko: '딜러',
    },
    crafter: {
        en: 'crafter',
        de: 'Handwerker',
        fr: 'Artisan',
        ja: 'クラフター',
        cn: '能工巧匠',
        ko: '제작가',
    },
    gatherer: {
        en: 'gatherer',
        de: 'Sammler',
        fr: 'Récolteur',
        ja: 'ギャザラー',
        cn: '大地使者',
        ko: '채집가',
    },
    none: {
        en: 'none',
        de: 'Keine',
        fr: 'Aucun',
        ja: '冒険者',
        cn: '冒险者',
        ko: '모험가',
    },
};
const jobLocalizedAbbr = {
    NONE: {
        en: 'NONE',
        de: 'Keine',
        fr: 'Aucun',
        ja: '冒険者',
        cn: '冒险',
        ko: '모험가',
    },
    GLA: {
        en: 'GLA',
        de: 'GLA',
        fr: 'GLA',
        ja: '剣術士',
        cn: '剑术',
        ko: '검술',
    },
    PGL: {
        en: 'PGL',
        de: 'FST',
        fr: 'PGL',
        ja: '格闘士',
        cn: '格斗',
        ko: '격투',
    },
    MRD: {
        en: 'MRD',
        de: 'MAR',
        fr: 'MRD',
        ja: '斧術士',
        cn: '斧术',
        ko: '도끼술',
    },
    LNC: {
        en: 'LNC',
        de: 'PIK',
        fr: 'HAS',
        ja: '槍術士',
        cn: '枪术',
        ko: '창술',
    },
    ARC: {
        en: 'ARC',
        de: 'WDL',
        fr: 'ARC',
        ja: '弓術士',
        cn: '弓箭',
        ko: '궁술',
    },
    CNJ: {
        en: 'CNJ',
        de: 'DRU',
        fr: 'ÉLM',
        ja: '幻術士',
        cn: '幻术',
        ko: '환술',
    },
    THM: {
        en: 'THM',
        de: 'THM',
        fr: 'OCC',
        ja: '呪術士',
        cn: '咒术',
        ko: '주술',
    },
    CRP: {
        en: 'CRP',
        de: 'ZMR',
        fr: 'MEN',
        ja: '木工',
        cn: '刻木',
        ko: '목수',
    },
    BSM: {
        en: 'BSM',
        de: 'GRS',
        fr: 'FRG',
        ja: '鍛冶',
        cn: '锻铁',
        ko: '대장',
    },
    ARM: {
        en: 'ARM',
        de: 'PLA',
        fr: 'ARM',
        ja: '甲冑',
        cn: '铸甲',
        ko: '갑주',
    },
    GSM: {
        en: 'GSM',
        de: 'GLD',
        fr: 'ORF',
        ja: '彫金',
        cn: '雕金',
        ko: '보석',
    },
    LTW: {
        en: 'LTW',
        de: 'GER',
        fr: 'TAN',
        ja: '革細',
        cn: '制革',
        ko: '가죽',
    },
    WVR: {
        en: 'WVR',
        de: 'WEB',
        fr: 'COU',
        ja: '裁縫',
        cn: '裁衣',
        ko: '재봉',
    },
    ALC: {
        en: 'ALC',
        de: 'ALC',
        fr: 'ALC',
        ja: '錬金',
        cn: '炼金',
        ko: '연금',
    },
    CUL: {
        en: 'CUL',
        de: 'GRM',
        fr: 'CUI',
        ja: '調理',
        cn: '烹调',
        ko: '요리',
    },
    MIN: {
        en: 'MIN',
        de: 'MIN',
        fr: 'MIN',
        ja: '採掘',
        cn: '采矿',
        ko: '광부',
    },
    BTN: {
        en: 'BTN',
        de: 'GÄR',
        fr: 'BOT',
        ja: '園芸',
        cn: '园艺',
        ko: '원예',
    },
    FSH: {
        en: 'FSH',
        de: 'FIS',
        fr: 'PEC',
        ja: '漁師',
        cn: '捕鱼',
        ko: '어부',
    },
    PLD: {
        en: 'PLD',
        de: 'PLD',
        fr: 'PLD',
        ja: 'ナイト',
        cn: '骑士',
        ko: '나이트',
    },
    MNK: {
        en: 'MNK',
        de: 'MÖN',
        fr: 'MOI',
        ja: 'モンク',
        cn: '武僧',
        ko: '몽크',
    },
    WAR: {
        en: 'WAR',
        de: 'KRG',
        fr: 'GUE',
        ja: '戦士',
        cn: '战士',
        ko: '전사',
    },
    DRG: {
        en: 'DRG',
        de: 'DRG',
        fr: 'DRG',
        ja: '竜騎士',
        cn: '龙骑',
        ko: '용기사',
    },
    BRD: {
        en: 'BRD',
        de: 'BRD',
        fr: 'BRD',
        ja: '詩人',
        cn: '诗人',
        ko: '음유',
    },
    WHM: {
        en: 'WHM',
        de: 'WMA',
        fr: 'MBL',
        ja: '白魔',
        cn: '白魔',
        ko: '백마',
    },
    BLM: {
        en: 'BLM',
        de: 'SMA',
        fr: 'MNO',
        ja: '黒魔',
        cn: '黑魔',
        ko: '흑마',
    },
    ACN: {
        en: 'ACN',
        de: 'HRT',
        fr: 'ACN',
        ja: '巴術士',
        cn: '秘术',
        ko: '비술',
    },
    SMN: {
        en: 'SMN',
        de: 'BSW',
        fr: 'INV',
        ja: '召喚',
        cn: '召唤',
        ko: '소환',
    },
    SCH: {
        en: 'SCH',
        de: 'GLT',
        fr: 'ERU',
        ja: '学者',
        cn: '学者',
        ko: '학자',
    },
    ROG: {
        en: 'ROG',
        de: 'SCH',
        fr: 'SUR',
        ja: '双剣士',
        cn: '双剑',
        ko: '쌍검',
    },
    NIN: {
        en: 'NIN',
        de: 'NIN',
        fr: 'NIN',
        ja: '忍者',
        cn: '忍者',
        ko: '닌자',
    },
    MCH: {
        en: 'MCH',
        de: 'MCH',
        fr: 'MCH',
        ja: '機工',
        cn: '机工',
        ko: '기공',
    },
    DRK: {
        en: 'DRK',
        de: 'DKR',
        fr: 'CHN',
        ja: '暗黒',
        cn: '暗骑',
        ko: '암기',
    },
    AST: {
        en: 'AST',
        de: 'AST',
        fr: 'AST',
        ja: '占星',
        cn: '占星',
        ko: '점성',
    },
    SAM: {
        en: 'SAM',
        de: 'SAM',
        fr: 'SAM',
        ja: '侍',
        cn: '武士',
        ko: '사무',
    },
    RDM: {
        en: 'RDM',
        de: 'RMA',
        fr: 'MRG',
        ja: '赤魔',
        cn: '赤魔',
        ko: '적마',
    },
    BLU: {
        en: 'BLU',
        de: 'BMA',
        fr: 'MBU',
        ja: '青魔',
        cn: '青魔',
        ko: '청마',
    },
    GNB: {
        en: 'GNB',
        de: 'REV',
        fr: 'PSB',
        ja: 'ガンブレ',
        cn: '绝枪',
        ko: '건브',
    },
    DNC: {
        en: 'DNC',
        de: 'TÄN',
        fr: 'DNS',
        ja: '踊り子',
        cn: '舞者',
        ko: '무도',
    },
    RPR: {
        en: 'RPR',
        de: 'SNT',
        fr: 'FCH',
        ja: 'リーパー',
        cn: '钐镰',
        ko: '리퍼',
    },
    SGE: {
        en: 'SGE',
        de: 'WEI',
        fr: 'SAG',
        ja: '賢者',
        cn: '贤者',
        ko: '현자',
    },
    VPR: {
        en: 'VPR',
        de: 'VPR',
        fr: 'VPR',
        ja: 'ヴァイパー',
        cn: '蝰蛇',
        ko: '바이퍼',
    },
    PCT: {
        en: 'PCT',
        de: 'PKT',
        fr: 'PIC',
        ja: 'ピクトマンサー',
        cn: '画家',
        ko: '픽토',
    },
};
const jobLocalizedFull = {
    NONE: {
        en: 'Adventurer',
        de: 'Abenteurer',
        fr: 'Aventurier',
        ja: '冒険者',
        cn: '冒险者',
        ko: '모험가',
    },
    GLA: {
        en: 'Gladiator',
        de: 'Gladiator',
        fr: 'Gladiateur',
        ja: '剣術士',
        cn: '剑术师',
        ko: '검술사',
    },
    PGL: {
        en: 'Pugilist',
        de: 'Faustkämpfer',
        fr: 'Pugiliste',
        ja: '格闘士',
        cn: '格斗家',
        ko: '격투가',
    },
    MRD: {
        en: 'Marauder',
        de: 'Marodeur',
        fr: 'Maraudeur',
        ja: '斧術士',
        cn: '斧术师',
        ko: '도끼술사',
    },
    LNC: {
        en: 'Lancer',
        de: 'Pikenier',
        fr: 'Maître d\'Hast',
        ja: '槍術士',
        cn: '枪术师',
        ko: '창술사',
    },
    ARC: {
        en: 'Archer',
        de: 'Waldläufer',
        fr: 'Archer',
        ja: '弓術士',
        cn: '弓箭手',
        ko: '궁술사',
    },
    CNJ: {
        en: 'Conjurer',
        de: 'Druide',
        fr: 'Élémentaliste',
        ja: '幻術士',
        cn: '幻术师',
        ko: '환술사',
    },
    THM: {
        en: 'Thaumaturge',
        de: 'Thaumaturg',
        fr: 'Occultiste',
        ja: '呪術士',
        cn: '咒术师',
        ko: '주술사',
    },
    CRP: {
        en: 'Carpenter',
        de: 'Zimmerer',
        fr: 'Charpentier',
        ja: '木工師',
        cn: '刻木匠',
        ko: '목수',
    },
    BSM: {
        en: 'Blacksmith',
        de: 'Grobschmied',
        fr: 'Forgeron',
        ja: '鍛冶師',
        cn: '锻铁匠',
        ko: '대장장이',
    },
    ARM: {
        en: 'Armorer',
        de: 'Plattner',
        fr: 'Armurier',
        ja: '甲冑師',
        cn: '铸甲匠',
        ko: '갑주제작사',
    },
    GSM: {
        en: 'Goldsmith',
        de: 'Goldschmied',
        fr: 'Orfèvre',
        ja: '彫金師',
        cn: '雕金匠',
        ko: '보석공예가',
    },
    LTW: {
        en: 'Leatherworker',
        de: 'Gerber',
        fr: 'Tanneur',
        ja: '革細工師',
        cn: '制革匠',
        ko: '가죽공예가',
    },
    WVR: {
        en: 'Weaver',
        de: 'Weber',
        fr: 'Couturier',
        ja: '裁縫師',
        cn: '裁衣匠',
        ko: '재봉사',
    },
    ALC: {
        en: 'Alchemist',
        de: 'Alchemist',
        fr: 'Alchimiste',
        ja: '錬金術師',
        cn: '炼金术士',
        ko: '연금술사',
    },
    CUL: {
        en: 'Culinarian',
        de: 'Gourmet',
        fr: 'Cuisinier',
        ja: '調理師',
        cn: '烹调师',
        ko: '요리사',
    },
    MIN: {
        en: 'Miner',
        de: 'Minenarbeiter',
        fr: 'Mineur',
        ja: '採掘師',
        cn: '采矿工',
        ko: '광부',
    },
    BTN: {
        en: 'Botanist',
        de: 'Gärtner',
        fr: 'Botaniste',
        ja: '園芸師',
        cn: '园艺工',
        ko: '원예가',
    },
    FSH: {
        en: 'Fisher',
        de: 'Fischer',
        fr: 'Pêcheur',
        ja: '漁師',
        cn: '捕鱼人',
        ko: '어부',
    },
    PLD: {
        en: 'Paladin',
        de: 'Paladin',
        fr: 'Paladin',
        ja: 'ナイト',
        cn: '骑士',
        ko: '나이트',
    },
    MNK: {
        en: 'Monk',
        de: 'Mönch',
        fr: 'Moine',
        ja: 'モンク',
        cn: '武僧',
        ko: '몽크',
    },
    WAR: {
        en: 'Warrior',
        de: 'Krieger',
        fr: 'Guerrier',
        ja: '戦士',
        cn: '战士',
        ko: '전사',
    },
    DRG: {
        en: 'Dragoon',
        de: 'Dragoon',
        fr: 'Chevalier dragon',
        ja: '竜騎士',
        cn: '龙骑士',
        ko: '용기사',
    },
    BRD: {
        en: 'Bard',
        de: 'Barde',
        fr: 'Barde',
        ja: '吟遊詩人',
        cn: '吟游诗人',
        ko: '음유시인',
    },
    WHM: {
        en: 'White Mage',
        de: 'Weißmagier',
        fr: 'Mage blanc',
        ja: '白魔道士',
        cn: '白魔法师',
        ko: '백마도사',
    },
    BLM: {
        en: 'Black Mage',
        de: 'Schwarzmagier',
        fr: 'Mage noir',
        ja: '黒魔道士',
        cn: '黑魔法师',
        ko: '흑마도사',
    },
    ACN: {
        en: 'Arcanist',
        de: 'Hermetiker',
        fr: 'Arcaniste',
        ja: '巴術士',
        cn: '秘术师',
        ko: '비슬사',
    },
    SMN: {
        en: 'Summoner',
        de: 'Beschwörer',
        fr: 'Invocateur',
        ja: '召喚士',
        cn: '召唤师',
        ko: '소환사',
    },
    SCH: {
        en: 'Scholar',
        de: 'Gelehrter',
        fr: 'Érudit',
        ja: '学者',
        cn: '学者',
        ko: '학자',
    },
    ROG: {
        en: 'Rogue',
        de: 'Schurke',
        fr: 'Surineur',
        ja: '双剣士',
        cn: '双剑师',
        ko: '쌍검사',
    },
    NIN: {
        en: 'Ninja',
        de: 'Ninja',
        fr: 'Ninja',
        ja: '忍者',
        cn: '忍者',
        ko: '닌자',
    },
    MCH: {
        en: 'Machinist',
        de: 'Maschinist',
        fr: 'Machiniste',
        ja: '機工士',
        cn: '机工士',
        ko: '기공사',
    },
    DRK: {
        en: 'Dark Knight',
        de: 'Dunkelritter',
        fr: 'Chevalier noir',
        ja: '暗黒騎士',
        cn: '暗黑骑士',
        ko: '암흑기사',
    },
    AST: {
        en: 'Astrologian',
        de: 'Astrologe',
        fr: 'Astromancien',
        ja: '占星術師',
        cn: '占星术士',
        ko: '점성술사',
    },
    SAM: {
        en: 'Samurai',
        de: 'Samurai',
        fr: 'Samuraï',
        ja: '侍',
        cn: '武士',
        ko: '사무라이',
    },
    RDM: {
        en: 'Red Mage',
        de: 'Rotmagier',
        fr: 'Mage rouge',
        ja: '赤魔道士',
        cn: '赤魔法师',
        ko: '적마도사',
    },
    BLU: {
        en: 'Blue Mage',
        de: 'Blaumagier',
        fr: 'Mage bleu',
        ja: '青魔道士',
        cn: '青魔法师',
        ko: '청마도사',
    },
    GNB: {
        en: 'Gunbreaker',
        de: 'Revolverklinge',
        fr: 'Pistosabreur',
        ja: 'ガンブレイカー',
        cn: '绝枪战士',
        ko: '건브레이커',
    },
    DNC: {
        en: 'Dancer',
        de: 'Tänzer',
        fr: 'Danseur',
        ja: '踊り子',
        cn: '舞者',
        ko: '무도가',
    },
    RPR: {
        en: 'Reaper',
        de: 'Schnitter',
        fr: 'Faucheur',
        ja: 'リーパー',
        cn: '钐镰客',
        ko: '리퍼',
    },
    SGE: {
        en: 'Sage',
        de: 'Weiser',
        fr: 'Sage',
        ja: '賢者',
        cn: '贤者',
        ko: '현자',
    },
    VPR: {
        en: 'Viper',
        de: 'Viper',
        fr: 'Rôdeur vipère',
        ja: 'ヴァイパー',
        cn: '蝰蛇剑士',
        ko: '바이퍼',
    },
    PCT: {
        en: 'Pictomancer',
        de: 'Piktomant',
        fr: 'Pictomancien',
        ja: 'ピクトマンサー',
        cn: '绘灵法师',
        ko: '픽토맨서',
    },
};
class PartyTracker {
    options;
    details = [];
    partyNames_ = [];
    partyIds_ = [];
    allianceNames_ = [];
    allianceIds_ = [];
    nameToRole_ = {};
    idToName_ = {};
    roleToPartyNames_ = emptyRoleToPartyNames();
    constructor(options) {
        this.options = options;
    }
    // Bind this to PartyChanged events.
    onPartyChanged(e) {
        this.reset();
        this.details = e.party;
        for (const p of e.party) {
            this.allianceIds_.push(p.id);
            this.allianceNames_.push(p.name);
            const jobName = util/* default */.A.jobEnumToJob(p.job);
            const role = util/* default */.A.jobToRole(jobName);
            this.idToName_[p.id] = p.name;
            this.nameToRole_[p.name] = role;
            if (p.inParty) {
                this.partyIds_.push(p.id);
                this.partyNames_.push(p.name);
                this.roleToPartyNames_[role].push(p.name);
            }
        }
    }
    reset() {
        // original event data
        this.details = [];
        this.partyNames_ = [];
        this.partyIds_ = [];
        this.allianceNames_ = [];
        this.allianceIds_ = [];
        this.nameToRole_ = {};
        this.idToName_ = {};
        // role -> [names] but only for party
        this.roleToPartyNames_ = emptyRoleToPartyNames();
    }
    // returns an array of the names of players in your immediate party
    get partyNames() {
        return this.partyNames_;
    }
    get partyIds() {
        return this.partyIds_;
    }
    // returns an array of the names of players in your alliance
    get allianceNames() {
        return this.allianceNames_;
    }
    // returns an array of the names of tanks in your immediate party
    get tankNames() {
        return this.roleToPartyNames_['tank'];
    }
    // returns an array of the names of healers in your immediate party
    get healerNames() {
        return this.roleToPartyNames_['healer'];
    }
    // returns an array of the names of dps players in your immediate party
    get dpsNames() {
        return this.roleToPartyNames_['dps'];
    }
    // returns true if the named player in your alliance is a particular role
    isRole(name, role) {
        return this.nameToRole_[name] === role;
    }
    // returns true if the named player in your alliance is a tank
    isTank(name) {
        return this.isRole(name, 'tank');
    }
    // returns true if the named player in your alliance is a healer
    isHealer(name) {
        return this.isRole(name, 'healer');
    }
    // returns true if the named player in your alliance is a dps
    isDPS(name) {
        return this.isRole(name, 'dps');
    }
    // returns true if the named player is in your immediate party
    inParty(name) {
        return this.partyNames.includes(name);
    }
    // returns true if the named player is in your alliance
    inAlliance(name) {
        return this.allianceNames.includes(name);
    }
    // for a named player, returns the other tank in your immediate party
    // if named player is not a tank, or there's not exactly two tanks
    // in your immediate party, returns null.
    otherTank(name) {
        const names = this.tankNames;
        if (names.length !== 2)
            return;
        if (names[0] === name)
            return names[1];
        if (names[1] === name)
            return names[0];
    }
    // see: otherTank, but for healers.
    otherHealer(name) {
        const names = this.healerNames;
        if (names.length !== 2)
            return;
        if (names[0] === name)
            return names[1];
        if (names[1] === name)
            return names[0];
    }
    // returns the job name of the specified party member
    jobName(name) {
        const partyIndex = this.partyNames.indexOf(name);
        if (partyIndex < 0)
            return;
        const job = this.details[partyIndex]?.job;
        if (job === undefined)
            return;
        return util/* default */.A.jobEnumToJob(job);
    }
    nameFromId(id) {
        return this.idToName_[id];
    }
    member(name) {
        // For boilerplate convenience in triggers, handle undefined names.
        if (name === undefined) {
            const unknown = '???';
            return {
                name: unknown,
                nick: unknown,
                toString: () => unknown,
            };
        }
        const partyMember = this.details.find((member) => member.name === name);
        let ret;
        const nick = util/* default */.A.shortName(name, this.options.PlayerNicks);
        if (!partyMember) {
            // If we can't find this party member for some reason, use some sort of default.
            ret = {
                name: name,
                nick: nick,
            };
        }
        else {
            const lang = this.options.DisplayLanguage;
            const job = util/* default */.A.jobEnumToJob(partyMember.job);
            const jobAbbr = jobLocalizedAbbr[job]?.[lang] ?? job;
            const jobFull = jobLocalizedFull[job]?.[lang] ?? job;
            const role = util/* default */.A.jobToRole(job);
            const roleName = roleLocalized[role]?.[lang] ?? role;
            ret = {
                id: partyMember.id,
                job: jobAbbr,
                jobFull: jobFull,
                role: roleName,
                name: name,
                nick: nick,
            };
        }
        // Need to assign this afterwards so it can reference `ret`.
        ret.toString = () => {
            const retVal = ret[this.options.DefaultPlayerLabel];
            if (typeof retVal === 'string')
                return retVal;
            return ret.nick;
        };
        return ret;
    }
}
//# sourceMappingURL=party.js.map
;// CONCATENATED MODULE: ./src/widget_list.ts
// NOTE
// This class should be considered deprecated, and any users of this class should
// just switch over to using CSS grid.

const getRandomInt = max => Math.floor(Math.random() * Math.floor(max));
class WidgetList extends HTMLElement {
  _nextId = 1;
  _nameToId = {};
  _elements = {};
  _sorted = [];
  _elementwidth = 100;
  _elementheight = 100;
  _xinc1 = 1;
  _xinc2 = 0;
  _yinc1 = 0;
  _yinc2 = 1;
  _rowcolsize = 5;
  _maxnumber = 1000;
  _connected = false;
  static get observedAttributes() {
    return ['toward', 'elementwidth', 'elementheight', 'rowcolsize', 'maxnumber'];
  }

  /** create an instance of WidgetList with attributes */
  static create(o) {
    if (!window.customElements.get('widget-list')) window.customElements.define('widget-list', WidgetList);
    const element = document.createElement('widget-list');
    if (!o) return element;
    if (typeof o.toward === 'string') element.toward = o.toward;
    if (typeof o.elementwidth === 'string') element.elementwidth = o.elementwidth;
    if (typeof o.elementheight === 'string') element.elementheight = o.elementheight;
    if (typeof o.rowcolsize === 'number') element.rowcolsize = o.rowcolsize;
    if (typeof o.maxnumber === 'number') element.maxnumber = o.maxnumber;
    if (typeof o.scale === 'number') element.scale = o.scale;
    return element;
  }

  // All visual dimensions are scaled by this.
  set scale(s) {
    if (s === null) this.removeAttribute('scale');else this.setAttribute('scale', s.toString());
  }
  get scale() {
    const s = this.getAttribute('scale');
    if (s === null) return null;
    return parseFloat(s);
  }

  // The direction that the list should grow. It can specify two
  // directions in "left", "right", "up", and "down", with the
  // first being the direction it grows until it runs out of space
  // and the second being the direction is wraps for the next
  // row/column. eg. "left down" will grow a list toward the left,
  // and subsequent rows will be below the first.
  set toward(s) {
    if (s === null) this.removeAttribute('toward');else this.setAttribute('toward', s);
  }
  get toward() {
    return this.getAttribute('toward');
  }

  // The elementwidth of each element in the list.
  set elementwidth(w) {
    if (w === null) this.removeAttribute('elementwidth');else this.setAttribute('elementwidth', w);
  }
  get elementwidth() {
    return this.getAttribute('elementwidth');
  }

  // The height of each element in the list.
  set elementheight(w) {
    if (w === null) this.removeAttribute('elementheight');else this.setAttribute('elementheight', w);
  }
  get elementheight() {
    return this.getAttribute('elementheight');
  }

  // The number of elements to show before wrapping to a new
  // row/column.
  set rowcolsize(w) {
    if (w === null) this.removeAttribute('rowcolsize');else this.setAttribute('rowcolsize', w.toString());
  }
  get rowcolsize() {
    const w = this.getAttribute('rowcolsize');
    if (w === null) return null;
    return parseInt(w);
  }

  // The maximum number of widgets to show at a time.
  set maxnumber(w) {
    if (w === null) this.removeAttribute('maxnumber');else this.setAttribute('maxnumber', w.toString());
  }
  get maxnumber() {
    const w = this.getAttribute('maxnumber');
    if (w === null) return null;
    return parseInt(w);
  }

  // This would be used with window.customElements.
  constructor() {
    super();
    const root = this.attachShadow({
      mode: 'open'
    });
    root.innerHTML = `
      <div id="root" style="position: relative"></div>
    `;
    this.rootElement = root.getElementById('root');
  }
  connectedCallback() {
    this._connected = true;
    this.layout();
  }
  disconnectedCallback() {
    this._connected = false;
  }
  parseToward(toward) {
    const t = toward.split(' ');
    if (t.length !== 2) {
      console.log('widget-list: Invalid toward format');
      return;
    }
    let x1inc;
    let x2inc;
    let y1inc;
    let y2inc;
    if (t[0] === 'left') {
      x1inc = -1;
      y1inc = 0;
      x2inc = 0;
      if (t[1] === 'up') {
        y2inc = -1;
      } else if (t[1] === 'down') {
        y2inc = 1;
      } else {
        console.log('widget-list: Invalid toward format');
        return;
      }
    } else if (t[0] === 'right') {
      x1inc = 1;
      y1inc = 0;
      x2inc = 0;
      if (t[1] === 'up') {
        y2inc = -1;
      } else if (t[1] === 'down') {
        y2inc = 1;
      } else {
        console.log('widget-list: Invalid toward format');
        return;
      }
    } else if (t[0] === 'up') {
      x1inc = 0;
      y1inc = -1;
      y2inc = 0;
      if (t[1] === 'left') {
        x2inc = -1;
      } else if (t[1] === 'right') {
        x2inc = 1;
      } else {
        console.log('widget-list: Invalid toward format');
        return;
      }
    } else if (t[0] === 'down') {
      x1inc = 0;
      y1inc = 1;
      y2inc = 0;
      if (t[1] === 'left') {
        x2inc = -1;
      } else if (t[1] === 'right') {
        x2inc = 1;
      } else {
        console.log('widget-list: Invalid toward format');
        return;
      }
    } else {
      console.log('widget-list: Invalid toward format');
      return;
    }
    this._xinc1 = x1inc;
    this._xinc2 = x2inc;
    this._yinc1 = y1inc;
    this._yinc2 = y2inc;
  }
  attributeChangedCallback(name, _oldValue, newValue) {
    if (name === 'toward') {
      this.parseToward(newValue);
      this.layout();
    } else if (name === 'elementwidth') {
      this._elementwidth = Math.max(parseInt(newValue), 1);
      this.layout();
    } else if (name === 'elementheight') {
      this._elementheight = Math.max(parseInt(newValue), 1);
      this.layout();
    } else if (name === 'rowcolsize') {
      this._rowcolsize = Math.max(parseInt(newValue), 1);
      this.layout();
    } else if (name === 'maxnumber') {
      this._maxnumber = Math.max(parseInt(newValue), 1);
      this.layout();
    }
  }
  addElement(name, element, sortKey) {
    const id = this._nextId;
    this._nextId = this._nextId + 1;
    const old = this._nameToId[name];
    if (old) this.removeElement(name);
    let sortKeyFn;
    if (typeof sortKey === 'number')
      // sortKeyFn = () => sortKey;
      sortKeyFn = () => {
        const container = this.shadowRoot?.getElementById(`child${id}`);
        if (!container) {
          return sortKey;
        }
        // @ts-ignore
        let elemText = container.firstChild.lastChild.lastChild.shadowRoot?.getElementById('lefttext');
        return Math.floor(elemText.innerText);
      };else sortKeyFn = sortKey;
    this._nameToId[name] = id;
    this._elements[id] = sortKeyFn;
    this._sorted.push(id);
    this._sorted.sort((a, b) => {
      return (this._elements[a]?.() ?? 0) - (this._elements[b]?.() ?? 0);
    });
    element.style.position = 'relative';
    element.style.left = element.style.top = '0';
    const container = document.createElement('div');
    container.appendChild(element);
    container.id = `child${id}`;
    this.rootElement.appendChild(container);
    this.layout();
  }
  removeElement(name) {
    const id = this._nameToId[name];
    if (!id) return;
    const container = this.shadowRoot?.getElementById(`child${id}`);
    let element = undefined;
    if (container) {
      element = container.childNodes[0];
      this.rootElement.removeChild(container);
    }
    delete this._nameToId[name];
    delete this._elements[id];
    for (let i = 0; i < this._sorted.length; i++) {
      if (this._sorted[i] === id) {
        this._sorted.splice(i, 1);
        break;
      }
    }
    this.layout();
    return element;
  }
  clear() {
    for (const name in this._nameToId) this.removeElement(name);
  }
  layout() {
    if (!this._connected) return;
    this.rootElement.style.width = String(this._rowcolsize * this._elementwidth);
    this.rootElement.style.height = String(this._rowcolsize * this._elementheight);
    let x = this._xinc1 < 0 ? -this._elementwidth : 0;
    let y = this._yinc1 < 0 ? -this._elementheight : 0;
    let rowColIndex = 0;
    let count = 0;
    this._sorted.forEach(id => {
      if (id === 0) {
        console.error('An id in _sorted isn\'t in _elements?');
        return;
      }
      const container = this.shadowRoot?.getElementById(`child${id}`);
      if (container === null || container === undefined) {
        console.error(`Element with id child${id} is missing?`);
        return;
      }
      if (count >= this._maxnumber) {
        container.style.display = 'none';
        return;
      }
      container.style.display = 'block';
      count++;
      container.style.position = 'absolute';
      container.style.left = x.toString();
      container.style.top = y.toString();
      x = x + this._xinc1 * this._elementwidth;
      y = y + this._yinc1 * this._elementheight;
      rowColIndex = rowColIndex + 1;
      if (rowColIndex === this._rowcolsize) {
        x = x - this._xinc1 * this._elementwidth * rowColIndex;
        y = y - this._yinc1 * this._elementheight * rowColIndex;
        x = x + this._xinc2 * this._elementwidth;
        y = y + this._yinc2 * this._elementheight;
        rowColIndex = 0;
      }
    });
  }
  test() {
    for (let i = 0; i < 8; ++i) {
      const div = document.createElement('div');
      div.style.width = String(this._elementwidth * 3 / 4);
      div.style.height = String(this._elementheight * 3 / 4);
      div.style.overflow = 'hidden';
      div.style.backgroundColor = `#${getRandomInt(9)}${getRandomInt(9)}${getRandomInt(9)}`;
      div.style.textAlign = 'center';
      div.style.fontFamily = 'arial';
      div.style.fontSize = String(this._elementheight / 6);
      div.style.fontWeight = 'bold';
      div.style.color = 'white';
      div.style.textShadow = '-1px 0 3px black, 0 1px 3px black, 1px 0 3px black, 0 -1px 3px black';
      div.innerHTML = `<br/>${i + 1}`;
      this.addElement(`test${i}`, div, () => 0);
    }
  }
}
window.customElements.define('widget-list', WidgetList);
;// CONCATENATED MODULE: ./src/bars.ts

// import TimerBox from 'cactbot/resources/timerbox';




// import {
//   kMPCombatRate,
//   kMPNormalRate,
//   kMPTickInterval,
//   kMPUI1Rate,
//   kMPUI2Rate,
//   kMPUI3Rate,
// } from './constants';

// import { computeBackgroundColorFrom } from './utils';

// // text on the pull countdown.
// const kPullText = {
//   en: 'Pull',
//   de: 'Start',
//   fr: 'Attaque',
//   ja: 'タゲ取る',
//   cn: '开怪',
//   ko: '풀링',
// };

class Bars {
  o = {};
  constructor(options, o) {
    this.options = options;
    // Don't add any notifications if only the buff tracker is being shown.
    if (this.options.JustBuffTracker) {
      this.options.NotifyExpiredProcsInCombatSound = 'disabled';
      this.options.NotifyExpiredProcsInCombat = 0;
    }
    this.ee = o.emitter;
    this.player = o.player;
    const container = document.getElementById('jobs-container');
    if (!container) throw new not_reached/* UnreachableCode */.O();
    this.jobsContainer = container;
    this.updateProcBoxNotifyRepeat();
  }
  updateProcBoxNotifyRepeat() {
    if (this.options.NotifyExpiredProcsInCombat >= 0) {
      const repeats = this.options.NotifyExpiredProcsInCombat === 0 ? 'infinite' : this.options.NotifyExpiredProcsInCombat.toString();
      document.documentElement.style.setProperty('--proc-box-notify-repeat', repeats);
    }
  }
  _updateUIVisibility(inPvP) {
    this.jobsContainer.dataset.inpvp = inPvP ? 'true' : 'false';
  }
  _setupJobContainers(job) {
    while (this.jobsContainer.firstChild) this.jobsContainer.removeChild(this.jobsContainer.firstChild);
    this.o = {};
    this.jobsContainer.classList.remove('hide');
    const barsLayoutContainer = document.createElement('div');
    barsLayoutContainer.id = 'jobs';
    this.jobsContainer.appendChild(barsLayoutContainer);

    // add job name and role name in classList, e.g. 'warrior' and 'tank'
    barsLayoutContainer.classList.add(job.toLowerCase());
    const role = util/* default */.A.jobToRole(job);
    if (role !== 'none') barsLayoutContainer.classList.add(role.toLowerCase());

    // 添加增伤模块
    const injuryContainer = document.createElement('div');
    injuryContainer.id = 'damage-up';
    barsLayoutContainer.appendChild(injuryContainer);
    this.o.damageUp = this.addDamageUpBar(job);

    // 添加左侧buff框
    const buffContainer = document.createElement('div');
    buffContainer.id = 'buffs-list';
    buffContainer.style.position = 'absolute';
    if (isPhysicalJob(job)) {
      buffContainer.style.top = (this.options.PhysicalFontSize + 10).toString();
    } else {
      buffContainer.style.top = (this.options.MagicFontSize + 10).toString();
    }
    barsLayoutContainer.appendChild(buffContainer);
    this.o.buffsList = this.addBuffsList({
      id: 'buffs-list',
      iconWidth: this.options.BigBuffIconWidth,
      iconHeight: this.options.BigBuffIconHeight,
      barHeight: this.options.BigBuffIconHeight,
      // 与icon一样高
      toward: 'down right'
    });

    // 添加右侧dot框
    const dotContainer = document.createElement('div');
    dotContainer.id = 'dots-list';
    barsLayoutContainer.appendChild(dotContainer);
    this.o.dotsList = this.addDotsList({
      id: 'dots-list',
      iconWidth: this.options.DotIconWidth,
      iconHeight: this.options.DotIconHeight,
      barHeight: this.options.DotBarHeight,
      toward: 'left down'
    });
  }
  addDamageUpBar(job) {
    let barsContainer = document.getElementById('damage-up');
    if (!barsContainer) {
      barsContainer = document.createElement('div');
      barsContainer.id = 'damage-up';
    }
    if (isPhysicalJob(job)) {
      // 物理增伤
      const physicalContainer = document.createElement('div');
      physicalContainer.id = 'damage-up-physical';
      physicalContainer.style.color = '#ff8129';
      physicalContainer.style.fontSize = this.options.PhysicalFontSize.toString();
      physicalContainer.setAttribute('value', String(0));
      // physicalContainer.innerText = '物: 10%';
      barsContainer.appendChild(physicalContainer);
    } else {
      // 魔法增伤
      const magicContainer = document.createElement('div');
      magicContainer.id = 'damage-up-magic';
      magicContainer.style.color = '#07d5ee';
      magicContainer.style.fontSize = this.options.MagicFontSize.toString();
      // magicContainer.style.top = this.options.PhysicalFontSize.toString();
      magicContainer.setAttribute('value', String(0));
      // magicContainer.innerText = '魔: 20%';
      barsContainer.appendChild(magicContainer);
    }

    // 在团辅出现时更新
    // this.player.on('cp', (data) => {
    //     this._updateCp(data);
    // });

    return barsContainer;
  }
  addBuffsList(o) {
    const barsContainer = document.getElementById(o.id);
    if (!barsContainer) throw new not_reached/* UnreachableCode */.O();
    const buffsList = WidgetList.create({
      rowcolsize: 20,
      maxnumber: 20,
      toward: o.toward,
      // elementwidth: (o.iconWidth + 2).toString(),
      elementheight: (o.iconHeight + 1).toString()
    });
    barsContainer.appendChild(buffsList);
    return buffsList;
  }
  addDotsList(o) {
    const barsContainer = document.getElementById(o.id);
    if (!barsContainer) throw new not_reached/* UnreachableCode */.O();
    const buffsList = WidgetList.create({
      rowcolsize: 1,
      maxnumber: 20,
      toward: o.toward,
      elementwidth: (o.iconWidth + 2).toString(),
      elementheight: (o.iconHeight + o.barHeight).toString()
    });
    barsContainer.appendChild(buffsList);
    return buffsList;
  }
  _updateProcBoxNotifyState(inCombat) {
    if (this.options.NotifyExpiredProcsInCombat >= 0) {
      const boxes = document.getElementsByClassName('proc-box');
      for (const box of boxes) {
        if (inCombat) {
          box.classList.add('in-combat');
          for (const child of box.children) child.classList.remove('expired');
        } else {
          box.classList.remove('in-combat');
        }
      }
    }
  }
  setJobsContainerVisibility(show) {
    this.jobsContainer.classList.toggle('hide', !show);
  }
}
;// CONCATENATED MODULE: ./node_modules/cactbot/resources/effect_id.js
// Auto-generated from gen_effect_id.ts
// DO NOT EDIT THIS FILE DIRECTLY
const data = {
    '2': 'E88',
    '4': 'E8A',
    'ABitBerserk': '905',
    'AMansBestFriend': '16E',
    'Abandon': '2DA',
    'AbandonIi': '2DB',
    'AbandonIii': '2DC',
    'AbandonIv': '2DD',
    'Abandonment_286': '286',
    'Abandonment_58A': '58A',
    'AbdomenTear': 'BE9',
    'AboutFace_50E': '50E',
    'AboutFace_7A7': '7A7',
    'AboutFace_872': '872',
    'AboutFace_94E': '94E',
    'AboutFace_DD3': 'DD3',
    'AboutFace_E73': 'E73',
    'AboutFace_E84': 'E84',
    'Abridged': '537',
    'AbsoluteBind': '1B2',
    'AbsoluteProtect': '944',
    'Acceleration': '4D6',
    'AccelerationBomb_1030': '1030',
    'AccelerationBomb_430': '430',
    'AccelerationBomb_568': '568',
    'AccelerationBomb_A61': 'A61',
    'AccelerationBomb_ED1': 'ED1',
    'AccelerationBomb_EDA': 'EDA',
    'Acclaim': 'C5B',
    'Accretion': '644',
    'AccuracyDown': '1C',
    'AccuracyUp': '1B',
    'AccursedFlame': '5F7',
    'AccursedPoison': '795',
    'AccursedPox': '43F',
    'AcidicBite': '819',
    'ActingDps': 'B6D',
    'ActingHealer': 'B6E',
    'ActingTank': 'B6F',
    'AdamantPurged': 'A44',
    'AdamantScales': '104D',
    'AdamantinonThelema': 'B3F',
    'Adaptation_62D': '62D',
    'Adaptation_639': '639',
    'Addersting': 'C2B',
    'Addle_4B3': '4B3',
    'Addle_7C4': '7C4',
    'AdventOfChocobastion': '1014',
    'AegisBoon': '28F',
    'Aero': '8F',
    'AeroIi': '90',
    'AeroIii': '31E',
    'AetherMortar': 'C54',
    'AetherRot': '5C3',
    'AetherRotImmunity': '5C4',
    'AetherSickness_30D': '30D',
    'AetherSickness_AAB': 'AAB',
    'Aetherflow': '130',
    'AetherhuesIi_1005': '1005',
    'AetherhuesIi_E5C': 'E5C',
    'Aetherhues_1004': '1004',
    'Aetherhues_E5B': 'E5B',
    'AetherialAegis': '8F7',
    'AetherialDepletion': '9A9',
    'AetherialEnhancement': '483',
    'AetherialExchange': 'CF1',
    'AetherialField': '155',
    'AetherialSurge_44A': '44A',
    'AetherialSurge_476': '476',
    'AetherialWard': '9C7',
    'AetheriallyCharged': '5F8',
    'AetheriallyPrimed': '6DA',
    'AethericBurst': '88B',
    'AethericMimicryDps': '84D',
    'AethericMimicryHealer': '84E',
    'AethericMimicryTank': '84C',
    'AetherochemicalBomb_1FD': '1FD',
    'AetherochemicalBomb_2D3': '2D3',
    'AetherochemicalNanospores_244': '244',
    'AetherochemicalNanospores_245': '245',
    'Aetheronecrosis': 'CF9',
    'Aetherstock': '1028',
    'Aethersucker': 'AEF',
    'AethertrailAttunement_327': '327',
    'AethertrailAttunement_38C': '38C',
    'Affixed': '4F3',
    'AfflatusSolace': '7F4',
    'AggravatedAssault': '461',
    'AggressivePosture': '6EC',
    'AggressiveStance': '1CC',
    'Agitation': 'D6',
    'AirAnchorPrimed': 'C50',
    'AirForceSimulation': '5D2',
    'Airbound': '5FD',
    'Ajisai': '6F3',
    'AllaganField': '1C6',
    'AllaganImmunity': '14E',
    'AllaganRot': '14D',
    'AllaganVenom': '1C5',
    'AlliedArithmeticks': '3FC',
    'Almagest': '563',
    'AlphaTarget': 'DE8',
    'AlteredStates': '56B',
    'AmbitiousLure': 'F84',
    'AmmunitionLoaded': '35E',
    'Amnesia_1072': '1072',
    'Amnesia_444': '444',
    'Amnesia_5': '5',
    'Analysis': 'C56',
    'Anatman': '746',
    'AncientCircle_83E': '83E',
    'AncientCircle_DCE': 'DCE',
    'AncientDouble': '899',
    'AncientFrost': 'DB2',
    'Anemomorph_300': '300',
    'Anemomorph_8C4': '8C4',
    'AngelsSnack': '9BF',
    'AngelsWhisper': '752',
    'AnglersArt': 'ADA',
    'AnglersFortune': '352',
    'Anguish': 'AA6',
    'AnnihilationMode': '61C',
    'AnotherVictim': '2EE',
    'Anthropomorph': '2FE',
    'AntiCoagulant': '3EC',
    'Antibody': '19A',
    'Anticipation': '4AA',
    'Apathetic_5C0': '5C0',
    'Apathetic_69F': '69F',
    'ApexBlades': 'EDC',
    'ApexWings': 'EDB',
    'Apocatastasis_AA': 'AA',
    'Apocatastasis_C94': 'C94',
    'Apokalypsis': 'E3C',
    'AquaticConception': 'D0A',
    'Aquaveil_A94': 'A94',
    'Aquaveil_C0E': 'C0E',
    'ArborCall': 'E9',
    'ArborCallIi': 'F2',
    'ArcanaBreaker': '3C8',
    'ArcaneAttraction': 'D39',
    'ArcaneBulwark': '64B',
    'ArcaneCircle': 'A27',
    'ArcaneFever': 'D3B',
    'ArcaneTriumph_D37': 'D37',
    'ArcaneTriumph_D38': 'D38',
    'ArcanumBlessing': '38B',
    'AreaOfInfluenceUp_26A': '26A',
    'AreaOfInfluenceUp_6D5': '6D5',
    'AreaOfInfluenceUp_775': '775',
    'AreaOfInfluenceUp_EB8': 'EB8',
    'ArmOfPurgatory': '24E',
    'ArmoredScales': '1001',
    'ArmsLength_4B9': '4B9',
    'ArmsLength_7C0': '7C0',
    'ArmsLength_87C': '87C',
    'ArmsLength_885': '885',
    'ArmsUp': '498',
    'ArmysEthos': '78D',
    'ArmysMuse': '78C',
    'ArmysPaeon_89': '89',
    'ArmysPaeon_8A': '8A',
    'ArmysPaeon_8A6': '8A6',
    'ArmysPaeon_8AA': '8AA',
    'ArrowDrawn_393': '393',
    'ArrowDrawn_D4C': 'D4C',
    'ArrowDrawn_FCB': 'FCB',
    'ArrowHeld': '39A',
    'ArtificialBoost': '700',
    'ArtificiallyEnhanced_6E4': '6E4',
    'ArtificiallyEnhanced_6E5': '6E5',
    'Ascended': 'E02',
    'Ashen': '56C',
    'AspectedBenefic': '343',
    'AspectedHelios': '344',
    'AspectedToFire': '4FE',
    'AspectedToIce': '4FF',
    'AspectedToLightning': '500',
    'Aspirstrikes': '45',
    'AssassinateReady': '7A3',
    'Assassinated': '522',
    'Assimilated': '42D',
    'Assimilation': '42C',
    'AstralAttenuation': '849',
    'AstralCloak': '6B0',
    'AstralEffect': '8BE',
    'AstralEssence': '6AE',
    'AstralFireIi_AE': 'AE',
    'AstralFireIi_C8D': 'C8D',
    'AstralFireIii_AF': 'AF',
    'AstralFireIii_D35': 'D35',
    'AstralFire_AD': 'AD',
    'AstralFire_C8C': 'C8C',
    'AstralRealignment': '18E',
    'AstralTilt': 'DF9',
    'AstralWarmth': 'C90',
    'AstralbrightSoul': 'DFC',
    'AstralstrongSoul': 'DFE',
    'Asylum_2E3': '2E3',
    'Asylum_777': '777',
    'Asylum_778': '778',
    'AtDeathsDoor': 'AB2',
    'AtTheLimit': '95C',
    'AtkDefUp': '3D2',
    'AtkDown': '3C3',
    'AtkUp': '3C2',
    'Atlas': '89E',
    'Atmosfaction': 'E07',
    'AtonementReady_76E': '76E',
    'AtonementReady_7DF': '7DF',
    'Atrophy': '287',
    'AttackDown': '1A',
    'AttackMagicPotencyDown': '22',
    'AttackMagicPotencyUp_21': '21',
    'AttackMagicPotencyUp_28A': '28A',
    'AttackUp_19': '19',
    'AttackUp_289': '289',
    'AttractionReversed': 'D3A',
    'Attunement': '7C6',
    'Aurora_72B': '72B',
    'Aurora_811': '811',
    'AuroralFlipper': 'A0A',
    'Auspicious': '621',
    'AuspiciousTrance': '9C1',
    'AuthoritysBoot': '105B',
    'AuthoritysExpansion': '105A',
    'AuthoritysGaze': 'EE7',
    'AuthoritysHeel': '105C',
    'AuthoritysHold': '1022',
    'AutoEther': '927',
    'AutoHealPenalty': '449',
    'AutoPotion': '926',
    'AutoRemedy': '928',
    'Autophysis': 'A3D',
    'AvariciousRuin': '9CF',
    'Awareness_49': '49',
    'Awareness_CD5': 'CD5',
    'BackFromTheBrink': '9D5',
    'BackUnseen_6AD': '6AD',
    'BackUnseen_E8F': 'E8F',
    'BackWithThee': '8C1',
    'BackwardBearing': 'B14',
    'BackwardFracture': 'FC7',
    'BackwardWhimsy': 'B1A',
    'BalanceDrawn_391': '391',
    'BalanceDrawn_C1D': 'C1D',
    'BalanceDrawn_FC9': 'FC9',
    'BalanceHeld': '398',
    'BalancedTactics': '5A2',
    'BalefulAir': '9BA',
    'BanefulImpaction': 'F2B',
    'BanishL': '677',
    'BannerOfFirmResolve': '919',
    'BannerOfHonedAcuity': '91B',
    'BannerOfHonoredSacrifice': '917',
    'BannerOfLimitlessGrace': '931',
    'BannerOfNobleEnds': '916',
    'BannerOfSolemnClarity': '91A',
    'BannerOfTirelessConviction': '918',
    'BannerOfTranscendentFinesse': '932',
    'BannerOfUnyieldingDefense': '930',
    'BardamsPrice': '4FA',
    'Barofield_241': '241',
    'Barofield_D5C': 'D5C',
    'Barrage_57F': '57F',
    'Barrage_80': '80',
    'BasicInstinct': '9C2',
    'BattleEfficiencyDown': '2BD',
    'BattleFever': '28E',
    'BattleHigh': '28D',
    'BattleHighI': '853',
    'BattleHighIi': '854',
    'BattleHighIii': '855',
    'BattleHighIv': '856',
    'BattleHighV': '857',
    'BattleLitany_312': '312',
    'BattleLitany_586': '586',
    'BattleVoice': '8D',
    'BeastkingsBoon': '482',
    'Beckoned': '793',
    'BeckoningDark_EB3': 'EB3',
    'BeckoningDark_ED2': 'ED2',
    'BeeBeGone': '1033',
    'BeeBeHere': '1034',
    'BeelovedVenom_F5C': 'F5C',
    'BeelovedVenom_F5D': 'F5D',
    'Begrimed': 'E34',
    'Behelmed_7B0': '7B0',
    'Behelmed_7B1': '7B1',
    'Bemoggled': '1D9',
    'Benoggined': 'F6C',
    'Berserk_56': '56',
    'Berserk_CB9': 'CB9',
    'BetaTarget': 'DE9',
    'Bewildered': '195',
    'BeyondDeath': '566',
    'BeyondLimits': '5FA',
    'BibliotaphSimulation': '5D4',
    'BigBang': 'EB0',
    'BigBounce': 'EB1',
    'BigGameFishing': 'F43',
    'BigbulgeBiggerbrain': '3EB',
    'BigbulgeGoblixer': '3E6',
    'BindResistance': '547',
    'Bind_10F4': '10F4',
    'Bind_118': '118',
    'Bind_1C9': '1C9',
    'Bind_234': '234',
    'Bind_3DA': '3DA',
    'Bind_541': '541',
    'Bind_9D6': '9D6',
    'Bind_C3E': 'C3E',
    'Bind_D': 'D',
    'Bind_D81': 'D81',
    'Bind_E29': 'E29',
    'Bind_EC0': 'EC0',
    'Bind_EC6': 'EC6',
    'Bind_ECD': 'ECD',
    'BindingDark': 'EB6',
    'BindingSoulSnare': 'DDB',
    'Bio': 'B3',
    'BioIi': 'BD',
    'BioIii_4BE': '4BE',
    'BioIii_52E': '52E',
    'BioblasterPrimed': 'C4F',
    'Bioblaster_74A': '74A',
    'Bioblaster_7E3': '7E3',
    'Biohacked': '6A7',
    'Biolysis_767': '767',
    'Biolysis_7F7': '7F7',
    'Biolysis_C11': 'C11',
    'Biolytic': 'C12',
    'BishopActive': 'C53',
    'BitterHate': '42A',
    'BlackHoleBuffer': '6D1',
    'BlackMenace': '3A0',
    'BlackPaint': '5BD',
    'BlackShift': 'CAE',
    'BlackWound': '565',
    'Blackblood': 'BD9',
    'BlackestNight_49A': '49A',
    'BlackestNight_51C': '51C',
    'BlackfeatherBoost': 'BB3',
    'BladeOfFaithReady': 'CB2',
    'BladeOfHonorReady': 'EF7',
    'BladeOfValor': 'AA1',
    'Bladecatcher': 'C57',
    'BlankfaceGoblixer': '3E8',
    'BlastArrowReady_A84': 'A84',
    'BlastArrowReady_C46': 'C46',
    'BlazeSpikes': 'C5',
    'BlazingAramitama': '6EE',
    'Bleeding_111': '111',
    'Bleeding_140': '140',
    'Bleeding_153': '153',
    'Bleeding_157': '157',
    'Bleeding_282': '282',
    'Bleeding_283': '283',
    'Bleeding_3AC': '3AC',
    'Bleeding_432': '432',
    'Bleeding_6B2': '6B2',
    'Bleeding_828': '828',
    'Bleeding_95F': '95F',
    'Bleeding_980': '980',
    'Bleeding_A4C': 'A4C',
    'Bleeding_B6A': 'B6A',
    'Bleeding_B87': 'B87',
    'Bleeding_C05': 'C05',
    'Bleeding_C06': 'C06',
    'Bleeding_F7E': 'F7E',
    'Bleeding_FE4': 'FE4',
    'BlessingOfBlight': 'CD0',
    'BlessingOfEarth': '2AB',
    'BlessingOfFire': '2AC',
    'BlessingOfLight_BC6': 'BC6',
    'BlessingOfLight_C33': 'C33',
    'BlessingOfLight_F1': 'F1',
    'BlessingOfTheVoid': '309',
    'Blight_175': '175',
    'Blight_293': '293',
    'Blight_890': '890',
    'BlindToGrief': '8A1',
    'BlindToRage': '8A0',
    'Blind_23B': '23B',
    'Blind_440': '440',
    'Blind_5F4': '5F4',
    'Blind_DA6': 'DA6',
    'Blind_F': 'F',
    'BlizzardCharged': '5CC',
    'Bloated_2BE': '2BE',
    'Bloated_708': '708',
    'BloodForBlood_75': '75',
    'BloodForBlood_7BD': '7BD',
    'BloodMoon': '601',
    'BloodOfTheBraax': '104A',
    'BloodOfTheDragon_2E0': '2E0',
    'BloodOfTheDragon_CC1': 'CC1',
    'BloodOfTheGorgon': 'CFE',
    'BloodPrice': '2E9',
    'BloodRush': 'A07',
    'BloodSacrifice': '6D9',
    'BloodWeapon': '2E6',
    'BloodbathL': '68D',
    'Bloodbath_54': '54',
    'Bloodbath_7BE': '7BE',
    'BloodsownCircle_A29': 'A29',
    'BloodsownCircle_B9C': 'B9C',
    'Bloodwhetting_A76': 'A76',
    'Bloodwhetting_BD6': 'BD6',
    'BloodyRuin': '9CD',
    'BloomingBlue': 'D83',
    'BloomingGold': 'D84',
    'BloomingWelt': 'D9B',
    'BlownAway': '6D2',
    'BluePaint': '5BC',
    'Bluefire': '24F',
    'BluntResistanceDown_23D': '23D',
    'BluntResistanceDown_335': '335',
    'BluntResistanceDown_3A3': '3A3',
    'BluntResistanceDown_6F0': '6F0',
    'BluntResistanceDown_8C8': '8C8',
    'BluntResistanceDown_C3C': 'C3C',
    'BluntResistanceUp': '2D2',
    'BodilyManipulation': 'CF6',
    'Boiling_102C': '102C',
    'Boiling_B52': 'B52',
    'BoleDrawn_392': '392',
    'BoleDrawn_D4B': 'D4B',
    'BoleDrawn_FCA': 'FCA',
    'BoleHeld': '399',
    'Bombarium': 'FB4',
    'BondsOfDarkness': 'EB7',
    'BondsOfLoathing': '1059',
    'Boost_678': '678',
    'Boost_6B4': '6B4',
    'Boost_CB': 'CB',
    'Boosted': '990',
    'BootCampMode': '902',
    'BorneHeart': '612',
    'BorrowedFlesh': 'AC8',
    'BoundAndDetermined': 'AD9',
    'BountifulCatch': '492',
    'BowShock': '72E',
    'BraaxPulse': 'EC8',
    'Braced': '8D8',
    'BracingSuds_CE1': 'CE1',
    'BracingSuds_CE9': 'CE9',
    'BrainRot': 'CD2',
    'BrandOfTheFallen': '429',
    'BrandOfTheIreful': '27D',
    'BrandOfTheSullen': '27C',
    'BraveNewWorld': '161',
    'BraveryL': '66E',
    'BraveryOfTheSeventhDawn': 'D55',
    'Break': 'A0D',
    'BreakIiiEdict': '694',
    'BreathOfMagic': 'E80',
    'BreathOfTheGorgon': 'CFF',
    'Breathless_595': '595',
    'Breathless_A70': 'A70',
    'Briar': '1B4',
    'BrightPulse': 'E9C',
    'BrightwingedFortitude': 'A64',
    'BrightwingedFury': 'A68',
    'BrilliantConviction_40F': '40F',
    'BrilliantConviction_410': '410',
    'BrilliantConviction_411': '411',
    'BrilliantConviction_4F0': '4F0',
    'BrilliantConviction_4F1': '4F1',
    'BrilliantDynamis': 'D76',
    'BrinkOfDeath': '2C',
    'BrinyMirror': '1B0',
    'BrinyVeil_1B1': '1B1',
    'BrinyVeil_1D3': '1D3',
    'BroodRage': '174',
    'Brotherhood_4A1': '4A1',
    'Brotherhood_87E': '87E',
    'BrotherlyLove': '627',
    'BrushWithDeath': '84F',
    'BrutalShell_76A': '76A',
    'BrutalShell_7CD': '7CD',
    'BubbleGaol': 'EA2',
    'BubbleNet': 'EA0',
    'BubbleWeave': 'E9F',
    'BullsEye': 'E9E',
    'Bulwark': '4D',
    'Bunshin_7A2': '7A2',
    'Bunshin_7DA': '7DA',
    'BurgeoningFury_10BF': '10BF',
    'BurgeoningFury_EF9': 'EF9',
    'BurningBrand': '850',
    'BurningChains_301': '301',
    'BurningChains_DB1': 'DB1',
    'BurningCounter': '3B5',
    'BurningSoul': '64D',
    'BurningWard': '104F',
    'Burns_10B': '10B',
    'Burns_11C': '11C',
    'Burns_1F7': '1F7',
    'Burns_212': '212',
    'Burns_26B': '26B',
    'Burns_629': '629',
    'Burns_6FB': '6FB',
    'Burns_822': '822',
    'Burns_892': '892',
    'Burns_897': '897',
    'Burns_961': '961',
    'Burns_B64': 'B64',
    'Burns_B81': 'B81',
    'Burns_BF9': 'BF9',
    'Burns_BFA': 'BFA',
    'Burns_C92': 'C92',
    'Burns_CC2': 'CC2',
    'Burns_CC3': 'CC3',
    'Burns_DD1': 'DD1',
    'Burns_EF2': 'EF2',
    'Burns_FA': 'FA',
    'Burrs': '12F',
    'Burst': 'C95',
    'BuryingCounter': '3B8',
    'ButchersBlock': '55B',
    'ByregotsWard': 'DF',
    'Cactguard': '847',
    'CalamitysBite': 'EED',
    'CalamitysBolt': 'EEF',
    'CalamitysChill': 'EEE',
    'CalamitysEmbers': 'EEB',
    'CalamitysFlames': 'EE9',
    'CalamitysFrost': 'EEC',
    'CalamitysFulgur': 'EF0',
    'CalamitysInferno': 'EEA',
    'CallOfThePortal': 'CCC',
    'Camouflage': '728',
    'CandyCane': 'E3A',
    'CardDrawn': '33A',
    'CardHeld': '33C',
    'CarnalChill': '365',
    'CarrotOfHappiness': 'AF5',
    'CascadingLatentDefect_687': '687',
    'CascadingLatentDefect_DC8': 'DC8',
    'CastingChlamys': 'AF0',
    'Catalyze_77E': '77E',
    'Catalyze_C10': 'C10',
    'CatchAndRelease': '2FD',
    'CatharsisOfCorundum_10C8': '10C8',
    'CatharsisOfCorundum_A7D': 'A7D',
    'Causality': '202',
    'CausticBite_4B0': '4B0',
    'CausticBite_529': '529',
    'CelestialRiver': 'C21',
    'CelestialTide': 'C22',
    'Cemented_5C1': '5C1',
    'Cemented_5EC': '5EC',
    'CetaceousSpeed': 'A09',
    'ChainDeathmatch': 'FB3',
    'ChainOfPurgatory': '24D',
    'ChainSaw': 'C52',
    'ChainSawPrimed': 'C51',
    'ChainStratagem_4C5': '4C5',
    'ChainStratagem_57E': '57E',
    'ChainsOfMemory': '65B',
    'ChainsOfResentment': 'CDE',
    'ChanceOfBlizzards': 'FAE',
    'ChanceOfGaleForceWinds': 'FAD',
    'ChanceOfHyperelectricity': 'FAC',
    'ChanceOfWildfires': 'FAB',
    'Chanchala_534': '534',
    'Chanchala_582': '582',
    'Chaos': '204',
    'ChaosThrust_520': '520',
    'ChaosThrust_76': '76',
    'ChaoticCyclone': '81E',
    'ChaoticCycloneReady': '7C8',
    'ChaoticSpring': 'A9F',
    'Charge_190': '190',
    'Charge_2C6': '2C6',
    'ChelicResistanceDown': 'CF8',
    'Chelomorph': 'CF3',
    'ChelonianGate': '9C0',
    'Chicken_284': '284',
    'Chicken_44E': '44E',
    'ChilledToTheBone': '794',
    'ChillingSuds_CE2': 'CE2',
    'ChillingSuds_CEA': 'CEA',
    'ChimericSoul': 'DD9',
    'Chiromorph': '2FF',
    'Chiten': '4D8',
    'ChocoBeak': 'EC',
    'ChocoReflect': '281',
    'ChocoRegen': 'ED',
    'ChocoSurge': 'EE',
    'Chocobastion': '1015',
    'ChorusAligned': 'AFA',
    'Chum': '2FB',
    'Churning': '4F6',
    'CircleOfClarity': 'AEB',
    'CircleOfPower': '2E2',
    'CircleOfSacrifice': 'A28',
    'CircleOfScorn': 'F8',
    'ClarifyingDraw': 'A99',
    'ClarityOfCorundum': 'A7C',
    'Clashing': '4F7',
    'ClawMotif': '100B',
    'ClawSketch': '101E',
    'Clawbound_456': '456',
    'Clawbound_AD7': 'AD7',
    'ClawedMuse': '100F',
    'CleanerShot': '359',
    'ClericStance_91': '91',
    'ClericStance_9B4': '9B4',
    'CloakOfDeath': '253',
    'Clockwork': '5A3',
    'CloseCaloric': 'E05',
    'ClosedPosition_71F': '71F',
    'ClosedPosition_7EA': '7EA',
    'CloyingCondensation': '9E4',
    'CocoonOfThePenitent': '70F',
    'CodeMi': 'D77',
    'CoeurlForm': '6D',
    'ColdBlade1': '8FB',
    'ColdBlade2': '8FC',
    'ColdBrand1': '8F4',
    'ColdBrand2': '8F8',
    'ColdFog': '9BD',
    'ColdSpell': 'AB3',
    'ColdSweats': '102E',
    'CollectableSynthesis': '387',
    'CollectiveUnconscious_34F': '34F',
    'CollectiveUnconscious_350': '350',
    'CollectiveUnconscious_351': '351',
    'CollectiveUnconscious_8EB': '8EB',
    'CollectorsFocus': 'A6C',
    'CollectorsGlove': '325',
    'CollectorsHighStandard': 'F47',
    'CollectorsStandard': '972',
    'ColliderConductor': 'FA6',
    'Combust': '346',
    'CombustIi': '34B',
    'CombustIii_759': '759',
    'CombustIii_7F9': '7F9',
    'Cometeor': '580',
    'ComeuppanceReady': '10C0',
    'ComfortZone': '105',
    'CompanionAttackUp': '21A',
    'CompanionAttackUpIi': '21B',
    'CompanionEnmityUp': '220',
    'CompanionEnmityUpIi': '221',
    'CompanionExpUp': '218',
    'CompanionExpUpIi': '219',
    'CompanionHealingPotencyUp': '21C',
    'CompanionHealingPotencyUpIi': '21D',
    'CompanionMaximumHpUp': '21E',
    'CompanionMaximumHpUpIi': '21F',
    'CompressedLightning_400': '400',
    'CompressedLightning_85F': '85F',
    'CompressedWater_3FF': '3FF',
    'CompressedWater_85E': '85E',
    'ComputationBoost': '61D',
    'ComputationError': '61E',
    'ComputationMode': '61A',
    'Concealed_2A4': '2A4',
    'Concealed_655': '655',
    'Concealed_F9D': 'F9D',
    'Concentrate': '88A',
    'ConcentratedPoison_2A5': '2A5',
    'ConcentratedPoison_3F3': '3F3',
    'ConcentratedPoison_416': '416',
    'ConcentratedPoison_CBD': 'CBD',
    'ConcentratedPoison_E6C': 'E6C',
    'Concentration': '18C',
    'ConcentrationConcentrate': 'F77',
    'ConceptualMastery': 'CFD',
    'Concussion_10A': '10A',
    'Concussion_3E4': '3E4',
    'Concussion_3E5': '3E5',
    'Concussion_821': '821',
    'Concussion_837': '837',
    'Concussion_B63': 'B63',
    'Concussion_B80': 'B80',
    'Concussion_BF7': 'BF7',
    'Concussion_BF8': 'BF8',
    'Concussion_DB9': 'DB9',
    'Concussion_DC1': 'DC1',
    'CondensedWaveCannonKyrios_DB3': 'DB3',
    'CondensedWaveCannonKyrios_DB4': 'DB4',
    'CondensedWaveCannonKyrios_DB5': 'DB5',
    'CondensedWaveCannonKyrios_DB6': 'DB6',
    'Confession': '4C3',
    'Confiteor': '81C',
    'ConfiteorReady_BCB': 'BCB',
    'ConfiteorReady_BD4': 'BD4',
    'Confused_417': '417',
    'Confused_503': '503',
    'Confused_B': 'B',
    'Conked': '843',
    'Connectivity': '5C6',
    'Consolation': 'C1A',
    'Consumption': 'CF5',
    'ContactProhibitionOrdained_864': '864',
    'ContactProhibitionOrdained_BEF': 'BEF',
    'ContactRegulationOrdained_865': '865',
    'ContactRegulationOrdained_BF0': 'BF0',
    'ContractualObligation': '6C0',
    'Convalescence_48': '48',
    'Convalescence_4A8': '4A8',
    'CorporealReturn': '18F',
    'CorpsACorps': '7DC',
    'CorruptedCrystal': '176',
    'Counter': '207',
    'Cover_50': '50',
    'Cover_514': '514',
    'Cover_96C': '96C',
    'Covered_1100': '1100',
    'Covered_51': '51',
    'Covered_515': '515',
    'Covered_96D': '96D',
    'CraftersGrace': '2D',
    'CraftersSoul': '36F',
    'CraftingFacility': '29',
    'Craniotomy': 'B98',
    'Craven': '58D',
    'CravenCompanionship': 'B96',
    'CreepingPoison': 'B0A',
    'CrestOfTimeBorrowed_A24': 'A24',
    'CrestOfTimeBorrowed_A25': 'A25',
    'CrestOfTimeBorrowed_B2D': 'B2D',
    'CrestOfTimeReturned_A26': 'A26',
    'CrestOfTimeReturned_B2E': 'B2E',
    'CrimsonStrikeReady_1130': '1130',
    'CrimsonStrikeReady_1133': '1133',
    'CriticalFactor': 'E0A',
    'CriticalOverflowBug_681': '681',
    'CriticalOverflowBug_DC5': 'DC5',
    'CriticalPerformanceBug': 'D65',
    'CriticalSkill': '41',
    'CriticalStrikes_12D': '12D',
    'CriticalStrikes_243': '243',
    'CriticalStrikes_656': '656',
    'CriticalStrikes_705': '705',
    'CriticalSynchronizationBug_680': '680',
    'CriticalSynchronizationBug_DC4': 'DC4',
    'CriticalUnderflowBug_682': '682',
    'CriticalUnderflowBug_DC6': 'DC6',
    'CriticalUp': '4A4',
    'CritterResistance_3CA': '3CA',
    'CritterResistance_3D6': '3D6',
    'CritterVulnerability': '3CE',
    'CrownOfTheGorgon': 'D18',
    'CrumblingBulwark': '64F',
    'CrystalBurden': 'EE2',
    'CrystalCourier': 'E78',
    'CrystalVeil': '142',
    'Crystallized': 'EE3',
    'Cube': '42E',
    'CureIiiReady': 'C0B',
    'Curl': '136',
    'CurseOfDarkness': '953',
    'CurseOfTheMummy': '25A',
    'CurseOfTheRonka': '736',
    'CursedShriek': '1C4',
    'CursedVoice': '1C3',
    'Cursekeeper': '6BD',
    'CuttingCounter': '3B7',
    'DadalumaSimulation': '5D3',
    'DamageBarrier': 'D4D',
    'DamageDown_1112': '1112',
    'DamageDown_1113': '1113',
    'DamageDown_274': '274',
    'DamageDown_2B8': '2B8',
    'DamageDown_3E': '3E',
    'DamageDown_3F8': '3F8',
    'DamageDown_442': '442',
    'DamageDown_82C': '82C',
    'DamageDown_964': '964',
    'DamageDown_9DA': '9DA',
    'DamageDown_B5F': 'B5F',
    'DamageDown_C5E': 'C5E',
    'DamageDown_CE8': 'CE8',
    'DamageDown_D7': 'D7',
    'DamageDown_F7C': 'F7C',
    'DamageOverTime': '3D3',
    'DamageUp_107': '107',
    'DamageUp_1137': '1137',
    'DamageUp_122': '122',
    'DamageUp_12C': '12C',
    'DamageUp_14C': '14C',
    'DamageUp_193': '193',
    'DamageUp_1BB': '1BB',
    'DamageUp_1F9': '1F9',
    'DamageUp_236': '236',
    'DamageUp_2A0': '2A0',
    'DamageUp_2AF': '2AF',
    'DamageUp_3D': '3D',
    'DamageUp_489': '489',
    'DamageUp_4C9': '4C9',
    'DamageUp_608': '608',
    'DamageUp_624': '624',
    'DamageUp_638': '638',
    'DamageUp_6E0': '6E0',
    'DamageUp_6E6': '6E6',
    'DamageUp_6EA': '6EA',
    'DamageUp_6F5': '6F5',
    'DamageUp_77F': '77F',
    'DamageUp_8AC': '8AC',
    'DamageUp_95A': '95A',
    'DamageUp_981': '981',
    'DamageUp_9CB': '9CB',
    'DamageUp_9F6': '9F6',
    'DamageUp_C39': 'C39',
    'DamageUp_CBC': 'CBC',
    'DamageUp_DA2': 'DA2',
    'DamageUp_EAC': 'EAC',
    'DamageUp_F87': 'F87',
    'Damnation': 'EF8',
    'DanceOfTheDawn': '10DA',
    'DanceOfTheDawnReady': 'F1D',
    'DancePartner_720': '720',
    'DancePartner_7EB': '7EB',
    'DancingEdge': '1EB',
    'DangerouslyDoped': 'FB6',
    'DarkArts_2F0': '2F0',
    'DarkArts_BDA': 'BDA',
    'DarkDance_2E8': '2E8',
    'DarkDance_32D': '32D',
    'DarkForce': '360',
    'DarkMind': '2EA',
    'DarkMissionary_766': '766',
    'DarkMissionary_87B': '87B',
    'DarkResistanceDownIi': 'CFB',
    'DarkResistanceDown_C40': 'C40',
    'DarkResistanceDown_E23': 'E23',
    'DarkWhispers_DCF': 'DCF',
    'DarkWhispers_E93': 'E93',
    'DarkenedFire': 'AC9',
    'Darkness': '38A',
    'DarksAccord': 'DE2',
    'DarksDiscord': 'DE4',
    'Darkside': '2EF',
    'Darksight': '480',
    'Dash': '8F5',
    'DawnsResolve': '1021',
    'Daze': '4',
    'Deactivated': 'B09',
    'DeathBecomesYou': '895',
    'DeathFromAbove': '650',
    'DeathFromBelow': '651',
    'DeathLink': 'C77',
    'DeathThroes_17A': '17A',
    'DeathThroes_260': '260',
    'DeathWarrant_10D4': '10D4',
    'DeathWarrant_C86': 'C86',
    'DeathsDesign': 'A1A',
    'DeathsToll': 'ACA',
    'Debana': '10D2',
    'DecreeNisiA': '2C3',
    'DecreeNisiB': '2C4',
    'DeepEssenceOfTheVictor': '92D',
    'DeepFreeze_1036': '1036',
    'DeepFreeze_1E7': '1E7',
    'DeepFreeze_47E': '47E',
    'DeepFreeze_4E6': '4E6',
    'DeepFreeze_6C3': '6C3',
    'DeepFreeze_6DE': '6DE',
    'DeepFreeze_8CC': '8CC',
    'DeepFreeze_A62': 'A62',
    'DeepFreeze_C93': 'C93',
    'DeepFreeze_CD7': 'CD7',
    'DeepFreeze_D97': 'D97',
    'DeepFreeze_D98': 'D98',
    'DeepFreeze_D99': 'D99',
    'DeepFreeze_DBF': 'DBF',
    'DefDown': '3C5',
    'DefUp': '3C4',
    'Defamation': '460',
    'DefenseDown': '1E',
    'DefenseKit': '3E1',
    'DefenseUp': '1D',
    'Defenseless': '64C',
    'DefensiveOptimization': '2AA',
    'DefensivePosture': '6ED',
    'DefensiveTactics': '5A1',
    'Defiance_574': '574',
    'Defiance_5B': '5B',
    'Defiance_C34': 'C34',
    'DelayedNeurotoxicity': 'F64',
    'DelightfulRevelation': 'DF3',
    'Delirium_2EC': '2EC',
    'Delirium_7B4': '7B4',
    'Delirium_7CC': '7CC',
    'Delirium_EFC': 'EFC',
    'Deliverance': '2D9',
    'Delusions_F80': 'F80',
    'Delusions_F81': 'F81',
    'DemiclonePenalty': 'DA1',
    'Demolish_51D': '51D',
    'Demolish_F6': 'F6',
    'DemonEye': '1B3',
    'DesperateMeasures_A97': 'A97',
    'DesperateMeasures_C15': 'C15',
    'DestinyDrawn': 'A0B',
    'Devilment': '721',
    'Devotion': '4BD',
    'Devoured': '1A5',
    'DevouringDark': 'C32',
    'Dia_74F': '74F',
    'Dia_7F3': '7F3',
    'DiabolicCurse': '1A8',
    'Diamondback': '6BA',
    'DifferentialDiagnosis': 'A30',
    'Digesting': '285',
    'DigestiveEnzymes': '3BD',
    'DigestiveFluid': '431',
    'DirectAttack_404': '404',
    'DirectAttack_412': '412',
    'DirectAttack_413': '413',
    'DirectAttack_418': '418',
    'DirectionalDisregard': 'EE0',
    'DirectionalInvincibility': '465',
    'DirectionalParry': '2A8',
    'DirtyVenom': '42B',
    'Disabled_34C': '34C',
    'Disabled_57D': '57D',
    'DisciplinedFist': 'BB9',
    'Discomposed': 'AAD',
    'Disease_26F': '26F',
    'Disease_45A': '45A',
    'Disease_B5': 'B5',
    'Disembowel_77A': '77A',
    'Disembowel_79': '79',
    'Dismantled': '35C',
    'Displacement_7DD': '7DD',
    'Displacement_CAB': 'CAB',
    'Disseminate': '15C',
    'Dissipation_317': '317',
    'Dissipation_815': '815',
    'Distorted': '9E7',
    'Distracted': '27B',
    'DiurnalBalance_4DF': '4DF',
    'DiurnalBalance_780': '780',
    'DiurnalBalance_7FA': '7FA',
    'DiurnalBenefic': 'C1B',
    'DiurnalIntersection': '760',
    'DiurnalOpposition': '816',
    'DiurnalSect': '347',
    'DiveReady': '4DB',
    'Diversion': '7F',
    'Divination_756': '756',
    'Divination_7F2': '7F2',
    'DivineAura': 'F40',
    'DivineBenison_4C2': '4C2',
    'DivineBenison_57C': '57C',
    'DivineCaress': 'F3F',
    'DivineCommandmentFlee': '590',
    'DivineCommandmentTurn': '591',
    'DivineGrace': 'F29',
    'DivineMight': 'A71',
    'DivineSeal': '9F',
    'DivineVeil_2D6': '2D6',
    'DivineVeil_2D7': '2D7',
    'DivineVeil_552': '552',
    'DivineVeil_878': '878',
    'DivineVeil_879': '879',
    'Divining_10EC': '10EC',
    'Divining_F35': 'F35',
    'DivisiveDark': 'EB2',
    'Dizzy': 'B9E',
    'DmoniacBonds': 'DDE',
    'Dokumori_10CF': '10CF',
    'Dokumori_F09': 'F09',
    'Doom_38E': '38E',
    'Doom_6CA': '6CA',
    'Doom_6E9': '6E9',
    'Doom_7B2': '7B2',
    'Doom_9D4': '9D4',
    'Doom_9D7': '9D7',
    'Doom_BA0': 'BA0',
    'Doom_D2': 'D2',
    'Doom_D24': 'D24',
    'Doped': 'FB5',
    'DopedAndDetonative': 'FB7',
    'DotonCorruption': 'C07',
    'DotonHeavy': '1F6',
    'Doton_10D0': '10D0',
    'Doton_1F5': '1F5',
    'Doton_C73': 'C73',
    'Double': '295',
    'DoubleEdgeL': '675',
    'DoubledDark': 'EB4',
    'DownAndOut': 'A47',
    'DownForTheCount_1024': '1024',
    'DownForTheCount_10FE': '10FE',
    'DownForTheCount_271': '271',
    'DownForTheCount_306': '306',
    'DownForTheCount_30F': '30F',
    'DownForTheCount_380': '380',
    'DownForTheCount_6E2': '6E2',
    'DownForTheCount_6F9': '6F9',
    'DownForTheCount_79E': '79E',
    'DownForTheCount_7A1': '7A1',
    'DownForTheCount_7AB': '7AB',
    'DownForTheCount_968': '968',
    'DownForTheCount_B5E': 'B5E',
    'DownForTheCount_B91': 'B91',
    'DownForTheCount_C5D': 'C5D',
    'DownForTheCount_DAD': 'DAD',
    'DownForTheCount_E92': 'E92',
    'DownForTheCount_F44': 'F44',
    'DownForTheCount_F8F': 'F8F',
    'DownTheRabbitHole': '5FB',
    'DownpourOfDeath': '83',
    'DraconianFire': '747',
    'DraconianGaze': '2BF',
    'DraconianLight': '2C0',
    'DragonForce': '9C4',
    'DragonKick': '62',
    'DragonsFlight': 'F05',
    'DrainedFortitude': '813',
    'DrainedPower': '812',
    'Drainstrikes': '44',
    'DrawFortitude': '810',
    'DrawPower': '80F',
    'DreadwyrmTrance_328': '328',
    'DreadwyrmTrance_C9C': 'C9C',
    'DreamwovenMimicry': '1020',
    'Drenched': '593',
    'DrillPrimed': 'C4E',
    'Drone': 'F51',
    'DropAndRoll': 'E7D',
    'Dropsy_110': '110',
    'Dropsy_11B': '11B',
    'Dropsy_121': '121',
    'Dropsy_1E5': '1E5',
    'Dropsy_213': '213',
    'Dropsy_6C8': '6C8',
    'Dropsy_827': '827',
    'Dropsy_AD6': 'AD6',
    'Dropsy_B69': 'B69',
    'Dropsy_B86': 'B86',
    'Dropsy_C03': 'C03',
    'Dropsy_C04': 'C04',
    'Dropsy_EC1': 'EC1',
    'Dropsy_EC2': 'EC2',
    'Dropsy_ED5': 'ED5',
    'Dropsy_ED6': 'ED6',
    'Drowning': '6A0',
    'DrowningCounter': '3B9',
    'Drubbed': '5EF',
    'DrunkWithPower': 'E0B',
    'Dualcast_4E1': '4E1',
    'Dualcast_562': '562',
    'Dualcast_571': '571',
    'Dualcast_706': '706',
    'Duality': '316',
    'DuelOrDie': '9F1',
    'DuodmoniacBonds': 'DDF',
    'DustPoisoning': '197',
    'DutiesAsAssigned': '96F',
    'DynamicFluid': '641',
    'EarthAndWater': '16F',
    'EarthAspected': 'B02',
    'EarthResistanceDownIi_41D': '41D',
    'EarthResistanceDownIi_831': '831',
    'EarthResistanceDownIi_D2C': 'D2C',
    'EarthResistanceUp': '20C',
    'EarthResonance': 'C63',
    'EarthenAccord': '30A',
    'EarthenWard': '137',
    'EarthlyDominance': '4C8',
    'EarthsReply': '51F',
    'EarthsResolve': '49C',
    'EarthsRumination': 'F01',
    'EastWindOfChange': '105D',
    'EatFromTheHand': '164',
    'EchoOfTheFallen': 'CDA',
    'EchoesOfBefoulment': 'BAE',
    'EchoesOfBenevolence': 'BB0',
    'EchoesOfNausea': 'BAD',
    'EchoesOfTheFuture': 'BAF',
    'EdgeOfShadow': '836',
    'EerieAir': '1A9',
    'Ekpyrosis': 'AB',
    'ElectricalCharge': 'F8B',
    'ElectricalCondenser': 'F9F',
    'Electrified': '8B9',
    'Electroconductivity': '200',
    'Electrocution_10F': '10F',
    'Electrocution_120': '120',
    'Electrocution_215': '215',
    'Electrocution_29A': '29A',
    'Electrocution_530': '530',
    'Electrocution_76B': '76B',
    'Electrocution_826': '826',
    'Electrocution_898': '898',
    'Electrocution_A56': 'A56',
    'Electrocution_B68': 'B68',
    'Electrocution_B85': 'B85',
    'Electrocution_C01': 'C01',
    'Electrocution_C02': 'C02',
    'Electrocution_EC3': 'EC3',
    'ElectromagneticField': '6A5',
    'ElementalBlessing': '6DC',
    'ElementalBlessingDamage': '5B7',
    'ElementalBlessingExp': '5B5',
    'ElementalExpUp_5A7': '5A7',
    'ElementalExpUp_62F': '62F',
    'ElementalExpUp_6C4': '6C4',
    'ElementalHarmony': '633',
    'ElementalResistanceDown': 'AF1',
    'ElementalStar': '10DD',
    'Elevated': '54E',
    'ElusiveJump': 'C89',
    'ElusiveJumpTarget': 'AC5',
    'Embolden_4D7': '4D7',
    'Embolden_511': '511',
    'Embolden_8EA': '8EA',
    'EmergencyTactics': '318',
    'EmpoweredBeast': 'A59',
    'EmpoweredKetu': '502',
    'EmpoweredRahu': '501',
    'EnAvant': '800',
    'Enaero': 'CE',
    'Enblizzard': 'CD',
    'EnchainedSoul': 'E01',
    'EnchantedRedoublement_CA4': 'CA4',
    'EnchantedRedoublement_CA7': 'CA7',
    'EnchantedRiposte_CA2': 'CA2',
    'EnchantedRiposte_CA5': 'CA5',
    'EnchantedZwerchhau_CA3': 'CA3',
    'EnchantedZwerchhau_CA6': 'CA6',
    'EncoreOfLightReady': '10D8',
    'Endwalker': 'AAA',
    'EnergyField': '248',
    'EnergyFieldDown': '249',
    'Enervation_222': '222',
    'Enervation_423': '423',
    'Enervation_579': '579',
    'Enfeebled': '488',
    'Enfire': 'CC',
    'Engagement': '7F1',
    'EnhancedBeneficIi': '32F',
    'EnhancedCrossReaping': 'A1F',
    'EnhancedEnpi': '4D4',
    'EnhancedFlare': 'B90',
    'EnhancedGallows': 'A1D',
    'EnhancedGibbet_A1C': 'A1C',
    'EnhancedGibbet_B27': 'B27',
    'EnhancedHarpe_B1D': 'B1D',
    'EnhancedHarpe_B2B': 'B2B',
    'EnhancedPiercingTalon': '74E',
    'EnhancedRoyalRoad': '330',
    'EnhancedScatter': '4D5',
    'EnhancedSlugShot': '358',
    'EnhancedUnleash': '32E',
    'EnhancedVoidReaping_A1E': 'A1E',
    'EnhancedVoidReaping_B29': 'B29',
    'EnigmaCodex_862': '862',
    'EnigmaCodex_863': '863',
    'Enlarged_7B7': '7B7',
    'Enlarged_8E8': '8E8',
    'Enliven': '305',
    'EnmityUp': 'D1E',
    'Enochian': '364',
    'Enshielded': '76D',
    'Enshrouded_A21': 'A21',
    'Enshrouded_B2F': 'B2F',
    'Enstone': 'CF',
    'EntangledFlames': 'AC7',
    'Enthunder_9FD': '9FD',
    'Enthunder_D0': 'D0',
    'Entropifaction': 'E08',
    'Entropy': '640',
    'EntropyResistance': 'E21',
    'Enwater': 'D1',
    'EpPenalty': '946',
    'EpicEcho': 'AAE',
    'EpicHero': '1060',
    'EpicVillain': '1061',
    'Epicycle': '10EA',
    'Equilibrium': 'A79',
    'ErraticBlaster': '23E',
    'EscapeDetectionOrdained_867': '867',
    'EscapeDetectionOrdained_BF2': 'BF2',
    'EscapeProhibitionOrdained_866': '866',
    'EscapeProhibitionOrdained_BF1': 'BF1',
    'Esprit_737': '737',
    'Esprit_738': '738',
    'Esprit_7E9': '7E9',
    'Esprit_803': '803',
    'EternalDoom': '45B',
    'Eubuleus': 'AE4',
    'Eudaimonia': 'F3B',
    'Eukrasia_A2E': 'A2E',
    'Eukrasia_B33': 'B33',
    'Eukrasia_C23': 'C23',
    'Eukrasia_F74': 'F74',
    'EukrasianDiagnosis_A2F': 'A2F',
    'EukrasianDiagnosis_B31': 'B31',
    'EukrasianDiagnosis_C25': 'C25',
    'EukrasianDosis': 'A36',
    'EukrasianDosisIi': 'A37',
    'EukrasianDosisIii_A38': 'A38',
    'EukrasianDosisIii_B30': 'B30',
    'EukrasianDosisIii_C24': 'C24',
    'EukrasianDosisIii_F88': 'F88',
    'EukrasianDyskrasia': 'F39',
    'EukrasianPrognosis_A31': 'A31',
    'EukrasianPrognosis_B32': 'B32',
    'EurekaMoment': 'ACD',
    'EvasionDown_20': '20',
    'EvasionDown_963': '963',
    'EvasionUp_1F': '1F',
    'EvasionUp_6AA': '6AA',
    'EvasionUp_962': '962',
    'EventideSword': 'DF6',
    'Everburn': 'D4E',
    'EverlastingFlight_74C': '74C',
    'EverlastingFlight_7EE': '7EE',
    'EverlastingFlight_C9E': 'C9E',
    'EwerDrawn_395': '395',
    'EwerDrawn_C1E': 'C1E',
    'EwerDrawn_FCD': 'FCD',
    'EwerHeld': '39C',
    'Exaltation': 'A9D',
    'ExcavatorReady': 'F19',
    'Excellence': 'CE5',
    'Excogitation_4C4': '4C4',
    'Excogitation_886': '886',
    'Executioner': 'F12',
    'ExecutionersGuillotineReady': '10D3',
    'ExpBonus': '41A',
    'ExpandedAttack': '3D4',
    'ExpandedRoyalRoad': '331',
    'Expedience_A98': 'A98',
    'Expedience_C14': 'C14',
    'Expedience_EE4': 'EE4',
    'Extend': '294',
    'ExtendedRoyalRoad': '332',
    'ExtremeCaution_46C': '46C',
    'ExtremeCaution_4F5': '4F5',
    'EyeForAnEye_535': '535',
    'EyeForAnEye_536': '536',
    'EyeForAnEye_B9': 'B9',
    'EyeForAnEye_BA': 'BA',
    'EyeGouge': 'BEA',
    'EyeOfTheGorgon': 'D17',
    'EyesOpen': '4E4',
    'FaceInTheCrowd': '5D6',
    'FacilityAccessDetailing': '225',
    'FacilityAccessDetailingIi': '229',
    'FacilityAccessFinishing': '224',
    'FacilityAccessFinishingIi': '22A',
    'FacilityAccessProduction': '223',
    'FacilityAccessProductionIi': '226',
    'FacilityAccessSpecialization': '227',
    'FacilityAccessSpecializationIi': '228',
    'FadedOut': '773',
    'FadingConsciousness': 'AB1',
    'FadingFast': '743',
    'FaeCloak': '47F',
    'FaeLight': '707',
    'Falling': '5C7',
    'FanDance': '804',
    'FangAndClawBared': '322',
    'Fangbound_457': '457',
    'Fangbound_AD8': 'AD8',
    'FangedMuse': '1010',
    'FastDraw': '884',
    'FatalAttraction': 'F50',
    'FateParticipant_8DD': '8DD',
    'FateParticipant_A11': 'A11',
    'FatedBrand': '10C6',
    'FatedHero': '1062',
    'FatedVillain': '1063',
    'Fathom': '48E',
    'Fearless': '6D3',
    'FeatherField': '421',
    'Featherbrained_C31': 'C31',
    'Featherbrained_D85': 'D85',
    'Featherfoot': '63',
    'FeelinHot': '947',
    'Feint_4AB': '4AB',
    'Feint_889': '889',
    'FellhuntersVenom': 'E4B',
    'FellskinsVenom': 'E4C',
    'FemmeFatale': 'F71',
    'FetterWard': '7BF',
    'Fetters_124': '124',
    'Fetters_1F8': '1F8',
    'Fetters_1FE': '1FE',
    'Fetters_29B': '29B',
    'Fetters_29C': '29C',
    'Fetters_302': '302',
    'Fetters_320': '320',
    'Fetters_336': '336',
    'Fetters_385': '385',
    'Fetters_3A2': '3A2',
    'Fetters_3DE': '3DE',
    'Fetters_3F2': '3F2',
    'Fetters_41F': '41F',
    'Fetters_481': '481',
    'Fetters_4EA': '4EA',
    'Fetters_56F': '56F',
    'Fetters_577': '577',
    'Fetters_5B4': '5B4',
    'Fetters_5C5': '5C5',
    'Fetters_5D9': '5D9',
    'Fetters_64E': '64E',
    'Fetters_6BE': '6BE',
    'Fetters_6DD': '6DD',
    'Fetters_739': '739',
    'Fetters_774': '774',
    'Fetters_8ED': '8ED',
    'Fetters_8EE': '8EE',
    'Fetters_967': '967',
    'Fetters_B9F': 'B9F',
    'Fetters_CB1': 'CB1',
    'Fetters_CD3': 'CD3',
    'Fetters_CFC': 'CFC',
    'Fetters_D5D': 'D5D',
    'Fetters_DE0': 'DE0',
    'Fetters_EAB': 'EAB',
    'Fever': 'B7',
    'FeverReversed': 'D3C',
    'FeyCovenant': '13C',
    'FeyFire': '167',
    'FeyGlow': '13E',
    'FeyIllumination': '13D',
    'FeyLight': '13F',
    'FeyUnion_4C6': '4C6',
    'FeyUnion_4C7': '4C7',
    'FeyWind': '31F',
    'FieryConception': 'D0C',
    'FifthChakra': '31D',
    'FightOrFlight': '4C',
    'Filthy': '5C2',
    'FinalAppraisal': '88E',
    'FinalDecreeNisiA': '405',
    'FinalDecreeNisiB': '406',
    'FinalDecreeNisi_859': '859',
    'FinalDecreeNisi_85A': '85A',
    'FinalDecreeNisi_8AE': '8AE',
    'FinalDecreeNisi_8AF': '8AF',
    'FinalFantasia': 'C48',
    'FinalFlight': '40E',
    'FinalJudgmentDecreeNisiA': '40C',
    'FinalJudgmentDecreeNisiB': '40D',
    'FinalJudgmentDecreeNisi_85B': '85B',
    'FinalJudgmentDecreeNisi_85C': '85C',
    'FinalJudgmentDecreeNisi_8B0': '8B0',
    'FinalJudgmentDecreeNisi_8B1': '8B1',
    'FinalJudgmentMaxHp': '407',
    'FinalJudgmentMinHp': '408',
    'FinalJudgmentPenaltyI': '409',
    'FinalJudgmentPenaltyIi': '40A',
    'FinalJudgmentPenaltyIii_40B': '40B',
    'FinalJudgmentPenaltyIii_8AD': '8AD',
    'FinalJudgmentPenaltyIv': '85D',
    'FinalPunishment': '403',
    'FinalWordContactProhibition': '868',
    'FinalWordContactRegulation': '869',
    'FinalWordEscapeDetection': '86B',
    'FinalWordEscapeProhibition': '86A',
    'FinishingMoveReady': 'F1C',
    'FireAlchemy': 'ABF',
    'FireCharged': '5CB',
    'FireConvergence': '4FB',
    'FireLoaded': 'E2A',
    'FireResistanceDownIi_111F': '111F',
    'FireResistanceDownIi_471': '471',
    'FireResistanceDownIi_4E7': '4E7',
    'FireResistanceDownIi_832': '832',
    'FireResistanceDownIi_B56': 'B56',
    'FireResistanceDownIi_B79': 'B79',
    'FireResistanceDown_26D': '26D',
    'FireResistanceDown_29E': '29E',
    'FireResistanceUp_208': '208',
    'FireResistanceUp_5ED': '5ED',
    'FireResonance': 'C62',
    'FireToad': '1FF',
    'FirebirdTrance': 'C9D',
    'FiresRumination_10CD': '10CD',
    'FiresRumination_F03': 'F03',
    'Firescorched': '1D0',
    'Firestarter': 'A5',
    'Firestream': '14F',
    'FirstBrand': 'CC4',
    'FirstChakra': '319',
    'FirstFlame': 'CC8',
    'FirstInLine': 'BBC',
    'FirstmindsFocus': 'C6A',
    'FishEyes': '2FA',
    'FishersIntuition': '238',
    'FistsOfEarth_68': '68',
    'FistsOfEarth_7D6': '7D6',
    'FistsOfFire_67': '67',
    'FistsOfFire_7D5': '7D5',
    'FistsOfWind': '69',
    'FixedSign_A4F': 'A4F',
    'FixedSign_A50': 'A50',
    'FixedSign_A51': 'A51',
    'FizzlingSuds_CE3': 'CE3',
    'FizzlingSuds_CEB': 'CEB',
    'FlamesOfEventide': 'DF5',
    'Flamespire_D9E': 'D9E',
    'Flamespire_D9F': 'D9F',
    'FlamethrowerFlames': '5B2',
    'Flamethrower_4B5': '4B5',
    'Flamethrower_5AF': '5AF',
    'FlamingArrow': 'F9',
    'FlanksbaneVenom': 'E3E',
    'FlankstungVenom': 'E3D',
    'FlareDampening': '255',
    'FleetFooted': 'B74',
    'FleetingRaijuReady_A83': 'A83',
    'FleetingRaijuReady_C8B': 'C8B',
    'FleshWound_108': '108',
    'FleshWound_270': '270',
    'FleshWound_715': '715',
    'FleshWound_81F': '81F',
    'FleshWound_B61': 'B61',
    'FleshWound_B7E': 'B7E',
    'FleshWound_BF3': 'BF3',
    'FleshWound_BF4': 'BF4',
    'FloatingFetters': '900',
    'FloodOfShadow': '87A',
    'FlourishingCascade': '716',
    'FlourishingFanDance': '7E5',
    'FlourishingFinish': 'A8A',
    'FlourishingFlow': 'BCA',
    'FlourishingFountain': '717',
    'FlourishingSaberDance': 'C58',
    'FlourishingShower': '719',
    'FlourishingStarfall': 'A8C',
    'FlourishingSymmetry': 'BC9',
    'FlourishingWindmill': '718',
    'FlyingHigh': '6C2',
    'FoamyFetters': 'ECC',
    'Focalization': '818',
    'FoeRequiem_8B': '8B',
    'FoeRequiem_8C': '8C',
    'FoolsFigure': '184',
    'FoolsTightrope': '181',
    'FoolsTumble': '183',
    'ForbiddenPassage_CCE': 'CCE',
    'ForbiddenPassage_CCF': 'CCF',
    'ForceAgainstMagic': '3EE',
    'ForceAgainstMight': '3ED',
    'ForcedMarch_4E9': '4E9',
    'ForcedMarch_E2D': 'E2D',
    'ForcedMarch_E87': 'E87',
    'ForcedMarch_E99': 'E99',
    'ForcedWithdrawal': '3D1',
    'ForeMarkOfTheTides': 'AD2',
    'Foresight': '53',
    'ForkedLightning_24B': '24B',
    'ForkedLightning_ED7': 'ED7',
    'FormlessFist': '9D1',
    'Forte': '10E0',
    'ForwardBearing': 'B13',
    'ForwardMarch_50D': '50D',
    'ForwardMarch_7A6': '7A6',
    'ForwardMarch_871': '871',
    'ForwardMarch_94D': '94D',
    'ForwardMarch_DD2': 'DD2',
    'ForwardMarch_E72': 'E72',
    'ForwardMarch_E83': 'E83',
    'ForwardOmen_1039': '1039',
    'ForwardOmen_1141': '1141',
    'ForwardOmen_1145': '1145',
    'ForwardOmen_114A': '114A',
    'ForwardWhimsy': 'B8E',
    'ForwardWithThee': '8C0',
    'FountainOfFire_7ED': '7ED',
    'FountainOfFire_B70': 'B70',
    'FourCrossedMemory': 'FD1',
    'FourSwipeMemory': 'FD4',
    'FourfoldComeRuin': 'E6F',
    'FourfoldFanDance': 'A8B',
    'FourthBrand': 'CC7',
    'FourthChakra': '31C',
    'FourthFlame': 'CCB',
    'FourthInLine': 'D7B',
    'Fracture': 'F4',
    'FracturedMettle': 'FC3',
    'Frazzle': 'CA9',
    'Freecure': '9B',
    'FreezingBrand': '851',
    'FreezingCounter': '3B6',
    'FreezingUp_9EC': '9EC',
    'FreezingUp_DC3': 'DC3',
    'Freezing_8CB': '8CB',
    'Freezing_B53': 'B53',
    'Frenzied': '278',
    'FreshPerspective': '94B',
    'FrontUnseen_A54': 'A54',
    'FrontUnseen_E8E': 'E8E',
    'FrontalBlasterCharge': 'D8C',
    'FrontlineForte': 'C45',
    'FrontlineMarch': 'C43',
    'FrontlinersForte': 'C44',
    'FrontlinersMarch': 'C42',
    'FrostBlade': '20E',
    'FrostBow': '210',
    'FrostBrand': '20F',
    'Frostbite_10C': '10C',
    'Frostbite_11D': '11D',
    'Frostbite_217': '217',
    'Frostbite_25D': '25D',
    'Frostbite_6FC': '6FC',
    'Frostbite_823': '823',
    'Frostbite_B65': 'B65',
    'Frostbite_B82': 'B82',
    'Frostbite_BFB': 'BFB',
    'Frostbite_BFC': 'BFC',
    'FrownyFace': 'ACC',
    'Frozen_25E': '25E',
    'Frozen_CD6': 'CD6',
    'Fugetsu': '512',
    'Fuka': '513',
    'FullGrown_180': '180',
    'FullGrown_187': '187',
    'FullGrown_ECA': 'ECA',
    'FullMetalMachinist': 'F1A',
    'FullMoon': '5FF',
    'FullSwing': '7B9',
    'FullyAnalyzed': '935',
    'FullyEnlarged_7B8': '7B8',
    'FullyEnlarged_8E9': '8E9',
    'FuriousWelt': 'D9C',
    'FurtherRuin_112F': '112F',
    'FurtherRuin_4BC': '4BC',
    'FurtherRuin_A8D': 'A8D',
    'Fury': 'EDD',
    'FurysBolt': '8B7',
    'Fusefield': 'CD9',
    'GadgetResistance_3CD': '3CD',
    'GadgetResistance_3D9': '3D9',
    'GaleEnforcer': '74D',
    'GallowsOiled': 'B28',
    'Galvanize_129': '129',
    'Galvanize_533': '533',
    'Galvanize_C0F': 'C0F',
    'Garrote': '1CF',
    'GarroteTwist': '1CE',
    'GarudasFavor': 'AA5',
    'GatherersBounty': 'A6B',
    'GatherersGrace': '2E',
    'GatheringFortuneUp': 'DC',
    'GatheringFortuneUpIi': '505',
    'GatheringFortuneUpIiLimited': '4EE',
    'GatheringFortuneUpLimited': '2F3',
    'GatheringRateUp': 'DA',
    'GatheringRateUpLimited': '2F2',
    'GatheringYieldUp': 'DB',
    'GatheringYieldUpIi': '506',
    'GatheringYieldUpLimited': '2F4',
    'GaussBarrel': '35A',
    'Gelatinous': '9EF',
    'GhostlyGuise_102B': '102B',
    'GhostlyGuise_F6D': 'F6D',
    'GiantDominance': '4E0',
    'GiftOfTheLand': 'A6A',
    'GiftOfTheLandIi': '2F7',
    'GildedFate': 'CDF',
    'GlassyEyed': 'DB7',
    'Gloam': '1DC',
    'GlossalResistanceDown': 'CF7',
    'Glossomorph_CF2': 'CF2',
    'Glossomorph_CFA': 'CFA',
    'Glossomorph_D48': 'D48',
    'GlovesOff': 'D82',
    'GloweringDark': 'EB5',
    'GnashingWolf': 'B93',
    'Goad': '1EF',
    'GoblixerGrumblygut': '3EA',
    'GoblixerOvergulp': '3E9',
    'Gobskin': '842',
    'GokaMekkyaku': 'C70',
    'GoldLung': '12E',
    'GoldSaucerVipCard': '437',
    'Goldbile': '127',
    'GoringBlade': '2D5',
    'GoringBladeReady': 'F07',
    'GraceOfLight': '8D6',
    'GradualPetrification_54F': '54F',
    'GradualPetrification_65C': '65C',
    'GradualZombification': '415',
    'GrandImpactReady': 'F25',
    'GravitationalAnomaly_EBA': 'EBA',
    'GravitationalAnomaly_EE6': 'EE6',
    'GravityFlip': '54D',
    'GreasedLightning': '6F',
    'GreasedLightningIi': '70',
    'GreasedLightningIii': '71',
    'GreatNebula': 'EFE',
    'GreatStrides': 'FE',
    'GreatestCurse': 'EF1',
    'Greenwrath': '144',
    'GrimhuntersVenom': 'E41',
    'GrimskinsVenom': 'E42',
    'GripOfDespair': 'BB1',
    'Grit_2E7': '2E7',
    'Grit_575': '575',
    'Grounded': '588',
    'GroupOriented': '698',
    'GrowingConception': 'D0E',
    'Growing_17F': '17F',
    'Growing_186': '186',
    'Grudge': '625',
    'Guard_BEE': 'BEE',
    'Guard_E59': 'E59',
    'Guardian': 'EF5',
    'GuardianSpirit': '69C',
    'GuardiansAegis': '6D4',
    'GuardiansWill': 'EF6',
    'GuidedMissileKyriosIncoming_D60': 'D60',
    'GuidedMissileKyriosIncoming_DA7': 'DA7',
    'GuidedMissileKyriosIncoming_DA8': 'DA8',
    'GuidedMissileKyriosIncoming_DA9': 'DA9',
    'Guise': 'A13',
    'Gullstorm': 'A08',
    'Gungnir': '141',
    'GunmetalSoul': '78B',
    'Haima_A34': 'A34',
    'Haima_B35': 'B35',
    'Haima_C26': 'C26',
    'Haimatinon_A52': 'A52',
    'Haimatinon_B36': 'B36',
    'Haimatinon_C27': 'C27',
    'HalfAsleep': 'BCE',
    'HallowedGround_516': '516',
    'HallowedGround_52': '52',
    'HammerTime': 'E60',
    'HardMarked': '2B6',
    'Hardcore': 'BB2',
    'HardenedScales': '1000',
    'Harmonized': '846',
    'HarmonyOfBody': 'A9B',
    'HarmonyOfMind': 'A9C',
    'HarmonyOfSpirit': 'A9A',
    'Harvest': '252',
    'Haste_1025': '1025',
    'Haste_14A': '14A',
    'Haste_1AC': '1AC',
    'Haste_1E0': '1E0',
    'Haste_28B': '28B',
    'Haste_443': '443',
    'Haste_45C': '45C',
    'Haste_5F3': '5F3',
    'Haste_7AA': '7AA',
    'Haste_8': '8',
    'Haste_94A': '94A',
    'Haste_E2': 'E2',
    'HastiludeHeartened': '92F',
    'Hastilude_797': '797',
    'Hastilude_92E': '92E',
    'HatedOfEmbers': '8BC',
    'HatedOfFrost': '8D4',
    'HatedOfLevin': '8C5',
    'HatedOfTheVortex': '8BB',
    'HatedOfTheWyrm': '8D5',
    'Haunt_606': '606',
    'Haunt_607': '607',
    'HawksEye_7B': '7B',
    'HawksEye_F15': 'F15',
    'HeadInTheClouds_9A7': '9A7',
    'HeadInTheClouds_9A8': '9A8',
    'HeadOverHeels_F4E': 'F4E',
    'HeadOverHeels_F54': 'F54',
    'Headache': '3E3',
    'Headwind': '642',
    'HealingMagicDown_1A6': '1A6',
    'HealingMagicDown_2B9': '2B9',
    'HealingMagicDown_82D': '82D',
    'HealingPotencyDown_24': '24',
    'HealingPotencyDown_3A5': '3A5',
    'HealingPotencyDown_427': '427',
    'HealingPotencyUp_23': '23',
    'HealingPotencyUp_3BB': '3BB',
    'HealingPotencyUp_44B': '44B',
    'HeartAndSoul': 'A69',
    'HeartOfCorundum_10C7': '10C7',
    'HeartOfCorundum_A7B': 'A7B',
    'HeartOfDragon': '434',
    'HeartOfLight_72F': '72F',
    'HeartOfLight_7D0': '7D0',
    'HeartOfMan_433': '433',
    'HeartOfMan_ABA': 'ABA',
    'HeartOfStone': '730',
    'HeartOfTheMountain': '148',
    'HeartOfTheRroneek': 'F6F',
    'HeartOfTural': 'F72',
    'Heartless': '613',
    'Heat': 'C4C',
    'HeatWave': 'EAA',
    'HeatedUp_702': '702',
    'HeatedUp_703': '703',
    'Heatstroke': '102D',
    'HeavenlyShield': '6C7',
    'Heavensent': 'C68',
    'HeavensflameSoul': 'DFA',
    'HeavyFeet': '2C5',
    'HeavyMedal_426': '426',
    'HeavyMedal_5DB': '5DB',
    'HeavyMedal_5DC': '5DC',
    'HeavyMedal_5DD': '5DD',
    'HeavyMedal_5DE': '5DE',
    'HeavyResistance': '546',
    'HeavySoulSnare': 'DDC',
    'HeavyThrust': '73',
    'Heavy_10F5': '10F5',
    'Heavy_276': '276',
    'Heavy_453': '453',
    'Heavy_475': '475',
    'Heavy_540': '540',
    'Heavy_63B': '63B',
    'Heavy_704': '704',
    'Heavy_833': '833',
    'Heavy_86E': '86E',
    'Heavy_957': '957',
    'Heavy_9F7': '9F7',
    'Heavy_C5F': 'C5F',
    'Heavy_D90': 'D90',
    'Heavy_D91': 'D91',
    'Heavy_E': 'E',
    'Heavy_F0': 'F0',
    'HeightenedVisibility': '397',
    'HeliosConjunction': 'F36',
    'HellishConduit': '74B',
    'HelloDistantWorld': 'D73',
    'HelloNearWorld': 'D72',
    'HellsIngress': 'C87',
    'HelpingHand': '170',
    'Herbsona': '9C9',
    'HeroesFantasia': 'C49',
    'HerossMantle': 'B3C',
    'Hidden_266': '266',
    'Hidden_267': '267',
    'Hidden_454': '454',
    'Hidden_524': '524',
    'Hidden_6A9': '6A9',
    'Hide': '7A0',
    'Higanbana_4CC': '4CC',
    'Higanbana_527': '527',
    'HighAndMighty': '1D5',
    'HighArithmeticks': '3FE',
    'HighJumpTarget': 'AC3',
    'HighMorale': '93D',
    'HighPoweredSniperCannonFodder': 'D62',
    'HighThunder_F1F': 'F1F',
    'HighThunder_F20': 'F20',
    'HighWire_3F4': '3F4',
    'HighWire_F79': 'F79',
    'Higi': 'F0A',
    'HindsbaneVenom': 'E40',
    'HindstungVenom': 'E3F',
    'Holmgang_199': '199',
    'Holmgang_518': '518',
    'Holmgang_519': '519',
    'Holmgang_58': '58',
    'Holos': 'BBB',
    'Holosakos': 'D25',
    'HolyBonds_CED': 'CED',
    'HolyBonds_D46': 'D46',
    'HolyPurgation_CEF': 'CEF',
    'HolyPurgation_D42': 'D42',
    'HolyPurgation_D43': 'D43',
    'HolyPurgation_D44': 'D44',
    'HolySheltron_A72': 'A72',
    'HolySheltron_BD2': 'BD2',
    'HonedEye': 'E1E',
    'HonedReavers': 'EBC',
    'HonedSteel': 'E58',
    'HoneyBeeMine': 'F56',
    'HoneyGlazed': '1BE',
    'HoneyedCharms': 'F61',
    'HoningDance': 'C5A',
    'HoningOvation': 'C5C',
    'HonorsAccord': '1026',
    'HoofingIt_6F2': '6F2',
    'HoofingIt_799': '799',
    'HoofingIt_E24': 'E24',
    'HopelessDevotion_F4F': 'F4F',
    'HopelessDevotion_F55': 'F55',
    'Horoscope': '762',
    'HoroscopeHelios': '763',
    'HorridRoar': 'C6B',
    'HotBlade1': '8F9',
    'HotBlade2': '8FA',
    'HotBrand1': '8E5',
    'HotBrand2': '8F3',
    'HotShot': '357',
    'HotSpell': 'AB4',
    'HouseArrest': '463',
    'Hover_19C': '19C',
    'Hover_5EB': '5EB',
    'Hover_956': '956',
    'HpBoost1': '616',
    'HpBoost2': '617',
    'HpBoost3': '618',
    'HpBoost4': '619',
    'HpBoost_15': '15',
    'HpBoost_1E3': '1E3',
    'HpBoost_24A': '24A',
    'HpBoost_6E3': '6E3',
    'HpBoost_848': '848',
    'HpMpBoost_28C': '28C',
    'HpMpBoost_445': '445',
    'HpPenalty_16': '16',
    'HpPenalty_1C8': '1C8',
    'HpPenalty_441': '441',
    'HpPenalty_567': '567',
    'HpPenalty_615': '615',
    'HpPenalty_9D9': '9D9',
    'HpPenalty_B9B': 'B9B',
    'HpPenalty_D49': 'D49',
    'HpRecoveryDown_B24': 'B24',
    'HpRecoveryDown_BA1': 'BA1',
    'HpRecoveryDown_BA2': 'BA2',
    'HpRecoveryDown_F7F': 'F7F',
    'Hubris': 'A2B',
    'HundredFists_123': '123',
    'HundredFists_63A': '63A',
    'HuntersInstinct_1018': '1018',
    'HuntersInstinct_E54': 'E54',
    'HuntersVenom': 'E49',
    'Huton_1F4': '1F4',
    'Huton_C72': 'C72',
    'Huton_E20': 'E20',
    'HydrobulletTarget': 'EA4',
    'HydrofallTarget': 'EA3',
    'Hypercharge': '2B0',
    'Hypercharged': 'F18',
    'HyperchargedCondensation': '951',
    'Hyperphantasia': 'E68',
    'Hypervelocity': 'BE7',
    'Hysteria_128': '128',
    'Hysteria_BCF': 'BCF',
    'IceAlchemy': 'AC0',
    'IceCharge': '147',
    'IceConvergence': '4FC',
    'IceLoaded': 'E2B',
    'IceResistanceDown': '6A6',
    'IceResistanceDownIi_9A1': '9A1',
    'IceResistanceDownIi_B57': 'B57',
    'IceResistanceUp_20D': '20D',
    'IceResistanceUp_6E1': '6E1',
    'IceSpikes_51B': '51B',
    'IceSpikes_6B8': '6B8',
    'IceSpikes_9E0': '9E0',
    'IceSpikes_C6': 'C6',
    'Icebitten': '1D1',
    'IdealHost': 'F41',
    'IdenticalCast': '70C',
    'IdenticalGig': '70D',
    'IfritsFavor': 'AA4',
    'ImbuedSaber': '949',
    'Immaterialized': '55D',
    'ImmobileSuit': 'A12',
    'ImmortalConception': 'D10',
    'ImmortalSacrifice_A20': 'A20',
    'ImmortalSacrifice_C84': 'C84',
    'ImmortalSpark': 'D0F',
    'Imp_265': '265',
    'Imp_44F': '44F',
    'Imp_46E': '46E',
    'Imp_54C': '54C',
    'ImpactImminent': 'F2A',
    'Impactful': '557',
    'Impassioned': 'EAF',
    'ImperfectionAlpha': 'D02',
    'ImperfectionBeta': 'D03',
    'ImperfectionGamma': 'D04',
    'Impervious': '455',
    'ImposingFigure': 'E1F',
    'Improvisation_723': '723',
    'Improvisation_724': '724',
    'Improvisation_A87': 'A87',
    'ImprovisedFinish': 'A89',
    'InControl': '165',
    'InCostume': '8E4',
    'InEvent_4F4': '4F4',
    'InEvent_791': '791',
    'InEvent_B23': 'B23',
    'InEvent_B75': 'B75',
    'InEvent_BB7': 'BB7',
    'InTheHeadlights': '242',
    'InTheLineOfFire': '23A',
    'InTraining': '1057',
    'Incapacitated': 'B08',
    'IncapacitatingSoulSnare': 'DDD',
    'IncendiaryBurns': '9C3',
    'IncenseL': '679',
    'Inconceivable': 'D08',
    'Incorporeal': 'AA9',
    'Incurable_5D0': '5D0',
    'Incurable_95E': '95E',
    'IndependentTactics': '59F',
    'IndomitableSpirit': '60B',
    'InefficientHooking': '2FC',
    'InescapableCompanionship': 'AB8',
    'InescapableLoneliness': 'AB9',
    'Infatuated_F4D': 'F4D',
    'Infatuated_F53': 'F53',
    'InfernalFetters': '179',
    'InfernalShroud': 'EBB',
    'Inferno': '13A',
    'InfiniteAnguish_487': '487',
    'InfiniteAnguish_48A': '48A',
    'InfiniteFire': '477',
    'InfiniteIce': '478',
    'InfiniteLimit_67B': '67B',
    'InfiniteLimit_D7A': 'D7A',
    'Infirmity_1F2': '1F2',
    'Infirmity_275': '275',
    'Infirmity_9D8': '9D8',
    'Infirmity_AC': 'AC',
    'Infirmity_F7D': 'F7D',
    'Infuriated': '61',
    'Ingenuity': 'FF',
    'IngenuityIi': '100',
    'InitialPreparations': '48D',
    'Ink': '1E4',
    'InnerBeast_19B': '19B',
    'InnerBeast_576': '576',
    'InnerChaos': '81D',
    'InnerChaosReady': '10BC',
    'InnerDragon': '132',
    'InnerQuiet': 'FB',
    'InnerRelease_499': '499',
    'InnerRelease_517': '517',
    'InnerStrength': 'A67',
    'Innovation_103': '103',
    'Innovation_88D': '88D',
    'Inscribed': 'E94',
    'Inspiration': 'E69',
    'Intemperate': '8E3',
    'IntensifiedWailing': 'DEC',
    'InternalRelease': '64',
    'Intersection_761': '761',
    'Intersection_FC8': 'FC8',
    'Intervention_496': '496',
    'Intervention_7E4': '7E4',
    'InugamisFavor': '631',
    'InverseMagicks': 'D15',
    'InverseOperations': 'FA9',
    'Invigoration': '263',
    'Invincibility_113A': '113A',
    'Invincibility_145': '145',
    'Invincibility_18A': '18A',
    'Invincibility_211': '211',
    'Invincibility_290': '290',
    'Invincibility_29F': '29F',
    'Invincibility_307': '307',
    'Invincibility_308': '308',
    'Invincibility_37F': '37F',
    'Invincibility_3C9': '3C9',
    'Invincibility_3D5': '3D5',
    'Invincibility_622': '622',
    'Invincibility_6A1': '6A1',
    'Invincibility_725': '725',
    'InviolateWinds_CEC': 'CEC',
    'InviolateWinds_D45': 'D45',
    'Invisible_268': '268',
    'Invisible_3EF': '3EF',
    'IrminHedge': 'B0B',
    'IronAir': '9BB',
    'IronCarrot': 'AF8',
    'IronWill_189': '189',
    'IronWill_4F': '4F',
    'IronWill_B1B': 'B1B',
    'IronsOfPurgatory': '8BD',
    'Irradiated': '269',
    'ItemPenalty': '446',
    'Jackpot': '386',
    'JealousAnaphylaxis': '8FE',
    'JestersAntics': '5CE',
    'JestersTruths': '5CF',
    'JugularRip': 'BE8',
    'JunctionDps': 'BE5',
    'JunctionHealer': 'BE6',
    'JunctionLoghrif': '9A6',
    'JunctionShiva': '9A4',
    'JunctionTank': 'BE4',
    'JunctionTitan': '9A5',
    'JustChilling': 'A2A',
    'KaeshiNamikiri': 'C80',
    'Kaiten_4CD': '4CD',
    'Kaiten_C81': 'C81',
    'Kakuremi': '523',
    'Kardia_A2C': 'A2C',
    'Kardia_B37': 'B37',
    'Kardion_A2D': 'A2D',
    'Kardion_B38': 'B38',
    'Kassatsu': '1F1',
    'Katabasis': 'A6E',
    'KeenEdge': '479',
    'KeenFlurry': '72',
    'Kerachole': 'A3A',
    'Kerakeia': 'B7A',
    'KillCommand': '65D',
    'KingOfTheSkies': '5EE',
    'KissOfTheViper': '1EA',
    'KissOfTheWasp': '1E9',
    'Klymenos': 'A6D',
    'KnightsBenediction': 'A74',
    'KnightsResolve': 'A73',
    'KnockbackPenalty_448': '448',
    'KnockbackPenalty_54B': '54B',
    'KnockbackPenalty_5E8': '5E8',
    'KomainusFavor': '630',
    'Krasis': 'A3E',
    'KunaisBane': 'F42',
    'Kuzushi': 'C82',
    'Kyoshin': '560',
    'LadyOfCrownsDrawn': '807',
    'LadyOfCrowns_10E8': '10E8',
    'LadyOfCrowns_5AC': '5AC',
    'LadyOfCrowns_755': '755',
    'Lamed': '279',
    'LanceCharge_748': '748',
    'LanceCharge_CBA': 'CBA',
    'LandWaker': '35F',
    'Landborne_64A': '64A',
    'Landborne_69B': '69B',
    'Languishing': '1C7',
    'Largesse_4B7': '4B7',
    'Largesse_88C': '88C',
    'LastBastion': 'C4',
    'LastDanceReady': 'F1B',
    'LastKiss': '5BF',
    'LastVigil_B0D': 'B0D',
    'LastVigil_B0E': 'B0E',
    'LatentDefect_686': '686',
    'LatentDefect_DC7': 'DC7',
    'LatentPerformanceDefect': 'D6B',
    'LatentSynchronizationBug': 'D6A',
    'LayOfTheLand': 'EA',
    'LayOfTheLandIi': 'F3',
    'LeadShot': '356',
    'Leaden': '43',
    'LeadenFist': '745',
    'LeftArmOperational': '46B',
    'LeftArmPrimed': 'A10',
    'LeftArmReassembly': '468',
    'LeftBlasterCharge': 'D8E',
    'LeftEye_4A0': '4A0',
    'LeftEye_5AE': '5AE',
    'LeftFace_50F': '50F',
    'LeftFace_7A8': '7A8',
    'LeftFace_873': '873',
    'LeftFace_94F': '94F',
    'LeftFace_DD4': 'DD4',
    'LeftFace_E74': 'E74',
    'LeftFace_E85': 'E85',
    'LeftMarkOfTheTides': 'AD4',
    'LeftUnseen_6AC': '6AC',
    'LeftUnseen_E91': 'E91',
    'LeftWindup_FBD': 'FBD',
    'LeftWindup_FBF': 'FBF',
    'LeftWithThee': '8C2',
    'LeftwardBearing': 'B15',
    'LeftwardFracture': 'FC5',
    'LeftwardMemory': 'FD3',
    'LeftwardOmen_1037': '1037',
    'LeftwardOmen_103B': '103B',
    'LeftwardOmen_1143': '1143',
    'LeftwardOmen_1147': '1147',
    'LeftwardOmen_114C': '114C',
    'LeftwardOmen_114E': '114E',
    'LeftwardWhimsy': 'B19',
    'LegendaryResolve': '596',
    'LegsOfTheSpider': '3B2',
    'Lethargy_10ED': '10ED',
    'Lethargy_DA5': 'DA5',
    'LeveilleurDosisIii': 'A5A',
    'Levinskin': '788',
    'Levitate': 'F86',
    'Levitation_107B': '107B',
    'Levitation_556': '556',
    'Levitation_56E': '56E',
    'Levitation_C': 'C',
    'LeyLines': '2E1',
    'LifeDrain_111C': '111C',
    'LifeDrain_561': '561',
    'LifeOfTheDragon': 'C69',
    'LifeSiphon': '101B',
    'LifeSurge_74': '74',
    'LifeSurge_87F': '87F',
    'LifeSurge_CBB': 'CBB',
    'Liftoff_1119': '1119',
    'Liftoff_CBE': 'CBE',
    'LightBeyondDarkness_789': '789',
    'LightBeyondDarkness_970': '970',
    'LightInTheDark_636': '636',
    'LightInTheDark_770': '770',
    'LightInTheDark_894': '894',
    'LightMedal_5DF': '5DF',
    'LightMedal_5E0': '5E0',
    'LightMedal_5E1': '5E1',
    'LightMedal_5E2': '5E2',
    'LightOfAscalon': '3AF',
    'LightResistanceDownIi': '1044',
    'LightResistanceDown_8E6': '8E6',
    'LightResistanceDown_C3F': 'C3F',
    'Lightheaded_8CA': '8CA',
    'Lightheaded_9C5': '9C5',
    'LightningAspected': 'B03',
    'LightningChain': '435',
    'LightningCharge': '146',
    'LightningConvergence': '4FD',
    'LightningLoaded': 'E2C',
    'LightningResistanceDownIi_402': '402',
    'LightningResistanceDownIi_4EC': '4EC',
    'LightningResistanceDownIi_7B5': '7B5',
    'LightningResistanceDownIi_82F': '82F',
    'LightningResistanceDownIi_861': '861',
    'LightningResistanceDownIi_BB6': 'BB6',
    'LightningResistanceDown_240': '240',
    'LightningResistanceDown_382': '382',
    'LightningResistanceDown_943': '943',
    'LightningResistanceUp': '20B',
    'LightningRod': 'A0E',
    'LightningShot': '958',
    'LightsAccord': 'DE1',
    'LightsDiscord': 'DE3',
    'Lightspeed_349': '349',
    'Lightspeed_57B': '57B',
    'Lightsteeped': '8D1',
    'LimitBreaker': 'B39',
    'Limp': '572',
    'LingeringEchoes': 'CDC',
    'LiturgyOfTheBell': 'A95',
    'LiveBrazier': 'E17',
    'LiveCandle': 'E18',
    'LiveOffTheLand': '162',
    'LiveWire': '657',
    'LivingDead': '32A',
    'LlymlaensWard': 'E6',
    'LoadBearing': '4C0',
    'LocalCodeSmell_D70': 'D70',
    'LocalCodeSmell_DAF': 'DAF',
    'LocalRegression_688': '688',
    'LocalRegression_DC9': 'DC9',
    'LocalResonance': '67E',
    'LogosMinded': '652',
    'LohsDaih': '59D',
    'LoomingCrescendo': '6A3',
    'Looper_658': '658',
    'Looper_6A8': '6A8',
    'Looper_D80': 'D80',
    'LordOfCrownsDrawn': '806',
    'LordOfCrowns_10E9': '10E9',
    'LordOfCrowns_5AB': '5AB',
    'LordOfCrowns_754': '754',
    'LordUnshadowed': '10FF',
    'LostAethershield': '98B',
    'LostBanish': '924',
    'LostBloodRage': 'A06',
    'LostBravery': '925',
    'LostBubble': 'A03',
    'LostBurst': '9FE',
    'LostChainspell': 'A00',
    'LostDervish': '98C',
    'LostExcellence': 'A04',
    'LostFlareStar': '988',
    'LostFontOfMagic': '91C',
    'LostFontOfPower': '92A',
    'LostIncense': '934',
    'LostManawall': '929',
    'LostProtect': '91D',
    'LostProtectIi': 'A01',
    'LostRampage': '9FF',
    'LostReflect': '921',
    'LostRendArmor': '989',
    'LostShell': '91E',
    'LostShellIi': 'A02',
    'LostSpellforge': '922',
    'LostStealth': '920',
    'LostSteelsting': '923',
    'LostSwift': '91F',
    'LovelyPoison': 'F4B',
    'LovesTrueForm': '65E',
    'LowArithmeticks': '3FD',
    'LucidDreaming': '4B4',
    'LuckyCarrot': 'AF7',
    'LuminiferousAether': '34A',
    'LuminousAetheroplasm': '2C2',
    'LunarDefensive': '9FA',
    'LuwatenaPulse': 'EC9',
    'Lype': 'C30',
    'Macrocosmos_A9E': 'A9E',
    'Macrocosmos_C20': 'C20',
    'Macrocosmos_F95': 'F95',
    'MadeenPortrait': '1008',
    'MagesBallad_87': '87',
    'MagesBallad_88': '88',
    'MagesBallad_8A9': '8A9',
    'MagicBurst': '674',
    'MagicDamageDown_3A': '3A',
    'MagicDamageDown_79C': '79C',
    'MagicDamageUp_39': '39',
    'MagicDamageUp_3FB': '3FB',
    'MagicDamageUp_484': '484',
    'MagicDamageUp_9FC': '9FC',
    'MagicDamageUp_AF9': 'AF9',
    'MagicDamageUp_E7B': 'E7B',
    'MagicDefenseDown': '26',
    'MagicDefenseUp': '25',
    'MagicInfusion': '6FF',
    'MagicNumber': 'DCC',
    'MagicResistance_3AE': '3AE',
    'MagicResistance_E25': 'E25',
    'MagicVulnerabilityDown_14B': '14B',
    'MagicVulnerabilityDown_246': '246',
    'MagicVulnerabilityDown_258': '258',
    'MagicVulnerabilityDown_32C': '32C',
    'MagicVulnerabilityDown_3B': '3B',
    'MagicVulnerabilityDown_E37': 'E37',
    'MagicVulnerabilityUp_1EE': '1EE',
    'MagicVulnerabilityUp_292': '292',
    'MagicVulnerabilityUp_3C': '3C',
    'MagicVulnerabilityUp_472': '472',
    'MagicVulnerabilityUp_82B': '82B',
    'MagicVulnerabilityUp_B7D': 'B7D',
    'MagicVulnerabilityUp_D56': 'D56',
    'MagicVulnerabilityUp_DBC': 'DBC',
    'MagicVulnerabilityUp_DD0': 'DD0',
    'MagicalAversion': '942',
    'MagickBarrier_A93': 'A93',
    'MagickBarrier_CA8': 'CA8',
    'MagickedSwordplay': 'F23',
    'MagitekField_5A4': '5A4',
    'MagitekField_876': '876',
    'MagitekLevitation': '551',
    'MagneticLevitation_414': '414',
    'MagneticLevitation_610': '610',
    'MagneticLysis_60E': '60E',
    'MagneticLysis_60F': '60F',
    'MagossMantle': 'B3D',
    'Maim': '55',
    'MainHullOperational': '469',
    'MainHullReassembly': '466',
    'MakersMark': '36E',
    'MakeshiftBait': 'ADB',
    'Malady': 'BF',
    'Malodorous': '6B3',
    'ManaCapacitor': '2B1',
    'ManaCharge': '5CA',
    'ManaHypersensitivity': '59A',
    'ManaMedication': 'F78',
    'ManaModulation': '11A',
    'Manafication': '7B3',
    'Manawall': 'A9',
    'Manaward_7C5': '7C5',
    'Manaward_A8': 'A8',
    'MandervilleSprint_D92': 'D92',
    'MandervilleSprint_DBB': 'DBB',
    'Manipulation_102': '102',
    'Manipulation_48C': '48C',
    'MantleOfTheWhorl': '1DD',
    'Mantra': '66',
    'ManusyaBerserk': 'A5B',
    'ManusyaConfuse': 'A5C',
    'ManusyaStop': 'A5D',
    'MarchingOrders': '936',
    'MarchingOrdersAFamiliarFace': 'A19',
    'MarchingOrdersFeelingTheBurn': 'A14',
    'MarchingOrdersHereComesTheCavalry': 'A17',
    'MarchingOrdersKillItWithFire': '938',
    'MarchingOrdersMetalFoxChaos': '93C',
    'MarchingOrdersNeverCryWolf': 'A16',
    'MarchingOrdersOnSerpentsWings': 'A15',
    'MarchingOrdersRiseOfTheRobots': '93B',
    'MarchingOrdersTheFinalFurlong': '93A',
    'MarchingOrdersTheHuntForRedChoctober': '939',
    'MarchingOrdersVigilForTheLost': '937',
    'MarchingOrdersWornToAShadow': 'A18',
    'MarkOfEasyPrey': 'ACF',
    'MarkOfMortality_1114': '1114',
    'MarkOfMortality_701': '701',
    'MarkOfMortality_945': '945',
    'MarkOfTheDepths': 'AD1',
    'MarkOfTheHarvest': 'DA0',
    'MarkOfTheTides': 'AD0',
    'MarkUp': '19D',
    'MarkedForCulling': '3E2',
    'MarkedForDamageDown': '2B4',
    'MarkedForHealingMagicDown': '2B5',
    'MarkedForVulnerabilityUp': '2B3',
    'MawMotif': '100C',
    'MawSketch': '101F',
    'MeatAndMead': '168',
    'MeatShield_845': '845',
    'MeatShield_8DB': '8DB',
    'MeatilyShielded': '844',
    'MedicaIi': '96',
    'MedicaIiOfTheSeventhDawn': 'CE4',
    'MedicaIiiOfTheSeventhDawn': 'F93',
    'MedicaIii_F28': 'F28',
    'MedicaIii_F92': 'F92',
    'Medicated': '31',
    'Meditate': '4CF',
    'Meditation_749': '749',
    'Meditation_880': '880',
    'MeditativeBrotherhood_49E': '49E',
    'MeditativeBrotherhood_87D': '87D',
    'MeikyoShisui_4D1': '4D1',
    'MeikyoShisui_528': '528',
    'Meisui_A81': 'A81',
    'Meisui_C75': 'C75',
    'Memorable': 'A05',
    'MemoryDegradation': '659',
    'MemoryLoss': '65A',
    'MenphinasWard': 'E4',
    'MercifulAir': '9B9',
    'Mesotes_C2E': 'C2E',
    'Mesotes_C2F': 'C2F',
    'Meteodrive': 'C66',
    'Miasma': 'B4',
    'MiasmaIi': 'BC',
    'MiasmaIii_4BF': '4BF',
    'MiasmaIii_52F': '52F',
    'MidGlitch': 'D63',
    'MightOfCrags': 'BC2',
    'MightOfTheInferno': 'BC3',
    'MightOfTheVortex': 'BC1',
    'MightyGuard': '6B7',
    'MightyStrikes': '1066',
    'Mimic': '420',
    'Mimicry': '992',
    'Mini': 'DBE',
    'Minimum_1B6': '1B6',
    'Minimum_1B8': '1B8',
    'Minimum_9C8': '9C8',
    'MiracleOfNature': 'C0D',
    'MirroredIncantation': 'B20',
    'MirroredSmoke': 'DC0',
    'Miscast': 'AF3',
    'Misery': '1AE',
    'MissingLink': 'E03',
    'MistyVeil': '1A3',
    'ModestLure': 'F85',
    'Modification': '149',
    'MogdarkResistanceDown': '1D8',
    'MoglightResistanceDown': '1D7',
    'MonochromeTones': 'E6B',
    'Monomachy_4D9': '4D9',
    'Monomachy_4DA': '4DA',
    'Monomachy_CAA': 'CAA',
    'MonsterResistance_3CB': '3CB',
    'MonsterResistance_3D7': '3D7',
    'MonsterVulnerability': '3CF',
    'Monstrous': '726',
    'MooglePortrait': '1007',
    'Moonlit': '602',
    'Moonseal': '470',
    'Moonshadowed': '603',
    'MoonsporeSpurred': 'DB8',
    'MortalAtonement': 'B51',
    'MortalFlame_858': '858',
    'MortalFlame_E3B': 'E3B',
    'MortalPowderMark_89B': '89B',
    'MortalPowderMark_9B7': '9B7',
    'MortalPowderMark_9DF': '9DF',
    'MortalVow': 'B50',
    'Mortared': 'C55',
    'Mounted_58C': '58C',
    'Mounted_5F0': '5F0',
    'MousasMantle': 'B3E',
    'MovementEdict2Squares_9AA': '9AA',
    'MovementEdict2Squares_9AD': '9AD',
    'MovementEdict3Squares_9AB': '9AB',
    'MovementEdict3Squares_9AE': '9AE',
    'MovementEdict4Squares_9AC': '9AC',
    'MovementEdict4Squares_9AF': '9AF',
    'MovementSpeedUp_29D': '29D',
    'MovementSpeedUp_458': '458',
    'MovementSpeedUp_ECF': 'ECF',
    'MpBoost': '17',
    'MpPenalty': '18',
    'Muddy': '646',
    'Mudra': '1F0',
    'Mug': 'C6F',
    'Multisplice': 'D12',
    'Mummification_25B': '25B',
    'Mummification_C13': 'C13',
    'MuscleActivator': '2B2',
    'MuscleMemory': '88F',
    'MustardBomb': 'FA7',
    'MustardBombproof': 'FA8',
    'Mutation_62E': '62E',
    'Mutation_634': '634',
    'Mutation_635': '635',
    'Mutation_63E': '63E',
    'Mutation_6A2': '6A2',
    'Mutation_6A4': '6A4',
    'Mutilation': '1EC',
    'NaldthalsWard': 'E5',
    'NameOfTheElements_367': '367',
    'NameOfTheElements_77C': '77C',
    'Nameless': '36D',
    'Nanoparticles': '2A1',
    'NascentChaos': '769',
    'NascentFlash_741': '741',
    'NascentFlash_80D': '80D',
    'NascentFlash_8B3': '8B3',
    'NascentGlint_742': '742',
    'NascentGlint_80E': '80E',
    'NastrondReady_1134': '1134',
    'NastrondReady_F04': 'F04',
    'NastySurprise': '9F5',
    'NaturalAlignment': 'D54',
    'NaturesBounty': '493',
    'NaturesMinne': '4B2',
    'Nausea': '954',
    'NeapTide': 'D01',
    'Nebula_72A': '72A',
    'Nebula_BEB': 'BEB',
    'Necrosis': 'B95',
    'Nectar': '39F',
    'NeedleVeil': 'EA7',
    'NegativeCharge_2BB': '2BB',
    'NegativeCharge_D59': 'D59',
    'NegativeCharge_D5B': 'D5B',
    'NegativeCharge_FE8': 'FE8',
    'Negatron': 'FA1',
    'Neurolink_158': '158',
    'Neurolink_273': '273',
    'Neurolink_B12': 'B12',
    'NeutralSect_764': '764',
    'NeutralSect_781': '781',
    'NeutralSect_7FC': '7FC',
    'NeutralSect_F94': 'F94',
    'NewMoon': '600',
    'Nightmare': '1A7',
    'NineLives': 'F5B',
    'NoMercy_727': '727',
    'NoMercy_BE2': 'BE2',
    'Noctoshield': '1AA',
    'NocturnalBalance': '7FB',
    'NocturnalBenefic': 'C1C',
    'NocturnalField_345': '345',
    'NocturnalField_887': '887',
    'NocturnalOpposition_758': '758',
    'NocturnalOpposition_817': '817',
    'NocturnalSect': '348',
    'NohurtsGoblixer': '3F0',
    'NophicasWard': 'E0',
    'Normal': '89C',
    'NormalStance': '1CB',
    'NoseForBattle': '486',
    'NoxiousGnash_1003': '1003',
    'NoxiousGnash_E53': 'E53',
    'Nuisance': 'F6E',
    'NullBlack': 'A4B',
    'NullWhite': 'A4A',
    'NumbingCurrent': 'F8C',
    'NymianPlague': '311',
    'OasalBalm_EA8': 'EA8',
    'OasalBalm_EA9': 'EA9',
    'Obfuscated_450': '450',
    'Obfuscated_452': '452',
    'Oblatio': 'F11',
    'Oblation': 'A7A',
    'Odder': '60A',
    'OdderIncarnation_E11': 'E11',
    'OdderIncarnation_E12': 'E12',
    'OdderIncarnation_E13': 'E13',
    'OdderIncarnation_E14': 'E14',
    'OdderPrayer': 'E16',
    'OffBalance_428': '428',
    'OffBalance_569': '569',
    'OffGuard': '6B5',
    'OffenseKit': '3E0',
    'OffensiveOptimization': '2A9',
    'OffensiveTactics': '5A0',
    'OgiNamikiri': 'C7F',
    'OgiNamikiriReady': 'B8F',
    'Oil': '86D',
    'Old': '4EB',
    'OmegaF': '68B',
    'OmegaM_68A': '68A',
    'OmegaM_D7E': 'D7E',
    'Omega_67A': '67A',
    'Omega_D79': 'D79',
    'OminousWind': '5C9',
    'OnARoll': 'F9C',
    'OnBalance': 'BC7',
    'OnFire': '9F3',
    'OneMind': '9F9',
    'OneTwoMemory': 'FD0',
    'Onslaught': 'BD5',
    'OpoOpoForm': '6B',
    'Opposition': '757',
    'Orogeny': 'CB8',
    'OutOfBody': '30B',
    'OutOfControl_965': '965',
    'OutOfControl_CF4': 'CF4',
    'OutOfControl_D22': 'D22',
    'OutOfTheAction_272': '272',
    'OutOfTheAction_3AB': '3AB',
    'OutOfTheAction_459': '459',
    'OutOfTheAction_504': '504',
    'OutOfTheAction_5B6': '5B6',
    'OutOfTheAction_83D': '83D',
    'Overcure': '9C',
    'OverflowCodeSmell': 'D6D',
    'OverflowDebugger_684': '684',
    'OverflowDebugger_D67': 'D67',
    'Overheated_A80': 'A80',
    'Overheated_C4D': 'C4D',
    'Overload': 'CF0',
    'Overmedicated': 'F7A',
    'OversampledWaveCannonLoading_D7C': 'D7C',
    'OversampledWaveCannonLoading_D7D': 'D7D',
    'Owlet': 'DAE',
    'Pacification_26C': '26C',
    'Pacification_6': '6',
    'Pacification_D5': 'D5',
    'PacketFilterF_67D': '67D',
    'PacketFilterF_DAC': 'DAC',
    'PacketFilterM_67C': '67C',
    'PacketFilterM_DAB': 'DAB',
    'Pain': '955',
    'Palisade': '4AC',
    'PallOfDarkness': '93F',
    'PallOfGrief': '8A3',
    'PallOfRage': '8A2',
    'Panhaima': 'A35',
    'Panhaimatinon': 'A53',
    'Panic': '8DF',
    'ParadiseRegained': '7B6',
    'Paradox': 'C97',
    'Paralysis_11': '11',
    'Paralysis_1E2': '1E2',
    'Paralysis_3DC': '3DC',
    'Paralysis_D8': 'D8',
    'Paralysis_D87': 'D87',
    'Paralysis_F7B': 'F7B',
    'Partygoer': 'B01',
    'PassageOfArms': '497',
    'Passenger': '45E',
    'PayingThePiper': '691',
    'PeculiarLight': '6B9',
    'Peloton_4AF': '4AF',
    'Peloton_7C1': '7C1',
    'Penance_D93': 'D93',
    'Penance_D95': 'D95',
    'PenitentsShackles': 'D94',
    'PerfectBalance': '6E',
    'PerfectDeception': '772',
    'PerfectioOcculta': 'F13',
    'PerfectioParata_10D5': '10D5',
    'PerfectioParata_F14': 'F14',
    'PerfectionAlpha': 'D05',
    'PerfectionBeta': 'D06',
    'PerfectionGamma': 'D07',
    'PerformanceCodeSmell': 'D6F',
    'PerformanceDebugger': 'D69',
    'PerpetualConflagration': '101A',
    'PetrificationResistance': '1C2',
    'Petrification_1': '1',
    'Petrification_262': '262',
    'Petrification_5E7': '5E7',
    'Petrification_BBF': 'BBF',
    'Phalanx': 'C8A',
    'Phantasmal': '76F',
    'PhantomDart': '7C2',
    'PhantomEdge': '9B8',
    'PhantomFlurry': '9C6',
    'PhantomKamaitachiReady': 'AA3',
    'PhilosophersCarrot': 'AF6',
    'Philosophia': 'F3A',
    'Phlebotomize': '77',
    'PhoenixsBlessing': '59C',
    'PhysicalAttenuation': '84B',
    'PhysicalAversion': '941',
    'PhysicalDamageDown_119': '119',
    'PhysicalDamageDown_18B': '18B',
    'PhysicalDamageDown_36': '36',
    'PhysicalDamageUp_35': '35',
    'PhysicalDamageUp_3F9': '3F9',
    'PhysicalDamageUp_3FA': '3FA',
    'PhysicalDamageUp_473': '473',
    'PhysicalDamageUp_81A': '81A',
    'PhysicalDamageUp_9FB': '9FB',
    'PhysicalField': '154',
    'PhysicalVulnerabilityDown_247': '247',
    'PhysicalVulnerabilityDown_259': '259',
    'PhysicalVulnerabilityDown_37': '37',
    'PhysicalVulnerabilityDown_383': '383',
    'PhysicalVulnerabilityDown_E36': 'E36',
    'PhysicalVulnerabilityUp_1042': '1042',
    'PhysicalVulnerabilityUp_1ED': '1ED',
    'PhysicalVulnerabilityUp_291': '291',
    'PhysicalVulnerabilityUp_2B7': '2B7',
    'PhysicalVulnerabilityUp_38': '38',
    'PhysicalVulnerabilityUp_3A6': '3A6',
    'PhysicalVulnerabilityUp_7E': '7E',
    'PhysicalVulnerabilityUp_82A': '82A',
    'PhysicalVulnerabilityUp_B7C': 'B7C',
    'PhysicalVulnerabilityUp_C8': 'C8',
    'PhysicalVulnerabilityUp_D57': 'D57',
    'Physis': 'A39',
    'PhysisIi': 'A3C',
    'PickClean': '709',
    'PiercingResistanceDownIi': '59B',
    'PiercingResistanceDown_334': '334',
    'PiercingResistanceDown_69E': '69E',
    'PiercingResistanceDown_C3B': 'C3B',
    'PiercingResistanceUp': '2D1',
    'Piggy': '50C',
    'Plagued': 'B4D',
    'PlanarImprisonment': 'A66',
    'PlentifulHarvest': 'C85',
    'Ploutonos': 'AE3',
    'Pneuma_A3F': 'A3F',
    'Pneuma_B34': 'B34',
    'PoisedForTwinblood': 'E52',
    'PoisedForTwinfang': 'E51',
    'Poison1': '113',
    'PoisonL': '672',
    'PoisonNPop': 'F5E',
    'PoisonResistanceDownIi': 'F5F',
    'PoisonResistanceUp': '280',
    'Poison_12': '12',
    'Poison_22F': '22F',
    'Poison_230': '230',
    'Poison_2AE': '2AE',
    'Poison_321': '321',
    'Poison_829': '829',
    'Poison_838': '838',
    'Poison_B40': 'B40',
    'Poison_D3E': 'D3E',
    'Poison_D47': 'D47',
    'Poison_D86': 'D86',
    'Polarizing': 'DE7',
    'Pollen_13': '13',
    'Pollen_5E3': '5E3',
    'Polyglot': 'C61',
    'PomMotif': '1009',
    'PomMuse': '100D',
    'PomSketch': '101C',
    'Pombination': '1D6',
    'PoppetResistance_3CC': '3CC',
    'PoppetResistance_3D8': '3D8',
    'PoppetVulnerability': '3D0',
    'PositiveCharge_2BA': '2BA',
    'PositiveCharge_D58': 'D58',
    'PositiveCharge_D5A': 'D5A',
    'PositiveCharge_FE7': 'FE7',
    'Positron': 'FA0',
    'PotentAcid': '1BF',
    'PowderBarrel': 'BE3',
    'PowderMark': '993',
    'PowerSlash': '55C',
    'PowerSurge_78': '78',
    'PowerSurge_AA0': 'AA0',
    'Powerful': 'D28',
    'Pox': '15B',
    'PrayerOfLight': 'BC5',
    'PrayersOfHope': 'B0C',
    'Precision': 'E7E',
    'PreferredWorldBonus': '583',
    'PrefulgenceReady_10E2': '10E2',
    'PrefulgenceReady_F26': 'F26',
    'Preoccupied': '653',
    'Preparation': 'E8',
    'PresenceOfMind': '9D',
    'PressurePoint': 'C64',
    'Prey_1A4': '1A4',
    'Prey_232': '232',
    'Prey_298': '298',
    'Prey_388': '388',
    'Prey_3BE': '3BE',
    'Prey_41B': '41B',
    'Prey_4E5': '4E5',
    'Prey_83F': '83F',
    'Prey_840': '840',
    'Prey_A55': 'A55',
    'Prey_B7B': 'B7B',
    'Prey_E82': 'E82',
    'PrideOfTheLioness': '9A3',
    'PrimalRage': '61F',
    'PrimalRendReady': 'A40',
    'PrimalRuinationReady_10BD': '10BD',
    'PrimalRuinationReady_EFA': 'EFA',
    'PrimaryTarget': '699',
    'PrimevalImpulse': 'F3C',
    'PrimingTouch': 'F46',
    'PrimordialCrust': '645',
    'PriorityAetherytePass': '425',
    'PrioritySealAllowance': '436',
    'PrizeCatch': 'ADC',
    'ProcessOfEliminationA': '969',
    'ProcessOfEliminationB': '96A',
    'ProcessOfEliminationC': '96B',
    'Program000000': 'A49',
    'ProgramFffffff': 'A48',
    'Projection': 'FCF',
    'Promotion': '354',
    'ProperCare': '16A',
    'Prospect': 'E1',
    'ProtectL': '66A',
    'Protect_1A1': '1A1',
    'Protect_587': '587',
    'Protect_805': '805',
    'Protect_92': '92',
    'Protect_93': '93',
    'Protraction': 'A96',
    'ProximateCurrent': 'FA3',
    'Pumpkin': '451',
    'PureMuscle': '6FA',
    'PurgatoryWinds_CEE': 'CEE',
    'PurgatoryWinds_D3F': 'D3F',
    'PurgatoryWinds_D40': 'D40',
    'PurgatoryWinds_D41': 'D41',
    'PushBack': '366',
    'Pyramid': '42F',
    'Pyrefaction': 'E06',
    'PyreticBooster': '8F6',
    'Pyretic_27F': '27F',
    'Pyretic_3C0': '3C0',
    'Pyretic_419': '419',
    'Pyretic_46D': '46D',
    'Pyretic_63F': '63F',
    'Pyretic_DC2': 'DC2',
    'Quadruple': 'AAC',
    'Quarantine': '3A4',
    'QuarteredSoul': 'DFF',
    'QueenBee': 'F60',
    'QuickSketch': '10E4',
    'QuickeningDynamis': 'D74',
    'QuickerNock': '84',
    'Quintuplecast': '948',
    'RadiantAegis_A8E': 'A8E',
    'RadiantAegis_C98': 'C98',
    'RadiantEncoreReady': 'F17',
    'RadiantFinale_AA2': 'AA2',
    'RadiantFinale_B94': 'B94',
    'RadiantShield': '139',
    'RadiantVeil': 'DDA',
    'RageOfHalone': '55A',
    'RagingRroneek': 'EAE',
    'RagingStrikes': '7D',
    'RaijuReady': 'A82',
    'RainOfDeath': 'F7',
    'RainbowBright': 'E5F',
    'Raise_474': '474',
    'Raise_94': '94',
    'Rampart_1048': '1048',
    'Rampart_47': '47',
    'Rampart_4A7': '4A7',
    'Rampart_7BA': '7BA',
    'Rancor': '15F',
    'RangedResistance': '3AD',
    'Ranging': '796',
    'RapidFire': '355',
    'RapidRecast': '66D',
    'RaptorForm': '6C',
    'RatAndMouse': 'E19',
    'Rationing': '43C',
    'RavenBlight': '1CA',
    'RawIntuition': '2DF',
    'RayOfFortitude': 'A41',
    'RayOfSuccor': 'A43',
    'RayOfValor': 'A42',
    'RazedEarth': '138',
    'ReadyToBlast_A7E': 'A7E',
    'ReadyToBlast_BE1': 'BE1',
    'ReadyToBreak': 'F2E',
    'ReadyToGouge_734': '734',
    'ReadyToGouge_7D4': '7D4',
    'ReadyToRaze_10C5': '10C5',
    'ReadyToRaze_EFF': 'EFF',
    'ReadyToReawaken': 'E57',
    'ReadyToReign': 'F00',
    'ReadyToRip_732': '732',
    'ReadyToRip_7D2': '7D2',
    'ReadyToTear_733': '733',
    'ReadyToTear_7D3': '7D3',
    'RearBlasterCharge': 'D8D',
    'RearMarkOfTheTides': 'AD3',
    'RearwardOmen_103A': '103A',
    'RearwardOmen_1142': '1142',
    'RearwardOmen_1146': '1146',
    'RearwardOmen_114B': '114B',
    'Reassembled': '353',
    'Reawakened_E56': 'E56',
    'Reawakened_FFE': 'FFE',
    'Recharge': '159',
    'Recitation_768': '768',
    'Recitation_C16': 'C16',
    'Reclaim': '104',
    'Recuperation_112': '112',
    'Recuperation_4CE': '4CE',
    'RedLight_297': '297',
    'RedLight_86F': '86F',
    'RedPaint': '5BE',
    'RedrawnDomain': '1105',
    'ReducedImmunity': '143',
    'ReducedRates': '16C',
    'Reflect': '206',
    'ReflectL': '671',
    'Reforged_6EF': '6EF',
    'Reforged_6F1': '6F1',
    'RefreshL': '673',
    'Refresh_38D': '38D',
    'Refresh_4AE': '4AE',
    'RefulgentChain_8CD': '8CD',
    'RefulgentChain_8CE': '8CE',
    'RefulgentFate_8CF': '8CF',
    'RefulgentFate_8D0': '8D0',
    'RefulgentLux': 'F22',
    'Regain': '19F',
    'Regen_381': '381',
    'Regen_532': '532',
    'Regen_9E': '9E',
    'Rehabilitation_117': '117',
    'Rehabilitation_1DF': '1DF',
    'Rehabilitation_288': '288',
    'Rehabilitation_3DD': '3DD',
    'Rehabilitation_3F6': '3F6',
    'Rehabilitation_4EF': '4EF',
    'Rehabilitation_697': '697',
    'Rehabilitation_D27': 'D27',
    'Rehabilitation_DA4': 'DA4',
    'Rekindle': 'A90',
    'RelentlessMarch_116': '116',
    'RelentlessMarch_135': '135',
    'RelentlessRush': 'BEC',
    'RelentlessShrapnel': 'BED',
    'Reminiscence': '92C',
    'RemoteCodeSmell_D71': 'D71',
    'RemoteCodeSmell_DB0': 'DB0',
    'RemoteCurrent': 'FA2',
    'RemoteGlitch': 'D64',
    'RemoteRegression_689': '689',
    'RemoteRegression_DCA': 'DCA',
    'RemoteResonance': '67F',
    'RentMind': '35B',
    'RepellingShot': '7E1',
    'RepellingSpray_156': '156',
    'RepellingSpray_22B': '22B',
    'RepellingSpray_22C': '22C',
    'RepellingSpray_22D': '22D',
    'RepellingSpray_22E': '22E',
    'Repertoire': 'C41',
    'Reprisal_2F1': '2F1',
    'Reprisal_4A9': '4A9',
    'Reprisal_835': '835',
    'Requiescat_558': '558',
    'Requiescat_559': '559',
    'RequisitionedMagitek': 'AB0',
    'Reraise': '933',
    'Resilience': 'CB0',
    'Resin': '2A2',
    'ResonantArrowReady': 'F16',
    'Resonant_30C': '30C',
    'Resonant_59E': '59E',
    'RestrainingOrder': '464',
    'RestrictedAccess': '9DB',
    'ResurrectionRestricted_6DB': '6DB',
    'ResurrectionRestricted_991': '991',
    'ResurrectionRestricted_D34': 'D34',
    'Retaliation': '888',
    'RetrogradeReady': '10EB',
    'Return': '994',
    'ReturnIv': '995',
    'Reusing': '70E',
    'Revelation': 'CA0',
    'RevelationResistanceDown': '24C',
    'ReversalOfForces': '98F',
    'Reverse': '3F5',
    'RevisedToBlizzards': 'FEA',
    'RevisedToGaleForceWinds': 'FEC',
    'RevisedToHyperelectricity': 'FEB',
    'RevisedToWildfires': 'FE9',
    'Revolutionary': 'B59',
    'RhythmeticFever': 'C08',
    'RiddleOfEarth_49B': '49B',
    'RiddleOfEarth_51E': '51E',
    'RiddleOfEarth_7D8': '7D8',
    'RiddleOfFire_49D': '49D',
    'RiddleOfFire_585': '585',
    'RiddleOfWind_4DC': '4DC',
    'RiddleOfWind_554': '554',
    'RiddleOfWind_A7F': 'A7F',
    'RightArmOperational': '46A',
    'RightArmPrimed': 'A0F',
    'RightArmReassembly': '467',
    'RightBlasterCharge': 'D8F',
    'RightEye_49F': '49F',
    'RightEye_5AD': '5AD',
    'RightEye_776': '776',
    'RightFace_510': '510',
    'RightFace_7A9': '7A9',
    'RightFace_874': '874',
    'RightFace_950': '950',
    'RightFace_DD5': 'DD5',
    'RightFace_E75': 'E75',
    'RightFace_E86': 'E86',
    'RightMarkOfTheTides': 'AD5',
    'RightUnseen_6AB': '6AB',
    'RightUnseen_E90': 'E90',
    'RightWindup_FBE': 'FBE',
    'RightWindup_FC0': 'FC0',
    'RightWithThee': '8C3',
    'RightwardBearing': 'B16',
    'RightwardFracture': 'FC4',
    'RightwardMemory': 'FD2',
    'RightwardOmen_1038': '1038',
    'RightwardOmen_103C': '103C',
    'RightwardOmen_1144': '1144',
    'RightwardOmen_1149': '1149',
    'RightwardOmen_114D': '114D',
    'RightwardWhimsy': 'B18',
    'Riled_47A': '47A',
    'Riled_F4A': 'F4A',
    'RingOfFire': '250',
    'RipeForReaping': 'B2A',
    'RiseOfThePhoenix': '251',
    'RisingRhythm': 'A88',
    'RiteOfPassage': 'CCD',
    'RiteOfTheGreatWhale': 'E97',
    'RiteOfTheSeaTurtle': 'E96',
    'RiteOfTheSparrow': 'E95',
    'RoadToToad': '3F1',
    'RoarOfConviction': 'F48',
    'RodentialRebirth_E0D': 'E0D',
    'RodentialRebirth_E0E': 'E0E',
    'RodentialRebirth_E0F': 'E0F',
    'RodentialRebirth_E10': 'E10',
    'RoleCall': 'AF2',
    'RolePlaying': '5FE',
    'RottenHoney': '1031',
    'RottingLungs': '26E',
    'RoundhouseConductor': 'FA5',
    'Rouse': 'BB',
    'RoyalFavor': '9DC',
    'RoyalGuard_188': '188',
    'RoyalGuard_729': '729',
    'RoyalRoad': '33B',
    'RoyalRouse': '1DA',
    'RroneekPulse_1049': '1049',
    'RroneekPulse_EC7': 'EC7',
    'RroneeksFavor': 'F70',
    'RubysGlimmer': 'F21',
    'Ruination': '50B',
    'RunningCold1': '8DC',
    'RunningCold2': '8E2',
    'RunningHot1': '89D',
    'RunningHot2': '8A4',
    'RunningWild': '8EC',
    'RushEdict': '695',
    'SaberDance': '7E6',
    'SacredClaim': 'BD1',
    'SacredSight_10E6': '10E6',
    'SacredSight_F27': 'F27',
    'SacredSoil_12A': '12A',
    'SacredSoil_12B': '12B',
    'SacredSoil_798': '798',
    'SacredSoil_A4D': 'A4D',
    'SacredSoil_A4E': 'A4E',
    'Sacrifice': '6CF',
    'SacrificesFate': '97F',
    'Safeguard': '18D',
    'SafetyLockAetherialAegis': '904',
    'SafetyLockPyreticBooster': '903',
    'SagesWisdom': 'B99',
    'SaltedEarth_2ED': '2ED',
    'SaltedEarth_BDC': 'BDC',
    'SaltedEarth_BDD': 'BDD',
    'SaltsBane': 'BDE',
    'Salvage': '494',
    'Sanction': 'F5',
    'ScaleFlakes': '1AD',
    'Scalebound': '5D7',
    'ScarletFlame': 'C9F',
    'ScatteredWailing': 'DEB',
    'Schiltron': 'E2F',
    'Scorch': '10DF',
    'Scorn_10C2': '10C2',
    'Scorn_EFD': 'EFD',
    'Scourge': '2E5',
    'ScouringWaters': '765',
    'ScreamOfTheFallen': 'CDB',
    'Scrutiny': '2F5',
    'SealSweetener': '19E',
    'SealedDoton': 'C7D',
    'SealedForkedRaiju': 'C7B',
    'SealedGokaMekkyaku': 'C79',
    'SealedHuton': 'C7C',
    'SealedHyoshoRanryu': 'C7A',
    'SealedMeisui': 'C7E',
    'SearingLight': 'A8F',
    'SearingWind_178': '178',
    'SearingWind_62A': '62A',
    'SeasonsOfTheFleeting': 'E27',
    'SecondBrand': 'CC5',
    'SecondChakra': '31A',
    'SecondFlame': 'CC9',
    'SecondInLine': 'BBD',
    'Seduced_337': '337',
    'Seduced_3DF': '3DF',
    'Seduced_56D': '56D',
    'Seduced_8DA': '8DA',
    'Seduced_BD0': 'BD0',
    'Seduced_D23': 'D23',
    'Seduced_E28': 'E28',
    'Seduced_E3': 'E3',
    'SeedCrystals': 'EE1',
    'SeedOfLife': '3F7',
    'Seized_191': '191',
    'Seized_261': '261',
    'Seized_3C1': '3C1',
    'Seized_507': '507',
    'Seized_E71': 'E71',
    'SenrisFavor': '632',
    'Sentinel': '4A',
    'SepulchreReady_10BA': '10BA',
    'SepulchreReady_EF4': 'EF4',
    'SequenceAb1': '150',
    'SequenceAp1': '151',
    'SequenceAs1': '152',
    'SeraphFlight': 'C18',
    'SeraphicIllumination_1132': '1132',
    'SeraphicIllumination_753': '753',
    'SeraphicVeil_77D': '77D',
    'SeraphicVeil_7F8': '7F8',
    'SeraphicVeil_C19': 'C19',
    'Seraphism_10E7': '10E7',
    'Seraphism_F2C': 'F2C',
    'Seraphism_F2D': 'F2D',
    'ServantOfShadow_973': '973',
    'ServantOfShadow_974': '974',
    'ServantOfShadow_975': '975',
    'ServantOfShadow_976': '976',
    'SeventhHeaven': 'E9D',
    'SevereDamage': '2C9',
    'ShackledApart': '978',
    'ShackledTogether_979': '979',
    'ShackledTogether_E04': 'E04',
    'ShacklesOfCompanionship_AB6': 'AB6',
    'ShacklesOfCompanionship_B45': 'B45',
    'ShacklesOfCompanionship_B46': 'B46',
    'ShacklesOfCompanionship_B47': 'B47',
    'ShacklesOfCompanionship_B6B': 'B6B',
    'ShacklesOfLoneliness_AB7': 'AB7',
    'ShacklesOfLoneliness_B48': 'B48',
    'ShacklesOfLoneliness_B49': 'B49',
    'ShacklesOfLoneliness_B4A': 'B4A',
    'ShacklesOfLoneliness_B6C': 'B6C',
    'ShacklesOfTime_AB5': 'AB5',
    'ShacklesOfTime_B3A': 'B3A',
    'ShacklesOfTime_B3B': 'B3B',
    'ShadeShift_1E8': '1E8',
    'ShadeShift_7DB': '7DB',
    'Shadewalker': '314',
    'ShadowFang_1FC': '1FC',
    'ShadowFang_521': '521',
    'ShadowFlare': 'BE',
    'ShadowLimb': '47C',
    'ShadowLinks_47B': '47B',
    'ShadowLinks_6FE': '6FE',
    'ShadowOfTheDragon_8AB': '8AB',
    'ShadowOfTheDragon_A57': 'A57',
    'ShadowWalker': 'F08',
    'ShadowWall': '2EB',
    'ShadowbiteReady': 'BBA',
    'Shadowed': '977',
    'ShadowedVigil': 'EFB',
    'Shadowskin': '2E4',
    'ShakeItOffOverTime': '83C',
    'ShakeItOff_5B1': '5B1',
    'ShakeItOff_7C9': '7C9',
    'SharedSentence': '462',
    'SharkEye': '48F',
    'SharkEyeIi': '490',
    'Sharpcast': '363',
    'SharpenedKnife': 'D3',
    'SharpenedSights': 'ED9',
    'SheerWill': '6C1',
    'ShellL': '66B',
    'Sheltron_2D8': '2D8',
    'Sheltron_740': '740',
    'ShieldBearer': '98E',
    'ShieldOath_573': '573',
    'ShieldOath_C74': 'C74',
    'ShieldOfTheFury': 'B0F',
    'ShieldOfTheHeavens': '3B1',
    'ShieldProtocolA': '8F0',
    'ShieldProtocolB': '8F1',
    'ShieldProtocolC': '8F2',
    'ShieldSamba': '722',
    'ShieldSmite': '10BB',
    'ShieldWall': 'C2',
    'Shieldbearer': '6C5',
    'ShiningEncouragement': 'FC1',
    'ShiningMoonstone': '570',
    'ShockSpikes_8D7': '8D7',
    'ShockSpikes_966': '966',
    'ShockSpikes_C7': 'C7',
    'Shocked': '5DA',
    'ShockingConception': 'D0B',
    'ShockingCounter': '3B4',
    'ShockingCross': 'F89',
    'ShroudOfSaints': '9A',
    'SiblingRevelry': 'D3D',
    'SilenceResistance_28': '28',
    'SilenceResistance_549': '549',
    'Silence_424': '424',
    'Silence_543': '543',
    'Silence_7': '7',
    'Silenced': '27A',
    'Silhouette': '313',
    'SilkenFlow': 'A86',
    'SilkenSymmetry': 'A85',
    'SilveredFate': 'CE0',
    'SingleMind': '2F8',
    'Sinking': '4F9',
    'SirenSong': '172',
    'SixFulmsUnder': '237',
    'SixSidedStar_9D2': '9D2',
    'SixSidedStar_C60': 'C60',
    'Skewer': '185',
    'SkillSpeedUp': '125',
    'SkyHigh': 'C6C',
    'SkyShatter': 'C6D',
    'Skyblind': 'A65',
    'Skyborne': '69A',
    'SlashingResistanceDownIi': '4F8',
    'SlashingResistanceDown_23C': '23C',
    'SlashingResistanceDown_333': '333',
    'SlashingResistanceDown_69D': '69D',
    'SlashingResistanceDown_9CC': '9CC',
    'SlashingResistanceDown_C3A': 'C3A',
    'SlashingResistanceUp': '2D0',
    'SleepResistance_54A': '54A',
    'SleepResistance_7AF': '7AF',
    'Sleep_3': '3',
    'Sleep_39E': '39E',
    'Sleep_544': '544',
    'Sleep_553': '553',
    'Sleep_5E6': '5E6',
    'Sleep_63C': '63C',
    'Sleep_79B': '79B',
    'Sleep_BA7': 'BA7',
    'Sleep_D8A': 'D8A',
    'SleepingDark': '692',
    'SleepingLight': '693',
    'SleeveDraw': '786',
    'Slime_239': '239',
    'Slime_329': '329',
    'SlipperyGround': 'E6D',
    'SlipperyPrey_1DB': '1DB',
    'SlipperyPrey_299': '299',
    'SlipperySlope': 'E77',
    'Slipping': 'C9B',
    'Slipstream_A92': 'A92',
    'Slipstream_C99': 'C99',
    'Slipstream_C9A': 'C9A',
    'Slither': 'FFF',
    'SlowResistance': '548',
    'Slow_1AB': '1AB',
    'Slow_1BA': '1BA',
    'Slow_231': '231',
    'Slow_542': '542',
    'Slow_5E5': '5E5',
    'Slow_620': '620',
    'Slow_8C6': '8C6',
    'Slow_9': '9',
    'Slow_A': 'A',
    'Slow_C1': 'C1',
    'Slow_D88': 'D88',
    'Sludge_10E': '10E',
    'Sludge_11F': '11F',
    'Sludge_216': '216',
    'Sludge_56A': '56A',
    'Sludge_825': '825',
    'Sludge_B67': 'B67',
    'Sludge_B84': 'B84',
    'Sludge_BFF': 'BFF',
    'Sludge_C00': 'C00',
    'Smackdown': '814',
    'SmileyFace': 'ACB',
    'SmokeScreen': '315',
    'SmotheringWaters': '73D',
    'Smudge_1011': '1011',
    'Smudge_E64': 'E64',
    'Snagging': '2F9',
    'SnakesBane': '1002',
    'Sneak': '2F',
    'SniperCannonFodder': 'D61',
    'Snowball': '25F',
    'Snowman': '166',
    'SoakingWet': '78F',
    'Soaring': '5B9',
    'SoleSurvivor': '51A',
    'SolemnVow': 'B4F',
    'SolidShield': '66F',
    'SoloStep': '10D9',
    'Solosplice': 'D11',
    'SomanouticBarrier': 'B1C',
    'SonicBreak': '72D',
    'Soteria': 'A32',
    'SoulOfDevotion': 'ABD',
    'SoulOfFire_6D7': '6D7',
    'SoulOfFire_6F7': '6F7',
    'SoulOfFire_D52': 'D52',
    'SoulOfFriendship': 'ABC',
    'SoulOfIce_6D8': '6D8',
    'SoulOfIce_6F8': '6F8',
    'SoulOfIce_D53': 'D53',
    'SoulOfTheBeast': 'DD8',
    'SoulOfTheMage': 'DD6',
    'SoulOfTheMartialist': 'DD7',
    'SoulReaver_A1B': 'A1B',
    'SoulReaver_B26': 'B26',
    'SoulResonance': 'C96',
    'SoulStranded': 'D16',
    'SouldeepInvisibility': '7A4',
    'SoulsInTheBalance': 'BCC',
    'Soulsow_A22': 'A22',
    'Soulsow_ABE': 'ABE',
    'SparkOfDynamis': 'D78',
    'SparkOfHope': 'AE2',
    'SpdDown': '3C7',
    'SpdUp': '3C6',
    'SpearDrawn_394': '394',
    'SpearDrawn_FCC': 'FCC',
    'SpearHeld': '39B',
    'SpearfishersIntuition': 'B4B',
    'Spectator': 'E7C',
    'SpellInWaiting': '710',
    'SpellInWaitingDarkAeroIii': '99F',
    'SpellInWaitingDarkBlizzardIii': '99E',
    'SpellInWaitingDarkEruption': '99C',
    'SpellInWaitingDarkFireIii_712': '712',
    'SpellInWaitingDarkFireIii_997': '997',
    'SpellInWaitingDarkWaterIii': '99D',
    'SpellInWaitingFlare_690': '690',
    'SpellInWaitingFlare_83A': '83A',
    'SpellInWaitingHellWind': '713',
    'SpellInWaitingQuietus_104E': '104E',
    'SpellInWaitingQuietus_9E3': '9E3',
    'SpellInWaitingRefrain': '1115',
    'SpellInWaitingReturnIv': '68F',
    'SpellInWaitingReturn_1070': '1070',
    'SpellInWaitingReturn_9A0': '9A0',
    'SpellInWaitingShadoweye_714': '714',
    'SpellInWaitingShadoweye_998': '998',
    'SpellInWaitingUnholyDarkness_711': '711',
    'SpellInWaitingUnholyDarkness_996': '996',
    'SpellShield': '670',
    'SpellSpeedUp': '126',
    'SpickAndSpan': 'E35',
    'SpicyCirculationI': 'E1D',
    'SpicyCirculationXxii': 'E1C',
    'SpineshatterDiveTarget': 'AC4',
    'SpinningConductor': 'FA4',
    'Spinning_B9D': 'B9D',
    'Spinning_E76': 'E76',
    'SpireDrawn_396': '396',
    'SpireDrawn_C1F': 'C1F',
    'SpireDrawn_FCE': 'FCE',
    'SpireHeld': '39D',
    'SpiritDartL': '676',
    'SpiritOfTheAetherweaver': '907',
    'SpiritOfTheBeast': '914',
    'SpiritOfTheBloodsucker': '913',
    'SpiritOfTheBreathtaker': '912',
    'SpiritOfTheDivine': '987',
    'SpiritOfTheDuelist': '984',
    'SpiritOfTheElder': '983',
    'SpiritOfTheFiendhunter': '985',
    'SpiritOfTheGambler': '982',
    'SpiritOfTheGuardian': '90C',
    'SpiritOfTheIndomitable': '986',
    'SpiritOfTheIrregular': '911',
    'SpiritOfTheMartialist': '908',
    'SpiritOfTheOrdained': '90D',
    'SpiritOfThePlatebearer': '90B',
    'SpiritOfTheProfane': '910',
    'SpiritOfTheRemembered': '669',
    'SpiritOfTheSavior': '909',
    'SpiritOfTheSkirmisher': '90E',
    'SpiritOfTheTemplar': '915',
    'SpiritOfTheVeteran': '90A',
    'SpiritOfTheWatcher': '90F',
    'SpitefulFlames': '1058',
    'Spjot': '160',
    'SplashingWaters_73B': '73B',
    'SplashingWaters_79D': '79D',
    'SpreadingFlames': 'AC6',
    'SpringTide': 'D00',
    'SprintPenalty': '447',
    'Sprint_1E1': '1E1',
    'Sprint_32': '32',
    'Sprint_53E': '53E',
    'Sprint_60C': '60C',
    'Sprint_792': '792',
    'Spur': 'C0',
    'SquadronBattleManual': '438',
    'SquadronEngineeringManual': '43A',
    'SquadronEnlistmentManual': '43E',
    'SquadronGearMaintenanceManual': '43D',
    'SquadronSpiritbondingManual': '43B',
    'SquadronSurvivalManual': '439',
    'SquirrellyPrayer': 'E15',
    'StabWound_109': '109',
    'StabWound_45D': '45D',
    'StabWound_5BA': '5BA',
    'StabWound_820': '820',
    'StabWound_B62': 'B62',
    'StabWound_B7F': 'B7F',
    'StabWound_BF5': 'BF5',
    'StabWound_BF6': 'BF6',
    'StableSystem': 'E22',
    'Staggered': '2CB',
    'StandardFinish_71D': '71D',
    'StandardFinish_7E8': '7E8',
    'StandardFinish_839': '839',
    'StandardFinish_841': '841',
    'StandardStep_71A': '71A',
    'StandardStep_7E7': '7E7',
    'StandingFirm': '8D9',
    'StarPrism_1017': '1017',
    'StarPrism_E63': 'E63',
    'StarcrossReady_10CE': '10CE',
    'StarcrossReady_F06': 'F06',
    'StarfallDance': 'C59',
    'StarryMuse': 'E65',
    'Starstruck_1016': '1016',
    'Starstruck_E61': 'E61',
    'StaticCharge': '23F',
    'StaticCondensation_201': '201',
    'StaticCondensation_8B5': '8B5',
    'SteadyHand': 'FD',
    'SteadyHandIi': '106',
    'SteelScales': '15D',
    'Stellation': '6D0',
    'StemTheFlow': 'A77',
    'StemTheTide_A78': 'A78',
    'StemTheTide_BD7': 'BD7',
    'Sticky_E81': 'E81',
    'Sticky_EA5': 'EA5',
    'StingingWelt': 'D9D',
    'StockHolder': '9A2',
    'StoneCurse_1B5': '1B5',
    'StoneCurse_589': '589',
    'StoneWall': '790',
    'StoneskinMagical': '99',
    'StoneskinPhysical': '98',
    'Stoneskin_97': '97',
    'Stoneskin_D5E': 'D5E',
    'Stormbite_4B1': '4B1',
    'Stormbite_52A': '52A',
    'StormsEye': '5A',
    'StormsPath': '198',
    'StormsSuccor': 'E26',
    'StraightShot': '82',
    'StraightShotReady': '7A',
    'StrengthDown_2D4': '2D4',
    'StrengthDown_33': '33',
    'StrengtheningStimulant': 'F76',
    'StringsOfTheMarionette': '3BF',
    'StrokeOfGenius': '48B',
    'StrongOfShield': '9EA',
    'StrongOfSpear': '9E9',
    'StrongerTogether': '9EB',
    'Stronghold': 'C3',
    'StunResistance_27': '27',
    'StunResistance_545': '545',
    'Stun_1043': '1043',
    'Stun_1116': '1116',
    'Stun_111A': '111A',
    'Stun_1151': '1151',
    'Stun_2': '2',
    'Stun_53F': '53F',
    'Stun_5E9': '5E9',
    'Stun_5F1': '5F1',
    'Stun_5F2': '5F2',
    'Stun_8E': '8E',
    'Stun_95': '95',
    'Stun_A60': 'A60',
    'Stun_B89': 'B89',
    'Stun_C9': 'C9',
    'Stun_D50': 'D50',
    'Stun_D89': 'D89',
    'Stung': '1C1',
    'Stunstrikes': '46',
    'StygianTendrils': '952',
    'SubtleRuin': '9D0',
    'SubtractivePalette_1006': '1006',
    'SubtractivePalette_E5A': 'E5A',
    'SubtractiveSpectrum': 'E6A',
    'SubtractiveSuppressorAlpha': 'E8C',
    'SubtractiveSuppressorBeta': 'E8D',
    'SubversiveStance': '1CD',
    'Succor': 'A6',
    'SuckedIn_9B6': '9B6',
    'SuckedIn_9E1': '9E1',
    'SuffocatedWill': '254',
    'Suiton_1FB': '1FB',
    'Suiton_B17': 'B17',
    'SummonOrder': '77B',
    'SummonOrderIi': '7AC',
    'SummonOrderIii': '7AD',
    'SummonOrderIv': '7AE',
    'SummonSeraph': 'C17',
    'SunSign': 'F38',
    'SunderingWaters': '73E',
    'Sunseal': '46F',
    'Suntouched': 'F37',
    'SuperSprint': '422',
    'Superbolide': '72C',
    'Superfluid_68C': '68C',
    'Superfluid_D7F': 'D7F',
    'SupernalGuard': 'CE7',
    'Supersplice': 'D13',
    'SupplicationReady_10B9': '10B9',
    'SupplicationReady_EF3': 'EF3',
    'Suppuration_177': '177',
    'Suppuration_86C': '86C',
    'Suppuration_C3D': 'C3D',
    'Surecast': 'A0',
    'SurfaceSlap': '70B',
    'SurgeProtection_205': '205',
    'SurgeProtection_8B4': '8B4',
    'SurgeVector': 'E8B',
    'SurgingTempest': 'A75',
    'SurgingWaters': '73A',
    'SurpanakhasFury': '852',
    'Sustain': 'B8',
    'SustainedDamage_1035': '1035',
    'SustainedDamage_B77': 'B77',
    'SustainedDamage_B97': 'B97',
    'SustainedDamage_CD8': 'CD8',
    'SustainedDamage_D1F': 'D1F',
    'SustainedDamage_ED3': 'ED3',
    'SustainedDarkDamage': 'B54',
    'SustainedLightDamage': 'B55',
    'Swarmed': '1C0',
    'SweepingWaters': '73F',
    'SwiftDeception': 'B8D',
    'SwiftL': '66C',
    'SwiftSprint_1121': '1121',
    'SwiftSprint_BB4': 'BB4',
    'SwiftSprint_BB5': 'BB5',
    'SwiftSprint_C35': 'C35',
    'Swiftcast_52D': '52D',
    'Swiftcast_7C3': '7C3',
    'Swiftcast_A7': 'A7',
    'SwiftkicksGoblixer': '3E7',
    'Swiftscaled_1019': '1019',
    'Swiftscaled_E55': 'E55',
    'SwiftskinsVenom': 'E4A',
    'Swiftsong_85': '85',
    'Swiftsong_86': '86',
    'SwirlingWaters': '73C',
    'SwordBearer': '98D',
    'SwordOath_17D': '17D',
    'SwordOath_4E': '4E',
    'SwordOath_7C7': '7C7',
    'SwordOfTheHeavens': '3B0',
    'Swordbearer': '6C6',
    'Synastry_34D': '34D',
    'Synastry_34E': '34E',
    'Synastry_538': '538',
    'Synastry_539': '539',
    'SynchronizationCodeSmell': 'D6C',
    'SynchronizationDebugger_683': '683',
    'SynchronizationDebugger_D66': 'D66',
    'SystemError': 'DEA',
    'SystemShock': '8B8',
    'Tactician_4AD': '4AD',
    'Tactician_79F': '79F',
    'Tactician_881': '881',
    'Tailwind_2A6': '2A6',
    'Tailwind_643': '643',
    'Tangled': 'CD4',
    'TargetLeft': '55F',
    'TargetRight': '55E',
    'Targeting': 'D14',
    'TartarusMode': '61B',
    'Taurochole': 'A3B',
    'TechnicalFinish_71E': '71E',
    'TechnicalFinish_802': '802',
    'TechnicalStep_71B': '71B',
    'TechnicalStep_801': '801',
    'TemperaCoat_1012': '1012',
    'TemperaCoat_E66': 'E66',
    'TemperaGrassa_1013': '1013',
    'TemperaGrassa_E67': 'E67',
    'Temperance_750': '750',
    'Temperance_751': '751',
    'Temperance_7F5': '7F5',
    'Temperance_7F6': '7F6',
    'Temperance_F90': 'F90',
    'Temperance_F91': 'F91',
    'TemperedWill_2C8': '2C8',
    'TemperedWill_4B': '4B',
    'TemporalBarrier': '623',
    'TemporalDisplacement_384': '384',
    'TemporalDisplacement_45F': '45F',
    'TemporalDisplacement_875': '875',
    'TemporaryInsanity': '2C7',
    'TemporaryMisdirection_58E': '58E',
    'TemporaryMisdirection_B78': 'B78',
    'TemporaryMisdirection_E6E': 'E6E',
    'TemporaryMisdirection_F45': 'F45',
    'TenChiJin': '4A2',
    'TenderAnaphylaxis': '8FD',
    'Tendo': 'F10',
    'TendoSetsugekkaReady': 'C83',
    'TenebrousGrasp': 'B10',
    'Tengentsu': 'F0D',
    'TengentsusForesight': 'F0E',
    'TenriJindoReady': 'F0B',
    'TerminalVelocity': '581',
    'Terror_42': '42',
    'Terror_578': '578',
    'Testudo': '883',
    'TetradmoniacBonds': 'E70',
    'ThaliaksWard': 'E7',
    'ThatWhichBindsUs': '169',
    'TheArrow_33F': '33F',
    'TheArrow_75C': '75C',
    'TheArrow_D4A': 'D4A',
    'TheArrow_F30': 'F30',
    'TheBalance_33D': '33D',
    'TheBalance_53A': '53A',
    'TheBalance_75A': '75A',
    'TheBalance_F2F': 'F2F',
    'TheBole_33E': '33E',
    'TheBole_53B': '53B',
    'TheBole_75B': '75B',
    'TheBole_F32': 'F32',
    'TheDeceiver': '5A5',
    'TheDragonsCurse': '131',
    'TheEcho_2A': '2A',
    'TheEcho_EF': 'EF',
    'TheEwer_341': '341',
    'TheEwer_53C': '53C',
    'TheEwer_75E': '75E',
    'TheEwer_F33': 'F33',
    'TheGentlemanFantastick': 'D5F',
    'TheGivingLand': '70A',
    'TheHeatOfBattle': '16D',
    'TheNarwhalsLullaby_FE1': 'FE1',
    'TheNarwhalsLullaby_FE2': 'FE2',
    'TheOneDragon': '611',
    'TheScroll': 'A0C',
    'TheSpear_340': '340',
    'TheSpear_75D': '75D',
    'TheSpear_F31': 'F31',
    'TheSpire_342': '342',
    'TheSpire_53D': '53D',
    'TheSpire_75F': '75F',
    'TheSpire_F34': 'F34',
    'TheTwelvesBounty': '339',
    'TheUnforgotten': 'C88',
    'TheUpholder': '5A6',
    'TheWanderersMinuet_361': '361',
    'TheWanderersMinuet_8A7': '8A7',
    'TheWanderersMinuet_8A8': '8A8',
    'TheWardensPaean_362': '362',
    'TheWardensPaean_C47': 'C47',
    'TheWormsCurse': '58B',
    'ThermalHigh_17C': '17C',
    'ThermalHigh_5F6': '5F6',
    'ThermalLow_17B': '17B',
    'ThermalLow_5F5': '5F5',
    'ThinAir': '4C1',
    'ThinIce_25C': '25C',
    'ThinIce_389': '389',
    'ThinIce_38F': '38F',
    'ThinIce_62B': '62B',
    'ThinIce_62C': '62C',
    'ThirdBrand': 'CC6',
    'ThirdChakra': '31B',
    'ThirdEye': '4D0',
    'ThirdFlame': 'CCA',
    'ThirdInLine': 'BBE',
    'ThornedFlourish_10E1': '10E1',
    'ThornedFlourish_F24': 'F24',
    'Thornpricked': 'AF4',
    'ThornyVine': '1BD',
    'Threatened': '614',
    'ThreeMudra': '525',
    'ThreefoldFanDance': '71C',
    'Threshold_A23': 'A23',
    'Threshold_B2C': 'B2C',
    'ThriceComeRuin_9E2': '9E2',
    'ThriceComeRuin_9E5': '9E5',
    'ThrillOfBattle_57': '57',
    'ThrillOfBattle_C71': 'C71',
    'ThrillOfWar': '5B0',
    'Throttle_2BC': '2BC',
    'Throttle_3AA': '3AA',
    'ThrownForALoop': '192',
    'ThunderAlchemy': 'AC1',
    'ThunderCharged': '5CD',
    'ThunderIi_81B': '81B',
    'ThunderIi_A2': 'A2',
    'ThunderIii': 'A3',
    'ThunderIv': '4BA',
    'ThunderOfTheRroneek': 'F69',
    'Thunder_52C': '52C',
    'Thunder_A1': 'A1',
    'Thunderclap_203': '203',
    'Thunderclap_C65': 'C65',
    'Thundercloud_555': '555',
    'Thundercloud_A4': 'A4',
    'Thunderhead': 'F1E',
    'ThunderousEcho': 'CDD',
    'Thunderstruck_1D2': '1D2',
    'Thunderstruck_B11': 'B11',
    'TimeAndTide': 'E9B',
    'TimesFive_ECE': 'ECE',
    'TimesFive_F63': 'F63',
    'TimesThree_E89': 'E89',
    'TimesThree_F62': 'F62',
    'TimesUp': '5B8',
    'Tingling': '9BC',
    'Tireless': '277',
    'TitansFavor': 'B25',
    'TizonasBastion_B5B': 'B5B',
    'TizonasBastion_B5C': 'B5C',
    'ToTheDungeons': 'B05',
    'ToadOil': '6C9',
    'Toad_1B7': '1B7',
    'Toad_1B9': '1B9',
    'Toad_44D': '44D',
    'Toad_A6F': 'A6F',
    'TopOfTheHive': '102F',
    'TorcleaverReady': '10C1',
    'TornadoEdict': '696',
    'TorrentialRuin': '9CE',
    'TouchOfDeath': '6A',
    'TouchOfFrost': '9BE',
    'TowerDefense_597': '597',
    'TowerDefense_598': '598',
    'ToxicAlchemy': 'AC2',
    'ToxicConception': 'D0D',
    'Toxicosis_111B': '111B',
    'Toxicosis_AAF': 'AAF',
    'Toxicosis_BB8': 'BB8',
    'Toxicosis_C09': 'C09',
    'Toxicosis_C0A': 'C0A',
    'Toxicosis_D4F': 'D4F',
    'Toxicosis_F8D': 'F8D',
    'Toxicosis_F8E': 'F8E',
    'Toxikon': 'C29',
    'TpBleed': '14',
    'TrainedPerfection': 'EE5',
    'Transcendent_1A2': '1A2',
    'Transcendent_A58': 'A58',
    'Transfiguration_235': '235',
    'Transfiguration_2C1': '2C1',
    'Transfiguration_58F': '58F',
    'Transfiguration_599': '599',
    'Transfiguration_5A8': '5A8',
    'Transfiguration_5B3': '5B3',
    'Transfiguration_648': '648',
    'Transfiguration_649': '649',
    'Transfiguration_9F4': '9F4',
    'Transfiguration_AA7': 'AA7',
    'Transparent': '1A0',
    'TransparentIi': '4F2',
    'Transporting': '194',
    'Trapper': '3DB',
    'Trauma': 'ED4',
    'Triangulate': 'D9',
    'TrickAttack_7DE': '7DE',
    'TrickAttack_CB6': 'CB6',
    'TrickleOfFire': 'B71',
    'Triple': '296',
    'Triplecast': '4BB',
    'Troubadour': '78E',
    'TroubadoursBallad': '4A3',
    'TroubadoursMinuet_4A6': '4A6',
    'TroubadoursMinuet_5A9': '5A9',
    'TroubadoursPaeon_4A5': '4A5',
    'TroubadoursPaeon_5AA': '5AA',
    'TrueBenison': 'AE7',
    'TrueBravery': 'AE5',
    'TrueFinish': 'B88',
    'TrueHallowedGround_8EF': '8EF',
    'TrueHallowedGround_AEA': 'AEA',
    'TrueMedicaIi': 'AE8',
    'TrueNorth': '4E2',
    'TrueRampart': 'AED',
    'TrueReprisal': 'AEE',
    'TrueSentinel': 'AEC',
    'TrueSight': 'D4',
    'TrueStep': 'AE6',
    'TrueStoneskin': 'AE9',
    'TrueVirtue': '6EB',
    'TrueWalkingDead': '8FF',
    'TrulyBerserk': '906',
    'TrustyShield': '787',
    'TruthOfForests': 'DD',
    'TruthOfMountains': 'DE',
    'TruthOfOceans': '495',
    'TsubameGaeshiReady': 'F0C',
    'TsubameGaeshi_1078': '1078',
    'TsubameGaeshi_1079': '1079',
    'TsubameGaeshi_107A': '107A',
    'TuraliWill': 'F6A',
    'TuralsEmbrace': 'F73',
    'Turbulence': '2CC',
    'TurretReset': '4E3',
    'TwiceComeRuin_9B3': '9B3',
    'TwiceComeRuin_9B5': '9B5',
    'TwiceComeRuin_9E6': '9E6',
    'TwinFates': '6D6',
    'TwinSnakes': '65',
    'TwistOfFate_508': '508',
    'TwistOfFate_509': '509',
    'TwistedTongue': 'FE0',
    'TwistingViper': 'B92',
    'TwoSwipeMemory': 'FD5',
    'UltrosSimulation': '5D1',
    'UmbralAttenuation': '84A',
    'UmbralCloak': '6B1',
    'UmbralEffect': '8BF',
    'UmbralEssence': '6AF',
    'UmbralFreeze': 'C91',
    'UmbralIceIi_B1': 'B1',
    'UmbralIceIi_C8F': 'C8F',
    'UmbralIceIii_B2': 'B2',
    'UmbralIceIii_D36': 'D36',
    'UmbralIce_B0': 'B0',
    'UmbralIce_C8E': 'C8E',
    'UmbralRays': 'B5D',
    'UmbralTilt': 'DF8',
    'UmbralbrightSoul': 'DFB',
    'UmbralstrongSoul': 'DFD',
    'Unbridled': '30E',
    'UnbrokenMettle': 'FC2',
    'Unchained': '5C',
    'Uncontrollable': '2DE',
    'UndeadRebirth': 'CB7',
    'UndeadRedemption': 'BDF',
    'UnderflowCodeSmell': 'D6E',
    'UnderflowDebugger_685': '685',
    'UnderflowDebugger_D68': 'D68',
    'UndyingFlame': 'A91',
    'Unfooled': '182',
    'Unforgotten': 'B58',
    'Unguarded': 'BCD',
    'Uninterrupted': '1140',
    'Unlimited': 'ADD',
    'Unmagicked': '60D',
    'Unnerved': '592',
    'UnrelentingAnguish': '5C8',
    'UnrelentingCounter': '3BA',
    'UnsealedSeitonTenchu': 'C78',
    'UnshakableLoyalty': 'BC0',
    'Unstable': '8C9',
    'UnstableFactor': 'E09',
    'UnstableGravity_550': '550',
    'UnstableGravity_834': '834',
    'Unveiled': '654',
    'UnwaveringWill': '89F',
    'UnwillingHost': '3A9',
    'UtmostCaution': '2F6',
    'Vanished': '5D8',
    'VariantCureSet': 'DED',
    'VariantRaiseSet': 'DEF',
    'VariantRampartSet': 'DF1',
    'VariantSpiritDartSet': 'DF0',
    'VariantUltimatumSet': 'DEE',
    'VauntedHero': '1064',
    'VauntedVillain': '1065',
    'VauthrysBlessing_779': '779',
    'VauthrysBlessing_782': '782',
    'VauthrysBlessing_783': '783',
    'VauthrysBlessing_784': '784',
    'VauthrysBlessing_785': '785',
    'VegetalVapours': 'D8B',
    'VeilOfGukumatz': '771',
    'VeilOfLight': '605',
    'VeilOfShadow': '604',
    'VeilOfTheWhorl_1DE': '1DE',
    'VeilOfTheWhorl_6BC': '6BC',
    'Veneration': '8B2',
    'Vengeance': '59',
    'VengefulFlame': 'E1A',
    'VengefulPyre': 'E1B',
    'VenomousBite': '7C',
    'VerfireReady': '4D2',
    'VermedicaIi': 'F75',
    'VermilionRadiance': 'CA1',
    'VerstoneReady': '4D3',
    'Vertigo': '1FA',
    'VeteranTrade': '491',
    'Vigilant': 'F3E',
    'Virus_5D5': '5D5',
    'Virus_B6': 'B6',
    'ViscousAetheroplasm_171': '171',
    'ViscousAetheroplasm_5FC': '5FC',
    'VitalSight': 'ADF',
    'VitalSign': '744',
    'VitalityDown': '34',
    'Vitalized_EDE': 'EDE',
    'Vitalized_EDF': 'EDF',
    'VoiceOfFortitude_115': '115',
    'VoiceOfFortitude_134': '134',
    'VoiceOfValor_114': '114',
    'VoiceOfValor_133': '133',
    'Voidblood': '310',
    'Voidbound': '1D4',
    'VortexBarrier': 'BC4',
    'Vril': '50A',
    'VulnerabilityDown_1154': '1154',
    'VulnerabilityDown_15E': '15E',
    'VulnerabilityDown_196': '196',
    'VulnerabilityDown_324': '324',
    'VulnerabilityDown_390': '390',
    'VulnerabilityDown_3A1': '3A1',
    'VulnerabilityDown_3F': '3F',
    'VulnerabilityDown_44C': '44C',
    'VulnerabilityDown_4CA': '4CA',
    'VulnerabilityDown_609': '609',
    'VulnerabilityDown_6DF': '6DF',
    'VulnerabilityDown_6F6': '6F6',
    'VulnerabilityDown_896': '896',
    'VulnerabilityDown_95B': '95B',
    'VulnerabilityDown_9CA': '9CA',
    'VulnerabilityDown_D20': 'D20',
    'VulnerabilityDown_DA3': 'DA3',
    'VulnerabilityDown_EAD': 'EAD',
    'VulnerabilityUp_1BC': '1BC',
    'VulnerabilityUp_233': '233',
    'VulnerabilityUp_27E': '27E',
    'VulnerabilityUp_2CA': '2CA',
    'VulnerabilityUp_326': '326',
    'VulnerabilityUp_37D': '37D',
    'VulnerabilityUp_40': '40',
    'VulnerabilityUp_41E': '41E',
    'VulnerabilityUp_4B8': '4B8',
    'VulnerabilityUp_57A': '57A',
    'VulnerabilityUp_584': '584',
    'VulnerabilityUp_63D': '63D',
    'VulnerabilityUp_6FD': '6FD',
    'VulnerabilityUp_735': '735',
    'VulnerabilityUp_8A5': '8A5',
    'VulnerabilityUp_92B': '92B',
    'VulnerabilityUp_B60': 'B60',
    'VulnerabilityUp_CA': 'CA',
    'VulnerabilityUp_D21': 'D21',
    'VulnerabilityUp_D26': 'D26',
    'VulnerabilityUp_DE5': 'DE5',
    'WalkingDead': '32B',
    'WanderersFate': '97E',
    'WanderersMinuet': '7D9',
    'WanderingEyes': 'FAA',
    'WaningNocturne': '6BF',
    'WardensGrace': '882',
    'WardingScale_CD1': 'CD1',
    'WardingScale_CE6': 'CE6',
    'Warmonger_940': '940',
    'Warmonger_94C': '94C',
    'WasteNot': 'FC',
    'WasteNotIi': '101',
    'WaterResistanceDown': '1AF',
    'WaterResistanceDownIi_401': '401',
    'WaterResistanceDownIi_485': '485',
    'WaterResistanceDownIi_82E': '82E',
    'WaterResistanceDownIi_860': '860',
    'WaterResistanceUp': '209',
    'WateryGrave_1E6': '1E6',
    'WateryGrave_6E8': '6E8',
    'WaxenFlesh': '15A',
    'WaxingNocturne': '6B6',
    'Waymark': '8C7',
    'WeakMagitekField': '6E7',
    'Weakness': '2B',
    'WellFed': '30',
    'WestWindOfChange': '105E',
    'WetPlate': '264',
    'Whaleback': '2CF',
    'WhatYouSee': '163',
    'WheelInMotion': '323',
    'WheelOfFortune_3BC': '3BC',
    'WheelOfFortune_4B6': '4B6',
    'WhisperedIncantation': 'B1E',
    'WhisperingDawn': '13B',
    'WhispersManifest': 'B1F',
    'Whistle': '370',
    'WhiteShift': 'CAD',
    'WhiteWound': '564',
    'WhoIsShe_A5E': 'A5E',
    'WhoIsShe_A5F': 'A5F',
    'WickedWhim': 'B06',
    'WideAwake': '7FF',
    'WideEyed': 'FE3',
    'Wildfire_35D': '35D',
    'Wildfire_52B': '52B',
    'Wildfire_79A': '79A',
    'Wildfire_7E2': '7E2',
    'WillOfTheWater': '2CE',
    'WillOfTheWind': '2CD',
    'WillToLive': 'B8B',
    'Willful': 'B8A',
    'WindAspected': 'B04',
    'WindResistanceDownIi_41C': '41C',
    'WindResistanceDownIi_830': '830',
    'WindResistanceDown_2AD': '2AD',
    'WindResistanceDown_37E': '37E',
    'WindResistanceUp': '20A',
    'WindResonance': '7D7',
    'Windbite': '81',
    'Windburn_10D': '10D',
    'Windburn_11E': '11E',
    'Windburn_214': '214',
    'Windburn_5E4': '5E4',
    'Windburn_6BB': '6BB',
    'Windburn_824': '824',
    'Windburn_B66': 'B66',
    'Windburn_B83': 'B83',
    'Windburn_BFD': 'BFD',
    'Windburn_BFE': 'BFE',
    'Windburn_E79': 'E79',
    'Windburn_E7A': 'E7A',
    'Windburn_EB': 'EB',
    'WindsRumination': 'F02',
    'Windwall': '2A7',
    'WingMotif': '100A',
    'WingSketch': '101D',
    'WingedConception': 'D09',
    'WingedMuse': '100E',
    'WingedRedemption': 'E39',
    'WingedReprobation': 'E38',
    'WingedShield': '76C',
    'WingsOfTheRaptor': '3B3',
    'WisdomOfTheAetherweaver': '65F',
    'WisdomOfTheBreathtaker': '668',
    'WisdomOfTheDuelist': '6CC',
    'WisdomOfTheElder': '6CB',
    'WisdomOfTheFiendhunter': '6CD',
    'WisdomOfTheGuardian': '662',
    'WisdomOfTheIndomitable': '6CE',
    'WisdomOfTheIrregular': '667',
    'WisdomOfTheMartialist': '660',
    'WisdomOfTheOrdained': '663',
    'WisdomOfThePlatebearer': '661',
    'WisdomOfTheSkirmisher': '664',
    'WisdomOfTheTemplar': '666',
    'WisdomOfTheWatcher': '665',
    'Withering': '531',
    'Woken_5F9': '5F9',
    'Woken_637': '637',
    'WolfsHeartKit': '47D',
    'Wounded': '4E8',
    'Wrath': '5D',
    'WrathIi': '5E',
    'WrathIii': '5F',
    'WrathIv': '60',
    'WrathfulRevelation': 'DF2',
    'Wrathful_10BE': '10BE',
    'Wrathful_F3D': 'F3D',
    'WreathOfFire': '10DB',
    'WreathOfIce': '10DC',
    'Wyrmclaw_8D2': '8D2',
    'Wyrmclaw_CBF': 'CBF',
    'Wyrmfang_8D3': '8D3',
    'Wyrmfang_CC0': 'CC0',
    'XMarkedSoul': 'E00',
    'XMarksTheShock': 'F8A',
    'YellowPaint': '5BB',
    'YourMove2Squares': '9B0',
    'YourMove3Squares': '9B1',
    'YourMove4Squares': '9B2',
    'Yukikaze': '4CB',
    'ZanshinReady_526': '526',
    'ZanshinReady_F0F': 'F0F',
    'ZeshoMeppoReady': '10D1',
    'Zoe': 'A33',
    'Zombification_173': '173',
    'Zombification_901': '901',
    '[1]': 'F96',
    '[2]': 'F97',
    '[3]': 'F98',
    '[4]': 'F99',
    '[5]': 'F9A',
    '[6]': 'F9B',
    '[]_7BC': '7BC',
    '[]_7FE': '7FE',
    '[]_C2D': 'C2D',
    '_Rsv_4157_1_1_0_0_S74cfc3b0_E74cfc3b0': '103D',
    '_Rsv_4158_1_1_0_0_S74cfc3b0_E74cfc3b0': '103E',
    '_Rsv_4159_1_1_0_0_S74cfc3b0_E74cfc3b0': '103F',
    '_Rsv_4160_1_1_0_0_S74cfc3b0_E74cfc3b0': '1040',
    '_Rsv_4161_1_1_0_0_S74cfc3b0_E74cfc3b0': '1041',
    '_Rsv_4165_1_1_0_0_S74cfc3b0_E74cfc3b0': '1045',
    '_Rsv_4166_1_1_0_0_S74cfc3b0_E74cfc3b0': '1046',
    '_Rsv_4171_1_1_0_0_S74cfc3b0_E74cfc3b0': '104B',
    '_Rsv_4172_1_1_0_0_S74cfc3b0_E74cfc3b0': '104C',
    'ii': 'C2A',
};
/* harmony default export */ const effect_id = (data);
//# sourceMappingURL=effect_id.js.map
;// CONCATENATED MODULE: ./src/buff_info.ts


const potionImage = '../resources/images/000000.png';
// 骑士
const fightOrFlightImage = '../resources/images/000166.png'; // 战逃反应
// 枪刃
const noMercyImage = '../resources/images/003402.png'; // 无情
// 学者
const chainStratagemImage = '../resources/images/002815.png'; // 连环计
// 占星
const divinationImage = '../resources/images/003553.png'; // 占卜
const theBalanceImage = '../resources/images/003110.png'; // 太阳神
const theSpearImage = '../resources/images/003111.png'; // 战争神
// 武僧
const riddleOfFireImage = '../resources/images/002541.png'; // 红莲
const brotherhoodImage = '../resources/images/002542.png'; // 义结金兰
// 龙骑
const lanceChargeImage = '../resources/images/000309.png'; // 猛枪
const battleLitanyImage = '../resources/images/002585.png'; // 战斗连祷
//忍者
const mugImage = '../resources/images/000613.png'; // 夺取
const dokumoriImage = '../resources/images/dokumori.png'; // 夺取

// 钐镰客
const arcaneCircleImage = '../resources/images/003633.png'; // 秘环
// 诗人
const ragingStrikesImage = '../resources/images/000352.png'; // 猛者强击
const battleVoiceImage = '../resources/images/002601.png'; // 战斗之声
const radiantFinaleImage = '../resources/images/002622.png'; // 最终乐章
// 舞娘
const devilmentImage = '../resources/images/003471.png'; // 探戈
const technicalFinishImage = '../resources/images/003474.png'; // 技巧舞步
// 召唤
const searingLightImage = '../resources/images/002752.png'; // 灼热之光
// 赤魔
const emboldenImage = '../resources/images/003218.png'; // 鼓励
const starryMuseImage = '../resources/images/starry_muse.png'; // 星空构想

class BuffInfoList {
  static buffInfo = {
    // 强化药
    potion: {
      gainEffect: [effect_id.Medicated],
      loseEffect: [effect_id.Medicated],
      useEffectDuration: true,
      icon: potionImage,
      borderColor: '#AA41B2',
      sortKey: 0,
      cooldown: 270,
      //CD
      target: 'you',
      physicalUp: 8,
      magicUp: 8
    },
    // 骑士
    fightOrFlight: {
      gainEffect: [effect_id.FightOrFlight],
      loseEffect: [effect_id.FightOrFlight],
      useEffectDuration: true,
      icon: fightOrFlightImage,
      borderColor: '#cc392a',
      sortKey: 0,
      cooldown: 60,
      target: 'you',
      physicalUp: 25,
      magicUp: 0
    },
    // 战士
    // 黑骑
    // 枪刃
    noMercy: {
      // 无情
      gainEffect: [effect_id.NoMercy_727],
      loseEffect: [effect_id.NoMercy_727],
      useEffectDuration: true,
      icon: noMercyImage,
      borderColor: '#345ec4',
      sortKey: 0,
      cooldown: 60,
      target: 'you',
      physicalUp: 20,
      magicUp: 20
    },
    // 学者
    chain: {
      // 连环计
      activeAbility: [kAbility.ChainStratagem],
      loseEffect: [effect_id.ChainStratagem_4C5, effect_id.ChainStratagem_57E],
      partyOnly: true,
      durationSeconds: 20,
      icon: chainStratagemImage,
      borderColor: '#849dfd',
      sortKey: 0,
      cooldown: 120,
      target: 'boss',
      physicalUp: 5,
      magicUp: 5,
      tts: '连环计'
    },
    // 占星
    divination: {
      // 占卜
      gainEffect: [effect_id.Divination_756],
      loseEffect: [effect_id.Divination_756],
      useEffectDuration: true,
      icon: divinationImage,
      borderColor: '#e8c353',
      sortKey: 0,
      cooldown: 120,
      target: 'you',
      physicalUp: 6,
      magicUp: 6,
      tts: '占卜'
    },
    balance: {
      // 太阳神之衡
      gainEffect: [effect_id.TheBalance_F2F, effect_id.TheBalance_33D],
      loseEffect: [effect_id.TheBalance_F2F, effect_id.TheBalance_33D],
      useEffectDuration: true,
      icon: theBalanceImage,
      borderColor: '#ff5900',
      sortKey: 0,
      target: 'you',
      meleeUp: 6,
      rangedUp: 3,
      tts: '近卡'
    },
    spear: {
      // 战争神之枪
      gainEffect: [effect_id.TheSpear_F31, effect_id.TheSpear_340],
      loseEffect: [effect_id.TheSpear_F31, effect_id.TheSpear_340],
      useEffectDuration: true,
      icon: theSpearImage,
      borderColor: '#4477dd',
      sortKey: 0,
      target: 'you',
      meleeUp: 3,
      rangedUp: 6,
      tts: '远卡'
    },
    // 武僧
    riddleOfFire: {
      // 红莲
      gainEffect: [effect_id.FiresRumination_F03, effect_id.RiddleOfFire_49D],
      loseEffect: [effect_id.FiresRumination_F03, effect_id.RiddleOfFire_49D],
      useEffectDuration: true,
      icon: riddleOfFireImage,
      borderColor: '#dc625a',
      sortKey: 0,
      cooldown: 60,
      target: 'you',
      physicalUp: 15,
      magicUp: 15
    },
    brotherhood: {
      // 义结金兰：斗气/攻击
      gainEffect: [effect_id.Brotherhood_4A1],
      loseEffect: [effect_id.Brotherhood_4A1],
      useEffectDuration: true,
      icon: brotherhoodImage,
      borderColor: '#994200',
      sortKey: 0,
      cooldown: 120,
      target: 'you',
      physicalUp: 5,
      magicUp: 5,
      tts: '桃园'
    },
    // 龙骑
    lanceCharge: {
      // 猛枪
      gainEffect: [effect_id.LanceCharge_748],
      loseEffect: [effect_id.LanceCharge_748],
      useEffectDuration: true,
      icon: lanceChargeImage,
      borderColor: '#831819',
      sortKey: 0,
      cooldown: 60,
      target: 'you',
      physicalUp: 10,
      magicUp: 10
    },
    litany: {
      //战斗连祷
      gainEffect: [effect_id.BattleLitany_312],
      loseEffect: [effect_id.BattleLitany_312],
      useEffectDuration: true,
      icon: battleLitanyImage,
      borderColor: '#009999',
      sortKey: 0,
      cooldown: 120,
      target: 'you',
      physicalUp: 5,
      magicUp: 5,
      tts: '连祷'
    },
    // 忍者
    mug: {
      // 夺取
      activeAbility: [kAbility.Mug],
      loseEffect: [effect_id.Mug],
      partyOnly: true,
      durationSeconds: 20,
      icon: mugImage,
      borderColor: '#e2b640',
      sortKey: 0,
      cooldown: 120,
      target: 'boss',
      physicalUp: 5,
      magicUp: 5,
      tts: '夺取'
    },
    dokumori: {
      // 介毒之术
      activeAbility: [kAbility.Dokumori],
      loseEffect: [effect_id.Dokumori_10CF, effect_id.Dokumori_F09],
      partyOnly: true,
      durationSeconds: 20,
      icon: dokumoriImage,
      borderColor: '#ab5ed9',
      sortKey: 0,
      cooldown: 120,
      target: 'boss',
      physicalUp: 5,
      magicUp: 5,
      tts: '夺取',
      aoeEffect: true // aoe判定
    },
    // 钐镰客
    arcaneCircle: {
      // 秘环
      gainEffect: [effect_id.ArcaneCircle],
      loseEffect: [effect_id.ArcaneCircle],
      useEffectDuration: true,
      icon: arcaneCircleImage,
      borderColor: '#d459dd',
      sortKey: 0,
      cooldown: 120,
      target: 'you',
      physicalUp: 3,
      magicUp: 3,
      tts: '秘环'
    },
    // 诗人
    raging: {
      // 猛者
      gainEffect: [effect_id.RagingStrikes],
      loseEffect: [effect_id.RagingStrikes],
      useEffectDuration: true,
      icon: ragingStrikesImage,
      borderColor: '#db6509',
      sortKey: 0,
      cooldown: 120,
      target: 'you',
      physicalUp: 15,
      magicUp: 15
    },
    battlevoice: {
      // 战斗之声
      gainEffect: [effect_id.BattleVoice],
      loseEffect: [effect_id.BattleVoice],
      useEffectDuration: true,
      icon: battleVoiceImage,
      borderColor: '#D6371E',
      sortKey: 0,
      cooldown: 120,
      target: 'you',
      physicalUp: 4,
      magicUp: 4,
      tts: '战斗之声'
    },
    radiantFinale: {
      // 终章
      gainEffect: [effect_id.RadiantFinale_AA2, effect_id.RadiantFinale_B94],
      loseEffect: [effect_id.RadiantFinale_AA2, effect_id.RadiantFinale_B94],
      useEffectDuration: true,
      icon: radiantFinaleImage,
      borderColor: '#fdf55a',
      sortKey: 0,
      cooldown: 110,
      target: 'you',
      physicalUp: 6,
      magicUp: 6,
      tts: '终章'
    },
    // 舞娘
    devilment: {
      // 进攻之探戈
      gainEffect: [effect_id.Devilment],
      loseEffect: [effect_id.Devilment],
      useEffectDuration: true,
      icon: devilmentImage,
      borderColor: '#006400',
      sortKey: 0,
      cooldown: 120,
      target: 'you',
      physicalUp: 15,
      magicUp: 15,
      tts: '探戈'
    },
    technicalFinish: {
      // 技巧舞步结束
      gainEffect: [effect_id.TechnicalFinish_71E],
      loseEffect: [effect_id.TechnicalFinish_71E],
      useEffectDuration: true,
      icon: technicalFinishImage,
      borderColor: '#E0757C',
      sortKey: 0,
      cooldown: 120,
      target: 'you',
      physicalUp: 5,
      magicUp: 5,
      tts: '技巧'
    },
    // 召唤
    searingLight: {
      // 灼热之光
      gainEffect: [effect_id.SearingLight],
      loseEffect: [effect_id.SearingLight],
      useEffectDuration: true,
      icon: searingLightImage,
      borderColor: '#fdd4fe',
      sortKey: 0,
      cooldown: 120,
      target: 'you',
      physicalUp: 5,
      magicUp: 5,
      tts: '灼热'
    },
    emboldenIsMe: {
      // 鼓励(自己给自己) 4d7
      gainEffect: [effect_id.Embolden_4D7],
      loseEffect: [effect_id.Embolden_4D7],
      useEffectDuration: true,
      icon: emboldenImage,
      borderColor: '#bcbce3',
      sortKey: 0,
      cooldown: 120,
      target: 'you',
      physicalUp: 0,
      magicUp: 5,
      tts: '鼓励'
    },
    emboldenToMe: {
      // 鼓励(从赤魔得到) 511
      gainEffect: [effect_id.Embolden_511],
      loseEffect: [effect_id.Embolden_511],
      useEffectDuration: true,
      icon: emboldenImage,
      borderColor: '#bcbce3',
      sortKey: 1,
      cooldown: 120,
      target: 'you',
      physicalUp: 5,
      magicUp: 5,
      tts: '鼓励'
    },
    starryMuse: {
      gainEffect: [effect_id.StarryMuse],
      loseEffect: [effect_id.StarryMuse],
      useEffectDuration: true,
      icon: starryMuseImage,
      borderColor: '#cc86ef',
      sortKey: 0,
      cooldown: 120,
      target: 'you',
      physicalUp: 5,
      magicUp: 5,
      tts: '星空'
    }
  };

  // 5.x版本
  static buffInfoV5 = {};
}
;// CONCATENATED MODULE: ./src/buff_tracker.ts





// TODO: consider using real times and not setTimeout times as these can drift.
class Buff {
  constructor(name, info, list, options) {
    this.name = name;
    this.info = info;
    this.options = options;

    // TODO: these should be different ui elements.
    // TODO: or maybe add some buffer between sections?
    this.activeList = list;
    this.cooldownList = list;
    this.readyList = list;

    // tracked auras
    this.active = null;
    this.cooldown = {};
    this.ready = {};

    // Hacky numbers to sort active > ready > cooldowns by adjusting sort keys.
    this.readySortKeyBase = 1000;
    this.cooldownSortKeyBase = 2000;
  }
  addCooldown(source, effectSeconds) {
    if (!this.info.cooldown) return;
    // Remove any preexisting cooldowns with the same name in case they unexpectedly exist.
    this.cooldown[source]?.removeCallback();
    const cooldownKey = `c:${this.name}:${source}`;
    let secondsUntilShow = this.info.cooldown - this.options.BigBuffShowCooldownSeconds;
    secondsUntilShow = Math.min(Math.max(effectSeconds, secondsUntilShow, 1), this.info.cooldown);
    const showSeconds = this.info.cooldown - secondsUntilShow;
    const addReadyCallback = () => {
      this.addReady(source);
    };
    this.cooldown[source] = this.makeAura(cooldownKey, this.cooldownList, showSeconds, secondsUntilShow, this.cooldownSortKeyBase, 'grey', '', 0.5, addReadyCallback);
  }
  addReady(source) {
    // Remove any preexisting cooldowns with the same name in case they unexpectedly exist.
    this.ready[source]?.removeCallback();

    // TODO: could consider looking at the party list to make initials unique?
    const initials = source.split(' ');
    let txt = '';
    if (initials.length === 2) txt = initials.map(str => str.charAt(0)).join('');else txt = initials[0] ?? '';
    const color = this.info.borderColor;
    const readyKey = `r:${this.name}:${source}`;
    this.ready[source] = this.makeAura(readyKey, this.readyList, -1, 0, this.readySortKeyBase, color, txt, 0.6);

    // if a readied raidbuff not be used in 3min, we can assume that
    // this player has left the battlefield, or at least his raidbuff is unexpectable.
    window.setTimeout(() => {
      this.ready[source]?.removeCallback();
    }, 3 * 60 * 1000);
  }
  bigBuffAutoWidth(seconds) {
    let body = document.getElementsByTagName('body');
    if (!body || !body[0]) return seconds * (this.options.BigBuffBarMaxWidth / 30);
    let width = body[0].clientWidth - this.options.BigBuffIconWidth - (this.options.DotIconWidth + this.options.DotBorderSize) - 5;
    let c = width > this.options.BigBuffBarMaxWidth ? this.options.BigBuffBarMaxWidth / 30 : width / 30;
    return seconds * c;
  }
  makeAura(key, list, seconds, secondsUntilShow, adjustSort, textColor, txt, opacity, expireCallback) {
    // 制作强化药
    if (this.info.gainEffect) {
      for (const e of this.info.gainEffect) {
        if (e === effect_id.Medicated && seconds >= 120) {
          return {
            addCallback() {},
            removeCallback() {},
            addTimeout: null,
            removeTimeout: null
          };
        }
      }
    }
    const aura = {
      removeCallback: () => {
        list.removeElement(key);
        if (aura.addTimeout) {
          window.clearTimeout(aura.addTimeout);
          aura.addTimeout = null;
        }
        if (aura.removeTimeout) {
          window.clearTimeout(aura.removeTimeout);
          aura.removeTimeout = null;
        }
        buffsCalculation(list);
      },
      addCallback: () => {
        const elem = makeAuraTimerIcon(key, seconds, opacity, this.options.BigBuffIconWidth, this.options.BigBuffIconHeight, txt, this.options.BigBuffBarHeight, this.options.BigBuffTextHeight, textColor, this.options.BigBuffBorderSize, this.info.borderColor, this.info.borderColor, this.bigBuffAutoWidth(seconds), this.info.icon, this.info);
        list.addElement(key, elem, Math.floor(seconds) + adjustSort);
        aura.addTimeout = null;
        buffsCalculation(list);
        if (seconds > 0) {
          aura.removeTimeout = window.setTimeout(() => {
            aura.removeCallback();
            expireCallback?.();
          }, seconds * 1000);
        }
      },
      removeTimeout: null,
      addTimeout: null
    };
    if (secondsUntilShow > 0) aura.addTimeout = window.setTimeout(aura.addCallback, secondsUntilShow * 1000);else aura.addCallback();
    return aura;
  }
  clear() {
    this.onLose();
    Object.values(this.cooldown).forEach(aura => {
      aura.removeCallback();
    });
    Object.values(this.ready).forEach(aura => {
      aura.removeCallback();
    });
  }
  clearCooldown(source) {
    const ready = this.ready[source];
    if (ready) ready.removeCallback();
    const cooldown = this.cooldown[source];
    if (cooldown) cooldown.removeCallback();
  }
  onGain(seconds) {
    this.onLose();
    this.active = this.makeAura(this.name, this.activeList, seconds, 0, 0, 'white', '', 1);
  }
  onLose() {
    if (!this.active) return;
    this.active.removeCallback();
    this.active = null;
  }
  onCooldown(seconds, source) {
    this.clearCooldown(source);
    this.addCooldown(source, seconds);
  }
}
class BuffTracker {
  // 控制防止重复播报

  constructor(options, playerName, playerJob, buffsListDiv, partyTracker, ffxivVersion) {
    this.options = options;
    this.playerName = playerName;
    this.playerJob = playerJob;
    this.buffsListDiv = buffsListDiv;
    this.partyTracker = partyTracker;
    this.ffxivVersion = ffxivVersion;
    this.options = options;
    this.playerName = playerName;
    this.playerJob = playerJob;
    this.buffsListDiv = buffsListDiv;
    this.buffs = {};
    this.partyTracker = partyTracker;
    this.buffInfo = BuffInfoList.buffInfo; // 基础
    const v650 = BuffInfoList.buffInfo; // 老版本特有的合并

    if (this.ffxivVersion < 700) {
      for (const [key, entry] of Object.entries(v650)) this.buffInfo[key] = entry;
    }
    this.gainEffectMap = {};
    this.loseEffectMap = {};
    this.activeAbilityMap = {};
    this.cooldownAbilityMap = {};
    this.ttsBuffList = {};
    const propToMapMap = {
      gainEffect: this.gainEffectMap,
      loseEffect: this.loseEffectMap,
      activeAbility: this.activeAbilityMap,
      cooldownAbility: this.cooldownAbilityMap
    };
    for (const [key, buffOmitName] of Object.entries(this.buffInfo)) {
      const buff = {
        ...buffOmitName,
        name: key
      };
      const overrides = this.options.PerBuffOptions[buff.name] ?? null;
      buff.borderColor = overrides?.borderColor ?? buff.borderColor;
      buff.icon = overrides?.icon ?? buff.icon;
      buff.side = overrides?.side ?? buff.side ?? 'right';
      buff.sortKey = overrides?.sortKey || buff.sortKey;
      buff.hide = overrides?.hide ?? buff.hide ?? false;
      for (const propStr in propToMapMap) {
        const prop = propStr;
        if (!(prop in buff)) continue;
        const key = buff[prop];
        if (typeof key === 'undefined') {
          console.error(`undefined value for key ${prop} for buff ${buff.name}`);
          continue;
        }
        const map = propToMapMap[prop];
        if (Array.isArray(key)) {
          key.forEach(k => map[k] = [buff, ...(map[k] ?? [])]);
        } else {
          map[key] ??= [];
          map[key]?.push(buff);
        }
      }
    }
  }
  onUseAbility(id, matches) {
    const buffs = this.activeAbilityMap[id];
    if (!buffs) return;
    for (const b of buffs) {
      if (b.partyOnly && !this.partyTracker.inParty(matches?.source ?? '')) {
        // when solo, you are not inParty.
        if (matches?.source !== this.playerName) return;
      }
      let seconds = -1;
      if (b.useEffectDuration) seconds = parseFloat(matches?.duration ?? '0');else if ('durationSeconds' in b) seconds = b.durationSeconds ?? seconds;
      if ('stack' in b && b.stack !== parseInt(matches?.count ?? '0')) return;

      // 针对aoe判定的团辅，只需要提醒一次
      const target = b.aoeEffect === true ? matches?.sourceId : matches?.targetId;
      this.onBigBuff(target, b.name, seconds, b, matches?.source, 'active');
    }
  }
  onGainEffect(buffs, matches) {
    if (!buffs) return;
    for (const b of buffs) {
      let seconds = -1;
      if (b.useEffectDuration) seconds = parseFloat(matches?.duration ?? '0');else if ('durationSeconds' in b) seconds = b.durationSeconds ?? seconds;
      if ('stack' in b && b.stack !== parseInt(matches?.count ?? '0')) return;

      // 存在count形式buff
      if (matches.count != null && matches.count !== '00') {
        if (b.physicalUpCount != null && b.physicalUpCount[matches.count] != null) {
          b.physicalUp = b.physicalUpCount[matches.count];
        }
        if (b.magicUpCount != null && b.magicUpCount[matches.count] != null) {
          b.magicUp = b.magicUpCount[matches.count];
        }
        let dom = findCountBuff(this.buffsListDiv, matches?.targetId + '=>' + b.name);
        if (dom !== null) {
          updateCountBuff(dom, b.physicalUp, b.magicUp);
          buffsCalculation(this.buffsListDiv);
          continue;
        }
      }
      if (b.meleeUp != null && b.meleeUp > 0 || b.rangedUp != null && b.rangedUp > 0) {
        if (util/* default */.A.isMeleeDpsJob(this.playerJob) || util/* default */.A.isTankJob(this.playerJob)) {
          b.physicalUp = b.meleeUp;
          b.magicUp = b.meleeUp;
        } else {
          b.physicalUp = b.rangedUp;
          b.magicUp = b.rangedUp;
        }
      }
      this.onBigBuff(matches?.targetId, b.name, seconds, b, matches?.source, 'active');
      // Some cooldowns (like potions) have no cooldownAbility, so also track them here.
      // if (!b.cooldownAbility)
      //   this.onBigBuff(b.name, seconds, b, matches?.source, 'cooldown');
    }
  }
  onLoseEffect(buffs, matches) {
    if (!buffs) return;
    for (const b of buffs) {
      // 针对aoe判定的团辅，只需要提醒一次
      const target = b.aoeEffect === true ? matches?.sourceId : matches?.targetId;
      this.onLoseBigBuff(target, b.name);
    }
  }
  onYouGainEffect(name, matches) {
    this.onGainEffect(this.gainEffectMap[name], matches);
  }
  onYouLoseEffect(name, matches) {
    this.onLoseEffect(this.loseEffectMap[name], matches);
  }
  onBigBuff(target = 'unknown', name, seconds = 0, info, source = '', option) {
    if (seconds <= 0) return;
    name = target + '=>' + name; // 针对对boss技能. 保证不同boss分开倒计时.

    let list = this.buffsListDiv;
    let buff = this.buffs[name];
    if (!buff) {
      buff = this.buffs[name] = new Buff(name, info, list, this.options);
    }
    if (buff) {
      // 语音播报
      if (buff.options.BigBuffNoticeTTSOn == true && buff.info.tts != null && buff.info.tts !== '') {
        // 对于具有范围的团辅，计算是否发过tts
        if (buff.info.aoeEffect === true) {
          const isExist = this.ttsBuffList[name] === true;
          if (!isExist) {
            this.ttsBuffList[name] = true;
            (0,overlay_plugin_api/* callOverlayHandler */.tK)({
              call: 'cactbotSay',
              text: buff.info.tts
            });
          }
        } else {
          (0,overlay_plugin_api/* callOverlayHandler */.tK)({
            call: 'cactbotSay',
            text: buff.info.tts
          });
        }
      }
    }
    if (option === 'active' && seconds > 0) buff.onGain(seconds);else if (option === 'cooldown') buff.onCooldown(seconds, source);
  }
  onLoseBigBuff(target = 'unknown', name) {
    name = target + '=>' + name; // 针对对boss技能. 保证不同boss分开倒计时.
    // console.log(name, this.ttsBuffList, this.buffs, this.buffs[name] ?? 'null')
    this.buffs[name]?.onLose();
    this.ttsBuffList[name] = undefined;
  }
  clear() {
    this.ttsBuffList = {};
    Object.values(this.buffs).forEach(buff => buff.clear());
  }
}
;// CONCATENATED MODULE: ./src/dot_info.ts

// 战士
const surgingTempestImage = '../resources/images/000264.png'; // 红斩
// 白魔
const diaImage = '../resources/images/002641.png'; // 天辉
// 学者
const biolysisImage = '../resources/images/002820.png'; // 蛊毒法
// 占星
const combustIIIImage = '../resources/images/003554.png'; // 焚灼
// 贤者
const eukrasianDosisIiiImage = '../resources/images/003682.png'; // 焚灼
const eukrasianDyskrasiaImage = '../resources/images/003687.png';
// 龙骑
const chaosThrustIiiImage = '../resources/images/000308.png'; // 樱花怒放
const chaoticSpringImage = '../resources/images/chaotic_spring.png'; // 樱花2
// 武士
const higanbanaImage = '../resources/images/003160.png'; // 彼岸花
// 钐镰客
const deathsDesignImage = '../resources/images/003606.png';
// 诗人
const stormbiteImage = '../resources/images/002614.png';
const causticBiteImage = '../resources/images/002613.png';
// 黑魔
const thunderIiiImage = '../resources/images/000459.png';
const thunderAoeImage = '../resources/images/064879.png';
const highThunderImage = '../resources/images/high_thunder.png';

// https://xivapi.com/docs/Icons 图标来源

class DotInfoList {
  static dotInfo = {
    // 战士 红斩
    surgingTempest: {
      gainEffect: [effect_id.SurgingTempest],
      loseEffect: [effect_id.SurgingTempest],
      icon: surgingTempestImage,
      borderColor: '#e9874a',
      sortKey: 0,
      attackType: 'none',
      tts: true
    },
    // 白魔
    dia: {
      gainEffect: [effect_id.Dia_74F, effect_id.Aero, effect_id.AeroIi, effect_id.AeroIii],
      loseEffect: [effect_id.Dia_74F, effect_id.Aero, effect_id.AeroIi, effect_id.AeroIii],
      icon: diaImage,
      borderColor: '#3eb9fa',
      sortKey: 0,
      attackType: 'magic',
      tts: true
    },
    // 学者
    biolysis: {
      gainEffect: [effect_id.Biolysis_767],
      loseEffect: [effect_id.Biolysis_767],
      icon: biolysisImage,
      borderColor: '#2e1fc4',
      sortKey: 0,
      attackType: 'magic',
      tts: true
    },
    // 占星
    combustIII: {
      gainEffect: [effect_id.Combust, effect_id.CombustIi, effect_id.CombustIii_759],
      loseEffect: [effect_id.Combust, effect_id.CombustIi, effect_id.CombustIii_759],
      icon: combustIIIImage,
      borderColor: '#62daf8',
      sortKey: 0,
      attackType: 'magic',
      tts: true
    },
    // 贤者
    eukrasianDosisIii: {
      gainEffect: [effect_id.EukrasianDosis, effect_id.EukrasianDosisIi, effect_id.EukrasianDosisIii_A38],
      loseEffect: [effect_id.EukrasianDosis, effect_id.EukrasianDosisIi, effect_id.EukrasianDosisIii_A38],
      icon: eukrasianDosisIiiImage,
      borderColor: '#c4acf6',
      sortKey: 0,
      attackType: 'magic',
      tts: true
    },
    eukrasianDyskrasia: {
      gainEffect: [effect_id.EukrasianDyskrasia],
      loseEffect: [effect_id.EukrasianDyskrasia],
      icon: eukrasianDyskrasiaImage,
      borderColor: '#c4acf6',
      sortKey: 0,
      attackType: 'magic',
      tts: true,
      aoeEffect: true // aoe判定
    },
    // 龙骑
    chaosThrust: {
      gainEffect: [effect_id.ChaosThrust_76],
      loseEffect: [effect_id.ChaosThrust_76],
      icon: chaosThrustIiiImage,
      borderColor: '#83598c',
      sortKey: 0,
      attackType: 'physical',
      tts: false
    },
    chaoticSpring: {
      gainEffect: [effect_id.ChaoticSpring],
      loseEffect: [effect_id.ChaoticSpring],
      icon: chaoticSpringImage,
      borderColor: '#83598c',
      sortKey: 0,
      attackType: 'physical',
      tts: false
    },
    // 武士
    higanbana: {
      gainEffect: [effect_id.Higanbana_4CC],
      loseEffect: [effect_id.Higanbana_4CC],
      icon: higanbanaImage,
      borderColor: '#d9542a',
      sortKey: 0,
      attackType: 'physical',
      tts: true
    },
    // 镰刀   DeathsDesign
    deathsDesign: {
      gainEffect: [effect_id.DeathsDesign],
      loseEffect: [effect_id.DeathsDesign],
      icon: deathsDesignImage,
      borderColor: '#49298c',
      sortKey: 0,
      attackType: 'none',
      tts: true
    },
    // 诗人
    stormbite: {
      gainEffect: [effect_id.Stormbite_4B1],
      loseEffect: [effect_id.Stormbite_4B1],
      icon: stormbiteImage,
      borderColor: '#3df6fd',
      sortKey: 0,
      attackType: 'physical',
      tts: true
    },
    causticBite: {
      gainEffect: [effect_id.CausticBite_4B0],
      loseEffect: [effect_id.CausticBite_4B0],
      icon: causticBiteImage,
      borderColor: '#e053bb',
      sortKey: 0,
      attackType: 'physical',
      tts: false
    },
    // 黑魔
    thunderAoe: {
      gainEffect: [effect_id.ThunderIi_A2, effect_id.ThunderIi_81B, effect_id.ThunderIv],
      loseEffect: [effect_id.ThunderIi_A2, effect_id.ThunderIi_81B, effect_id.ThunderIv],
      icon: thunderAoeImage,
      borderColor: '#93d5fd',
      sortKey: 0,
      attackType: 'magic',
      tts: true,
      aoeEffect: true
    },
    thunderIII: {
      gainEffect: [effect_id.Thunder_A1, effect_id.Thunder_52C, effect_id.ThunderIii],
      loseEffect: [effect_id.Thunder_A1, effect_id.Thunder_52C, effect_id.ThunderIii],
      icon: thunderIiiImage,
      borderColor: '#93d5fd',
      sortKey: 0,
      attackType: 'magic',
      tts: true
    },
    highThunder: {
      gainEffect: [effect_id.HighThunder_F1F],
      loseEffect: [effect_id.HighThunder_F1F],
      icon: highThunderImage,
      borderColor: '#b850e8',
      sortKey: 0,
      attackType: 'magic',
      tts: true
    }
  };
}
;// CONCATENATED MODULE: ./src/dot_tracker.ts



class Dot {
  constructor(name, info, list, options) {
    this.name = name;
    this.info = info;
    this.options = options;
    this.activeList = list;

    // tracked auras
    this.active = null;
  }
  makeAura(key, list, seconds, secondsUntilShow, adjustSort, textColor, txt, opacity, expireCallback) {
    const aura = {
      removeCallback: () => {
        list.removeElement(key);
        if (aura.addTimeout) {
          window.clearTimeout(aura.addTimeout);
          aura.addTimeout = null;
        }
        if (aura.noticeTimeout) {
          window.clearTimeout(aura.noticeTimeout);
          aura.noticeTimeout = null;
        }
        if (aura.removeTimeout) {
          window.clearTimeout(aura.removeTimeout);
          aura.removeTimeout = null;
        }
      },
      noticeCallback: () => {
        (0,overlay_plugin_api/* callOverlayHandler */.tK)({
          call: 'cactbotSay',
          text: this.options.DotNoticeTTS
        });
      },
      addCallback: () => {
        const elem = makeAuraDotTimerIcon(key, seconds, opacity, this.options.DotIconWidth, this.options.DotIconHeight, txt, this.options.DotBarHeight, 0, textColor, this.options.DotBorderSize, this.info.borderColor, this.info.borderColor, this.info.icon, this.info);
        list.addElement(key, elem, Math.floor(seconds) + adjustSort);
        aura.addTimeout = null;
        if (seconds > 0) {
          // 设置定时通知
          if (this.options.DotNoticeTTSOn && this.info.tts && this.options.DotNoticeLessThanSecond > 0 && this.options.DotNoticeTTS !== '') {
            aura.noticeTimeout = window.setTimeout(() => {
              aura.noticeCallback();
            }, (Math.floor(seconds) - (this.options.DotNoticeLessThanSecond + 1)) * 1000);
          }

          // 设置定时取消
          aura.removeTimeout = window.setTimeout(() => {
            aura.removeCallback();
            expireCallback?.();
          }, seconds * 1000);
        }
      },
      removeTimeout: null,
      noticeTimeout: null,
      addTimeout: null
    };
    if (secondsUntilShow > 0) aura.addTimeout = window.setTimeout(aura.addCallback, secondsUntilShow * 1000);else aura.addCallback();
    return aura;
  }
  clear() {
    this.onLose();
  }
  onGain(seconds) {
    this.onLose();
    this.active = this.makeAura(this.name, this.activeList, seconds, 0, 0, 'white', '', 1);
  }
  onLose() {
    if (!this.active) return;
    this.active.removeCallback();
    this.active = null;
  }
}
class DotTracker {
  // targets: string[];

  constructor(options, player, dotListDiv) {
    this.options = options;
    this.player = player;
    this.dotListDiv = dotListDiv;
    this.options = options;
    this.player = player;
    this.dotListDiv = dotListDiv;

    // this.targets = [];
    this.dots = {};
    this.gainEffectMap = {};
    this.loseEffectMap = {};
    const propToMapMap = {
      gainEffect: this.gainEffectMap,
      loseEffect: this.loseEffectMap
    };
    this.dotInfo = DotInfoList.dotInfo;
    for (const [key, dotOmitName] of Object.entries(this.dotInfo)) {
      const dot = {
        ...dotOmitName,
        name: key
      };
      switch (key) {
        case 'goringBlade':
          dot.tts = this.options.TTSGoringBlade;
          break;
        case 'surgingTempest':
          dot.tts = this.options.TTSSurgingTempest;
          break;
        case 'dia':
          dot.tts = this.options.TTSDia;
          break;
        case 'biolysis':
          dot.tts = this.options.TTSBiolysis;
          break;
        case 'combustIII':
          dot.tts = this.options.TTSCombustIII;
          break;
        case 'eukrasianDosisIii':
        case 'eukrasianDyskrasia':
          dot.tts = this.options.TTSEukrasianDosisIii;
          break;
        case 'demolish':
          dot.tts = this.options.TTSDemolish;
          break;
        case 'chaoticSpring':
          dot.tts = this.options.TTSChaoticSpring;
          break;
        case 'higanbana':
          dot.tts = this.options.TTSHiganbana;
          break;
        case 'deathsDesign':
          dot.tts = this.options.TTSDeathsDesign;
          break;
        case 'stormbite':
          dot.tts = this.options.TTSStormbite;
          break;
        case 'thunderIII':
          dot.tts = this.options.TTSThunderIii;
          break;
        default:
          break;
      }
      for (const propStr in propToMapMap) {
        const prop = propStr;
        if (!(prop in dot)) continue;
        const key = dot[prop];
        if (typeof key === 'undefined') {
          console.error('undefined value for key ' + prop + ' for buff ' + dot.name);
          continue;
        }
        const map = propToMapMap[prop];
        if (Array.isArray(key)) {
          key.forEach(k => map[k] = [dot, ...(map[k] ?? [])]);
        } else {
          map[key] ??= [];
          map[key]?.push(dot);
        }
      }
    }
  }

  // 获得增伤自身buff
  onYouGainBuff(name, matches) {
    if (matches.sourceId?.toUpperCase() === this.player.idHex && this.gainEffectMap[name] != null) {
      this.onGainEffect(this.gainEffectMap[name], matches);
    }
  }
  onYouLoseBuff(name, matches) {
    if (matches.sourceId?.toUpperCase() === this.player.idHex && this.loseEffectMap[name] != null) {
      this.onLoseEffect(this.loseEffectMap[name], matches);
    }
  }
  onYouGainEffect(name, matches) {
    if (matches.targetId?.startsWith('4') && matches.sourceId?.toUpperCase() === this.player.idHex && this.gainEffectMap[name] != null) {
      // this.targets.push(matches.targetId);
      this.onGainEffect(this.gainEffectMap[name], matches);
    }
  }
  onYouLoseEffect(name, matches) {
    if (matches.targetId?.startsWith('4') && matches.sourceId?.toUpperCase() === this.player.idHex && this.loseEffectMap[name] != null) {
      // this.targets.splice(this.targets.indexOf(matches.targetId), 1);
      this.onLoseEffect(this.loseEffectMap[name], matches);
    }
  }
  onGainEffect(dots, matches) {
    if (!dots) return;
    for (const b of dots) {
      let seconds = parseFloat(matches?.duration ?? '0');
      if (b.name == 'surgingTempest') {
        // case: 可能由于buff的计算方式不同，战士的倒计时多2秒
        seconds += 2;
      }
      // 针对aoe判定的团辅，只需要提醒一次
      const target = b.aoeEffect === true ? matches?.sourceId : matches?.targetId;
      this.onBigDot(target, b.name, seconds, b, matches?.source);
    }
  }
  onLoseEffect(dots, matches) {
    if (!dots) return;
    for (const b of dots) {
      const target = b.aoeEffect === true ? matches?.sourceId : matches?.targetId;
      this.onLoseBigBuff(target, b.name);
    }
  }
  onBigDot(target = 'unknown', name, seconds = 0, info, _source = '') {
    if (seconds <= 0) return;
    if (name != 'deathsDesign') {
      // 镰刀的dot可能会给boss上多个
      name = target + '=>' + name; // 针对对boss技能. 保证不同boss分开倒计时.
    }
    let list = this.dotListDiv;
    let dot = this.dots[name];
    if (!dot) dot = this.dots[name] = new Dot(name, info, list, this.options);
    if (seconds > 0) dot.onGain(seconds);
  }
  onLoseBigBuff(target = 'unknown', name) {
    name = target + '=>' + name; // 针对对boss技能. 保证不同boss分开倒计时.
    this.dots[name]?.onLose();
  }
  clear() {
    // this.targets = [];
    Object.values(this.dots).forEach(dot => dot.clear());
  }
}
;// CONCATENATED MODULE: ./src/components/index.ts




class ComponentManager {
  // misc variables

  constructor(o) {
    this.o = o;
    this.o.ffxivVersion;
    this.bars = o.bars;
    this.ee = o.emitter;
    this.options = o.options;
    this.partyTracker = o.partyTracker;
    this.player = o.player;
    this.ffxivVersion = o.ffxivVersion;
    this.contentType = undefined;
    this.setupListeners();
  }
  setupListeners() {
    this.ee.registerOverlayListeners();

    // bind party changed event
    this.ee.on('party', party => this.partyTracker.onPartyChanged({
      party
    }));
    this.player.on('job', job => {
      this.dotTracker?.clear();
      this.bars._setupJobContainers(job);

      // hide container html element if the player is a crafter
      this.bars.setJobsContainerVisibility(!util/* default */.A.isCraftingJob(job));

      // As you cannot change jobs in combat, we can assume that
      // it is always false here.
      this.bars._updateProcBoxNotifyState(false);

      // Set up the buff tracker after the job bars are created.
      if (this.bars.o.buffsList) {
        this.buffTracker = new BuffTracker(this.options, this.player.name, this.player.job, this.bars.o.buffsList, this.partyTracker, this.ffxivVersion);
      }
      if (this.bars.o.dotsList) {
        this.dotTracker = new DotTracker(this.options, this.player, this.bars.o.dotsList);
      }
    });

    // update RegexesHolder when the player name changes
    this.player.on('player', ({
      name
    }) => {
      this.regexes = new RegexesHolder(this.options.ParserLanguage, name);
    });
    this.ee.on('battle/wipe', () => {
      this._onPartyWipe();
    });

    // 自己放的能力技
    this.player.on('action/you', (id, matches) => {
      this.buffTracker?.onUseAbility(id, matches);
    });
    this.player.on('action/party', (id, matches) => {
      this.buffTracker?.onUseAbility(id, matches);
    });
    // this.player.on('action/other', (id, matches) => this.buffTracker?.onUseAbility(id, matches));

    // 获得的buff (自己)
    this.player.on(
    // 给自己添加的
    'effect/gain/you', (id, matches) => {
      this.buffTracker?.onYouGainEffect(id, matches);
      this.dotTracker?.onYouGainBuff(id, matches);
    });
    this.player.on('effect/lose/you', (id, matches) => {
      this.buffTracker?.onYouLoseEffect(id, matches);
      this.dotTracker?.onYouLoseBuff(id, matches);
    });

    // 使用的技能
    this.player.on('effect/gain', (id, matches) => {
      // mob id starts with '4'
      if (matches.targetId?.startsWith('4')) this.dotTracker?.onYouGainEffect(id, matches);
    });
    this.player.on('effect/lose', (id, matches) => {
      // mob id starts with '4'
      if (matches.targetId?.startsWith('4')) {
        this.buffTracker?.onYouLoseEffect(id, matches);
        this.dotTracker?.onYouLoseEffect(id, matches);
      }
    });
    this.ee.on('zone/change', (id, _name, info) => {
      this.inPvPZone = isPvPZone(id);
      this.contentType = info?.contentType;
      this.buffTracker?.clear();
      this.dotTracker?.clear();

      // Hide UI except HP and MP bar if change to pvp area.
      this.bars._updateUIVisibility(this.inPvPZone);
    });
  }
  _onPartyWipe() {
    this.buffTracker?.clear();
    this.dotTracker?.clear();
    // Reset job-specific ui
    this.component?.reset();
  }
}
;// CONCATENATED MODULE: ./src/buff.ts










let emit;
// let play: Player;

user_config/* default */.A.getUserConfigLocation('buff', buff_options, () => {
  let options = {
    ...buff_options
  };
  // 配置文件改写
  options = rewriteOption(options);
  const ffxivlanguageToVersion = {
    'en': 701,
    'de': 701,
    'fr': 701,
    'ja': 701,
    'cn': 701,
    'ko': 650
  };
  const ffxivVersion = ffxivlanguageToVersion[options.ParserLanguage];
  const dummyOptions = {
    ...options,
    DefaultPlayerLabel: 'nick',
    PlayerNicks: {}
  };
  const emitter = new JobsEventEmitter();
  const partyTracker = new PartyTracker(dummyOptions);
  const player = new Player(emitter, partyTracker, ffxivVersion);
  const bars = new Bars(options, {
    emitter,
    player
  });
  emit = emitter;
  // play = player

  new ComponentManager({
    bars,
    emitter,
    options,
    partyTracker,
    player,
    ffxivVersion
  });

  // 测试菜单
  let menuDiv = document.getElementById("menu");
  if (!menuDiv) {
    menuDiv = document.createElement('div');
    menuDiv.id = "menu";
    // Set element display to none in case the page has not included defaults.css.
    menuDiv.style.display = 'none';
    let btn = document.createElement("button");
    btn.id = "test";
    btn.innerHTML = "测试";
    btn.addEventListener("click", function () {
      Test();
    });
    menuDiv.append(btn);
    let btn2 = document.createElement("button");
    btn2.id = "settings";
    btn2.innerHTML = "设置";
    btn2.addEventListener("click", function () {
      let iTop = (1080 - 30 - 470) / 2;
      let iLeft = (1920 - 10 - 670) / 2;
      window.open("./settings.html", "_blank", "width=720,height=570,top=" + iTop + ",left=" + iLeft);
    });
    menuDiv.append(btn2);
    document.body.append(menuDiv);
  }
});
function rewriteOption(options) {
  const config = loadConfig();
  options.Scale = config.Scale;
  options.BigBuffNoticeTTSOn = config.BigBuffNoticeTTSOn;
  options.DotNoticeLessThanSecond = config.DotNoticeLessThanSecond;
  options.DotNoticeTTSOn = config.DotNoticeTTSOn;
  options.DotNoticeTTS = config.DotNoticeTTS;
  options.TTSGoringBlade = config.TTSGoringBlade;
  options.TTSSurgingTempest = config.TTSSurgingTempest;
  options.TTSDia = config.TTSDia;
  options.TTSBiolysis = config.TTSBiolysis;
  options.TTSCombustIII = config.TTSCombustIII;
  options.TTSEukrasianDosisIii = config.TTSEukrasianDosisIii;
  options.TTSDemolish = config.TTSDemolish;
  options.TTSChaoticSpring = config.TTSChaoticSpring;
  options.TTSHiganbana = config.TTSHiganbana;
  options.TTSDeathsDesign = config.TTSDeathsDesign;
  options.TTSStormbite = config.TTSStormbite;
  options.TTSThunderIii = config.TTSThunderIii;

  // 缩放比例
  const uscale = decodeURI(getQueryVariable('scaling'));
  if (uscale != '') {
    options.Scale = Number(uscale);
  }

  // tts总开关
  const uttsOn = decodeURI(getQueryVariable('tts'));
  if (uttsOn === '0') {
    options.BigBuffNoticeTTSOn = false;
    options.DotNoticeTTSOn = false;
  }
  // 小于多少秒提醒
  const uDotNoticeLess = decodeURI(getQueryVariable('dotnoticeless'));
  if (uDotNoticeLess != '') {
    options.DotNoticeLessThanSecond = Number(uDotNoticeLess);
  }
  // TTS文字
  const uDotTTS = decodeURI(getQueryVariable('dotnoticetts'));
  if (uDotTTS != '') {
    options.DotNoticeTTS = uDotTTS;
  }
  if (options.Scale > 100) {
    options.Scale = options.Scale / 100;
    options.PhysicalFontSize *= options.Scale;
    options.MagicFontSize *= options.Scale;
    options.BigBuffIconWidth *= options.Scale;
    options.BigBuffIconHeight *= options.Scale;
    options.BigBuffBarHeight *= options.Scale;
    options.DotIconWidth *= options.Scale;
    options.DotIconHeight *= options.Scale;
    options.DotBarHeight *= options.Scale;
  }
  return options;
}
function Test() {
  if (emit == null) {
    return;
  }
  let send = function (num, line) {
    setTimeout(() => {
      emit.processLogLine({
        type: 'LogLine',
        line: line.split('|'),
        rawLine: line
      });
    }, num * 1000);
  };
  send(1, '26|2020-09-20T03:48:12.5040000+08:00|7d|猛者强击|20.00|1039A1D9|水貂桑|1039A1D9|水貂桑|00|111340|111340||7f5d92a566794a793b65f97686f3699f');
  send(3, '26|2022-01-01T23:55:26.2570000+08:00|4b1|狂风蚀箭|30.00|1039A1D9|水貂桑|4000031F|木人|28|7400000|135871||634a843a26af69a2b1be9f15c63fedba');
  send(5, '26|2022-01-01T23:55:28.7110000+08:00|4b0|烈毒咬箭|30.00|1039A1D9|水貂桑|4000031F|木人|28|7400000|135871||f186f35dad45a7f1e42b098e9e4fcef6');
  send(7, '26|2020-09-20T22:44:12.4840000+08:00|8d|战斗之声|20.00|103E4CCF|伊黛亚·李|1039A1D9|水貂桑|00|76590|111340||f655b2f774c6675d7991b1e5180462d2');
  send(9, '26|2022-01-01T23:55:26.2570000+08:00|4b1|狂风蚀箭|30.00|1039A1D9|水貂桑|4000031A|木人|28|7400000|135871||634a843a26af69a2b1be9f15c63fedba');
  send(11, '26|2022-01-01T23:55:28.7110000+08:00|4b0|烈毒咬箭|30.00|1039A1D9|水貂桑|4000031A|木人|28|7400000|135871||f186f35dad45a7f1e42b098e9e4fcef6');
  send(8, '21|2022-01-01T20:08:48.2230000+08:00|1039A1D9|水貂桑|1D0C|连环计|4000031F|木人|F60E|4C50000|0|0|0|0|0|0|0|0|0|0|0|0|0|0|7400000|7400000|0|10000|0|1000|-603.1267|-762.9036|25.02|2.283125|111672|111672|10000|10000|0|1000|-608.7234|-772.6032|25|0.4959636|000124F8|0|9b3bbc4918c6d5a21210d038c804ff93');
  send(9, '26|2022-01-01T20:15:20.7690000+08:00|756|占卜|15.00|1039A1D9|水貂桑|1039A1D9|水貂桑|00|109926|109926||30db3dbc4ebad59de05e89825e46d69b');
  send(10, '26|2022-01-01T20:15:20.7690000+08:00|A9C|宏图|15.00|1039A1D9|水貂桑|1039A1D9|水貂桑|00|109926|109926||30db3dbc4ebad59de05e89825e46d69b');
  send(11, '26|2022-01-01T20:53:08.2050000+08:00|4a1|义结金兰：攻击|15.00|1039A1D9|水貂桑|1039A1D9|水貂桑|00|135119|135119||bc8a82a5f86070b6bc9f7779c3b3dc44');
  send(12, '21|2022-01-01T21:05:39.9490000+08:00|1039A1D9|水貂桑|8D2|攻其不备|4000031F|木人|1E710103|6F5B0000|5050E|27E0000|0|0|0|0|0|0|0|0|0|0|0|0|7400000|7400000|0|10000|0|1000|-603.1267|-762.9036|25.02|2.283125|101284|101284|10000|10000|0|1000|-604.7668|-761.4396|25|2.377449|00012569|0|f3ed8ae8ed410d18480c8edddb9ef49d');
  // send(13, '26|2022-01-01T23:55:26.2570000+08:00|4b1|狂风蚀箭|30.00|1039A1D9|水貂桑|4000031F|木人|28|7400000|135871||634a843a26af69a2b1be9f15c63fedba');
  // send(13, '26|2022-01-01T23:55:28.7110000+08:00|4b0|烈毒咬箭|30.00|1039A1D9|水貂桑|4000031F|木人|28|7400000|135871||f186f35dad45a7f1e42b098e9e4fcef6');

  // send(8, '26|2020-09-20T22:04:03.9440000+08:00|511|鼓励|20.00|1039A1D9|水貂桑|1039A1D9|水貂桑|05|52289|52289||140096ff8fe52cfc344ee31759a6b422');
  // send(10, '26|2020-09-20T22:04:07.9110000+08:00|511|鼓励|20.00|1039A1D9|水貂桑|1039A1D9|水貂桑|04|52289|52289||369bee40aab7cfa72bc77aacd0165e89');
  // send(12, '26|2020-09-20T22:04:07.9110000+08:00|511|鼓励|20.00|1039A1D9|水貂桑|1039A1D9|水貂桑|03|52289|52289||369bee40aab7cfa72bc77aacd0165e89');
  // send(14, '26|2020-09-20T22:04:07.9110000+08:00|511|鼓励|20.00|1039A1D9|水貂桑|1039A1D9|水貂桑|02|52289|52289||369bee40aab7cfa72bc77aacd0165e89');
  // send(16, '26|2020-09-20T22:04:07.9110000+08:00|511|鼓励|20.00|1039A1D9|水貂桑|1039A1D9|水貂桑|01|52289|52289||369bee40aab7cfa72bc77aacd0165e89');
  // send(18, '30|2020-09-20T22:04:24.0480000+08:00|511|鼓励|0.00|1039A1D9|水貂桑|1039A1D9|水貂桑|01|76590|52289||91727e97f2e91e3b4823830ea6a35adb');
}
})();

/******/ })()
;